ndata <- 1000
agri <- rnorm(ndata, 0, 10)
cc <- rnorm(ndata, 0, 1)
ba <- -0.5
bc <- 0.5
a <- -1
z <- a + ba*agri + bc*cc
p <- 1/(1+exp(-z))
y <- rbinom(ndata, 1, p)
m0 <- lm(y ~ agri + cc + agri + agri:cc)
0.433774 + -0.038109*mean(agri)
m1 <- glm(y ~ agri + cc +agri:cc, family = "binomial")
int = -0.829
testnonz <- function(coef, pred) {(invlogit(int + coef*mean(pred)) -
invlogit(int + coef*(mean(pred)-1)))*100}
testnonz(-0.45496, agri) ## -10.12255
agri.z <- (agri-mean(agri,na.rm=TRUE))/(2*sd(agri,na.rm=TRUE))
cc.z <- (cc-mean(cc,na.rm=TRUE))/(2*sd(cc,na.rm=TRUE))
m2 <- glm(y ~ agri.z + cc.z + agri.z:cc.z, family = "binomial")
int = -0.8653
testz <- function(coef, pred) {(invlogit(int + (coef/(sd(pred)*2))*mean(pred)) -
invlogit(int + (coef/(sd(pred)*2))*(mean(pred)-1)))*100}
testz <- function(coef, pred) {(invlogit( + (coef*(sd(pred)*2)+mean(pred))*mean(pred)) -
invlogit(int + (coef*(sd(pred)*2)+mean(pred))*(mean(pred)-1)))*100}
testz(-8.715, agri) ## -10.13641
testz <- function(coef, pred) {(invlogit( + (coef*(sd(pred)*2))*mean(pred)) -
invlogit(int + (coef*(sd(pred)*2))*(mean(pred)-1)))*100}
testz(-8.715, agri) ## -100
testz <- function(coef, pred) {(invlogit( + (coef/(sd(pred)*2))*mean(pred)) -
invlogit(int + (coef/(sd(pred)*2))*(mean(pred)-1)))*100}
testz(-8.715, agri) ## -100
testz <- function(coef, pred) {(invlogit(int + (coef*(sd(pred)*2))*mean(pred)) -
invlogit(int + (coef*(sd(pred)*2))*(mean(pred)-1)))*100}
testz(-8.715, agri) ## -100
mean(pred)
pred=agri
mean(pred)
range(pred)
coef*(sd(pred)*2)
(coef*(sd(pred)*2))
coef=-8.715
(coef*(sd(pred)*2))
(invlogit(int + (coef*(sd(pred)*2))*mean(pred))
)
div4 = coef/4
div4
testz <- function(coef, pred) {(invlogit(int + coef*mean(pred))) -
invlogit(int + (coef*(mean(pred)-1)))*100}
testz(-8.715, agri) ## -100
pred=agri.z
testz <- function(coef, pred) {(int + coef*mean(pred)) - (int + (coef*(mean(pred)-1)))}
zpred <- testz(-8.715, agri) ##
zpred
pred=agri
div4 = coef/4 #-2.17875
testz <- function(coef, pred) {(int + coef*mean(pred)) - (int + (coef*(mean(pred)-1)))}
zpred <- testz(-8.715, agri) ##
zpred
(int + coef*mean(pred)) - (int + (coef*(mean(pred)-1))
)
testz <- function(coef, pred) {(int + coef*mean(pred)) - (int + (coef*(mean(pred)-1)))}
testz(-8.715, agri) ## -100
int + coef*mean(pred)
int + (coef*(mean(pred)-1)
)
ndata <- 1000
agri <- rnorm(ndata, 0, 10)
cc <- rnorm(ndata, 0, 1)
ba <- -0.5
bc <- 0.5
a <- -1
z <- a + ba*agri + bc*cc
p <- 1/(1+exp(-z))
y <- rbinom(ndata, 1, p)
m0 <- lm(y ~ agri + cc + agri + agri:cc)
0.433774 + -0.038109*mean(agri)
m1 <- glm(y ~ agri + cc +agri:cc, family = "binomial")
int = -0.829
testnonz <- function(coef, pred) {(invlogit(int + coef*mean(pred)) -
invlogit(int + coef*(mean(pred)-1)))*100}
testnonz(-0.45496, agri) ## -10.22591
-0.45496/4
m0
-0.038109/4
#### Now try and make fake data to really tease this apart and test
set.seed(1234)
ndata <- 1000
agri <- rnorm(ndata, 0, 10)
cc <- rnorm(ndata, 0, 1)
ba <- -0.5
bc <- 0.5
a <- -1
z <- a + ba*agri + bc*cc
p <- 1/(1+exp(-z))
y <- rbinom(ndata, 1, p)
m0 <- lm(y ~ agri + cc + agri + agri:cc)
m0
m1 <- glm(y ~ agri + cc +agri:cc, family = "binomial")
m1
coef(m1)
coef(m1)[1]
(coef(m1)[2])/4
int = coef(m1)[1]
testnonz <- function(coef, pred) {(invlogit(int + coef*mean(pred)) -
invlogit(int + coef*(mean(pred)-1)))*100}
testnonz((coef(m1)[2]), agri) ## -9.922911
summary(m1)
rm(list=ls())
options(stringsAsFactors = FALSE)
## Load Libraries
library(dplyr)
library(tidyr)
# Set Working Directory
setwd("~/Documents/git/microclimates/analyses")
## Data!
dvr<-read.csv("output/clean_budburstandleafout.csv", header=TRUE)
prov <- read.csv("input/provenanceinfo.csv", header=TRUE)
## Now some climate data!
cc <- read.csv("output/clean_addinclimate.csv", header=TRUE)
### For this question, only need daily tmean so I will condense below
cc.dvr <- subset(cc, select=c("date", "year", "doy", "tmean", "climatetype"))
cc.dvr$tmean <- ave(cc.dvr$tmean, cc.dvr$date, cc.dvr$climatetype)
cc.dvr <- cc.dvr[!duplicated(cc.dvr),]
cc.dvr <- cc.dvr %>%
spread(climatetype, tmean)
### Now let's prepare the dvr dataframe for merging climate data
dvr$risk <- dvr$leafout - dvr$budburst
dvr <- dvr[!is.na(dvr$risk),]
dvr$climatetype <- ifelse(dvr$type=="Treespotters" | dvr$type=="Common Garden", "weldhill", "harvardforest")
period<-2015:2019
#nsites <- ncol(cc.dvr) - 3 ## this is to subtract date, doy, and year columns from site count
sites <- arrange(as.data.frame(subset(dvr, select=c("climatetype"))), climatetype)
sites <- as.data.frame(sites[!duplicated(sites),])
sites <-na.omit(sites)
nsites <- length(unique(sites$`sites[!duplicated(sites), ]`))
sites$siteslist<-1:nsites
colnames(sites)<-c("climatetype", "siteslist")
dvr$siteslist <- NA
for(i in c(1:nrow(dvr))){
for(j in c(1:nrow(sites)))
dvr$siteslist[i] <- ifelse(dvr$climatetype[i]==sites$climatetype[j], sites$siteslist[j], dvr$siteslist[i])
}
individuals <- as.data.frame(subset(dvr, select=c("id")))
individuals <- as.data.frame(individuals[!duplicated(individuals),])
ninds <- nrow(individuals)
individuals$indslist<-1:ninds
colnames(individuals)<-c("id", "indslist")
dvr$indslist <- NA
for(i in c(1:nrow(dvr))){
for(j in c(1:nrow(individuals)))
dvr$indslist[i] <- ifelse(dvr$id[i]==individuals$id[j], individuals$indslist[j], dvr$indslist[i])
}
springtemps <- function(x) {
nyears<-length(period)
sitesarray <- array(NA, dim=c(length(period), 1:nsites)) ## may need to tweak this once there are more sites...
row.names(sitesarray)<-period
colnames(sitesarray) <- "mst"
for(i in 1:nsites){#i=1
print(i)
springtemps <- vector()
dvrtemps <- vector()
yearlyresults <- array(NA, dim=c(length(period), 1))
for(j in period){#j=2016
print(paste(i,j))
yearj <- length(period)
springtemps <- cc.dvr[(cc.dvr$doy>=60 & cc.dvr$doy<=151 & cc.dvr$year==j),] # average spring temp from March 1-May 31
springtemps <- springtemps[,(i+3)] ### finding the correct column for the climate type we're using
yearlyresults[which(period==j),1] <- mean(springtemps, na.rm=TRUE)
}
sitesarray[,,i] <- yearlyresults
}
sitesdf <- as.data.frame(sitesarray)
names(sitesdf) <- substring(names(sitesdf), 5)
x$mst <- NA
for(k in c(1:nrow(x))){#k=1
x$mst[k]<-sitesdf[which(x$year[k]==row.names(sitesdf)),x$siteslist[k]]
}
return(x)
}
foo <- springtemps(dvr)
View(foo)
dvr <- springtemps(dvr)
#ninds<-length(individuals$indslist)
yearlyresults <- array(NA, dim=c(length(individuals$id), 1, length(period)))
row.names(yearlyresults) <- individuals$indslist
colnames(yearlyresults) <- "dvrtemps"
i=2015
print(i)
dvrtemps <- vector()
indsarray <- array(NA, dim=c(length(individuals$id), 1))
j=1
print(paste(i,j))
sitenum <- unique(dvr$siteslist[which(dvr$indslist==j)])
dvrtemps <- cc.dvr[(cc.dvr$doy>=dvr$budburst[which(dvr$indslist==j & dvr$year==i)] &
cc.dvr$doy<=dvr$leafout[which(dvr$indslist==j & dvr$year==i)] & cc.dvr$year==i),]
dvrtemps <- dvrtemps[,(sitenum+3)]
indsarray[which(individuals$indslist==j),1] <- mean(dvrtemps, na.rm=TRUE)
View(indsarray)
yearlyresults[,,i] <- indsarray
nyears<-length(period)
#sitesarray <- array(NA, dim=c(length(period), 1:nsites))
yearlyresults <- array(NA, dim=c(length(individuals$id), 1:nyears))
row.names(yearlyresults) <- individuals$indslist
colnames(yearlyresults) <- "dvrtemps"
i=2015
print(i)
dvrtemps <- vector()
indsarray <- array(NA, dim=c(length(individuals$id), 1))
j=1
print(paste(i,j))
sitenum <- unique(dvr$siteslist[which(dvr$indslist==j)])
dvrtemps <- cc.dvr[(cc.dvr$doy>=dvr$budburst[which(dvr$indslist==j & dvr$year==i)] &
cc.dvr$doy<=dvr$leafout[which(dvr$indslist==j & dvr$year==i)] & cc.dvr$year==i),]
dvrtemps <- dvrtemps[,(sitenum+3)]
indsarray[which(individuals$indslist==j),1] <- mean(dvrtemps, na.rm=TRUE)
yearlyresults[,,i] <- indsarray
yearlyresults
sitesarray <- array(NA, dim=c(length(period), 1:nsites))
sitesarray
#sitesarray <- array(NA, dim=c(length(period), 1:nsites))
yearlyresults <- array(NA, dim=c(length(individuals$id), 1:nyears))
yearlyresults
1:nyears
#sitesarray <- array(NA, dim=c(length(period), 1:nsites))
yearlyresults <- array(NA, dim=c(length(indslist), 1:nyears))
#sitesarray <- array(NA, dim=c(length(period), 1:nsites))
yearlyresults <- array(NA, dim=c(length(ninds), 1:nyears))
yearlyresults
nsites
nyears
#sitesarray <- array(NA, dim=c(length(period), 1:nsites))
yearlyresults <- array(NA, dim=c(ninds, 1:nyears))
yearlyresults
indssarray <- array(NA, dim=c(length(period), 1:ninds))
View(cc)
i=3
springtemps <- cc.dvr[(cc.dvr$doy[j]>=dvr$budburst[i] & cc.dvr$doy[j]<=dvr$leafout[i] & cc.dvr$year[j]==dvr$year[i]),] # average spring temp from March 1-May 31
springtemps
j=2016
springtemps <- cc.dvr[(cc.dvr$doy>=dvr$budburst[i] & cc.dvr$doy<=dvr$leafout[i] & cc.dvr$year[j]==dvr$year[i]),] # average spring temp from March 1-May 31
springtemps
i=3
j=2016
k=1
springtemps <- cc.dvr[(dvr$year[i]==j),] # average spring temp from March 1-May 31
springtemps <- springtemps[,(i+3)] ### finding the correct column for the climate type we're using
springtemps <- springtemps[,(k+3)] ### finding the correct column for the climate type we're using
springtemps
k
springtemps <- cc.dvr[(dvr$year[i]==j),] # average spring temp from March 1-May 31
springtemps
springtemps <- cc.dvr[(cc.dvr$year==j),] # average spring temp from March 1-May 31
springtemps <- springtemps[,(k+3)] ### finding the correct column for the climate type we're using
springtemps
springtemps <- cc.dvr[(cc.dvr$year==j),] # average spring temp from March 1-May 31
springtemps <- springtemps[,(k+3),] ### finding the correct column for the climate type we're using
springtemps
foo <- springtemps[(dvr$budburst[i]:dvr$leafout[i]),]
foo <- springtemps[(dvr$budburst[i]:dvr$leafout[i])]
foo
View(dvr)
dvr$dvr.temp <- NA
dvrtempfunc <- function(x) {
x$dvr.temp <- NA
for(i in c(1:nrow(x))) {#i=3
for(j in period){#j=2016
for(k in 1:nsites){#k=1
dvrtemps <- cc.dvr[(cc.dvr$year==j),] # average spring temp from March 1-May 31
dvrtemps <- dvrtemps[,(k+3)] ### finding the correct column for the climate type we're using
dvrtemps <- dvrtemps[(x$budburst[i]:x$leafout[i])]
x$dvr.temp[i] <- mean(dvrtemps, na.rm=TRUE)
}
}
}
return(x)
}
foo <- dvrtempfunc(dvr)
View(foo)
colnames(dvr)
dvr.stan <- subset(dvr, select=c("provenance.lat", "risk", "species", "type", "dvr.temp", "id"))
dvr.stan <- dvr.stan[!duplicated(dvr.stan),]
dvr.stan <- subset(dvr, select=c("provenance.lat", "risk", "genus", "species", "type", "dvr.temp", "id"))
dvr.stan <- dvr.stan[!duplicated(dvr.stan),]
dvr$spp <- paste(substr(dvr$genus, 0,3), substr(dvr$species, 0,3), sep="")
dvr.stan <- subset(dvr, select=c("provenance.lat", "risk", "spp", "type", "dvr.temp", "id"))
dvr.stan <- dvr.stan[!duplicated(dvr.stan),]
datalist.dvr <- with(dvr.stan,
list(y = risk,
lat = provenance.lat,
site = type,
dvrtemp = dvr.temp,
sp = as.numeric(as.factor(spp)),
N = nrow(dvr.stan),
n_sp = length(unique(dvr.stan$spp))
)
)
dvr.siteint = stan('stan/nointer_2level_studyint_dvrtemp.stan', data = datalist.dvrl,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
library(rstan)
dvr.siteint = stan('stan/nointer_2level_studyint_dvrtemp.stan', data = datalist.dvrl,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
dvr.siteint = stan('stan/nointer_2level_studyint_dvrtemp.stan', data = datalist.dvr,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
datalist.dvr <- with(dvr.stan,
list(y = risk,
lat = provenance.lat,
site = as.numeric(as.factor(spp)),
dvrtemp = dvr.temp,
sp = as.numeric(as.factor(spp)),
N = nrow(dvr.stan),
n_sp = length(unique(dvr.stan$spp)),
n_site = length(unique(dvr.stan$type))
)
)
dvr.siteint = stan('stan/nointer_2level_studyint_dvrtemp.stan', data = datalist.dvr,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
dvr.stan <- dvr.stan[!is.na(dvr.stan$dvr.temp),]
datalist.dvr <- with(dvr.stan,
list(y = risk,
lat = provenance.lat,
site = as.numeric(as.factor(spp)),
dvrtemp = dvr.temp,
sp = as.numeric(as.factor(spp)),
N = nrow(dvr.stan),
n_sp = length(unique(dvr.stan$spp)),
n_site = length(unique(dvr.stan$type))
)
)
dvr.siteint = stan('stan/nointer_2level_studyint_dvrtemp.stan', data = datalist.dvr,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
View(dvr)
rm(list=ls())
options(stringsAsFactors = FALSE)
## Load Libraries
library(dplyr)
library(tidyr)
# Set Working Directory
setwd("~/Documents/git/microclimates/analyses")
## Data!
dvr<-read.csv("output/clean_budburstandleafout.csv", header=TRUE)
prov <- read.csv("input/provenanceinfo.csv", header=TRUE)
## Now some climate data!
cc <- read.csv("output/clean_addinclimate.csv", header=TRUE)
### For this question, only need daily tmean so I will condense below
cc.dvr <- subset(cc, select=c("date", "year", "doy", "tmean", "climatetype"))
cc.dvr$tmean <- ave(cc.dvr$tmean, cc.dvr$date, cc.dvr$climatetype)
cc.dvr <- cc.dvr[!duplicated(cc.dvr),]
cc.dvr <- cc.dvr %>%
spread(climatetype, tmean)
### Now let's prepare the dvr dataframe for merging climate data
dvr$risk <- dvr$leafout - dvr$budburst
dvr <- dvr[!is.na(dvr$risk),]
dvr$climatetype <- ifelse(dvr$type=="Treespotters" | dvr$type=="Common Garden", "weldhill", "harvardforest")
### Okay, now we can run the function to find mean spring temperature and mean temperature during DVR for each
# site, individual and year. Mean spring temp will be from March 1 - May 31
period<-2015:2019
#nsites <- ncol(cc.dvr) - 3 ## this is to subtract date, doy, and year columns from site count
sites <- arrange(as.data.frame(subset(dvr, select=c("climatetype"))), climatetype)
sites <- as.data.frame(sites[!duplicated(sites),])
sites <-na.omit(sites)
nsites <- length(unique(sites$`sites[!duplicated(sites), ]`))
sites$siteslist<-1:nsites
colnames(sites)<-c("climatetype", "siteslist")
dvr$siteslist <- NA
for(i in c(1:nrow(dvr))){
for(j in c(1:nrow(sites)))
dvr$siteslist[i] <- ifelse(dvr$climatetype[i]==sites$climatetype[j], sites$siteslist[j], dvr$siteslist[i])
}
individuals <- as.data.frame(subset(dvr, select=c("id")))
individuals <- as.data.frame(individuals[!duplicated(individuals),])
ninds <- nrow(individuals)
individuals$indslist<-1:ninds
colnames(individuals)<-c("id", "indslist")
dvr$indslist <- NA
for(i in c(1:nrow(dvr))){
for(j in c(1:nrow(individuals)))
dvr$indslist[i] <- ifelse(dvr$id[i]==individuals$id[j], individuals$indslist[j], dvr$indslist[i])
}
springtemps <- function(x) {
#nyears<-length(period)
sitesarray <- array(NA, dim=c(length(period), 1:nsites)) ## may need to tweak this once there are more sites...
row.names(sitesarray)<-period
colnames(sitesarray) <- "mst"
for(i in 1:nsites){#i=1
print(i)
springtemps <- vector()
dvrtemps <- vector()
yearlyresults <- array(NA, dim=c(length(period), 1))
for(j in period){#j=2016
print(paste(i,j))
yearj <- length(period)
springtemps <- cc.dvr[(cc.dvr$doy>=60 & cc.dvr$doy<=151 & cc.dvr$year==j),] # average spring temp from March 1-May 31
springtemps <- springtemps[,(i+3)] ### finding the correct column for the climate type we're using
yearlyresults[which(period==j),1] <- mean(springtemps, na.rm=TRUE)
}
sitesarray[,,i] <- yearlyresults
}
sitesdf <- as.data.frame(sitesarray)
names(sitesdf) <- substring(names(sitesdf), 5)
x$mst <- NA
for(k in c(1:nrow(x))){#k=1
x$mst[k]<-sitesdf[which(x$year[k]==row.names(sitesdf)),x$siteslist[k]]
}
return(x)
}
dvr <- springtemps(dvr)
dvrtempfunc <- function(x) {
x$dvr.temp <- NA
for(i in c(1:nrow(x))) {#i=3
for(j in period){#j=2016
for(k in 1:nsites){#k=1
dvrtemps <- cc.dvr[(cc.dvr$year==j),] # average spring temp from March 1-May 31
dvrtemps <- dvrtemps[,(k+3)] ### finding the correct column for the climate type we're using
dvrtemps <- dvrtemps[(x$budburst[i]:x$leafout[i])]
x$dvr.temp[i] <- mean(dvrtemps, na.rm=TRUE)
}
}
}
return(x)
}
dvr <- dvrtempfunc(dvr)
View(dvr)
dvr$spp <- paste(substr(dvr$genus, 0,3), substr(dvr$species, 0,3), sep="")
dvr.stan <- subset(dvr, select=c("provenance.lat", "risk", "spp", "type", "dvr.temp", "id"))
dvr.stan <- dvr.stan[!duplicated(dvr.stan),]
dvr.stan <- dvr.stan[!is.na(dvr.stan$dvr.temp),]
datalist.dvr <- with(dvr.stan,
list(y = risk,
lat = provenance.lat,
site = as.numeric(as.factor(spp)),
dvrtemp = dvr.temp,
sp = as.numeric(as.factor(spp)),
N = nrow(dvr.stan),
n_sp = length(unique(dvr.stan$spp)),
n_site = length(unique(dvr.stan$type))
)
)
dvr.siteint = stan('stan/nointer_2level_studyint_dvrtemp.stan', data = datalist.dvr,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
dvr.stan <- subset(dvr, select=c("provenance.lat", "risk", "spp", "type", "dvr.temp", "id"))
dvr.stan <- dvr.stan[!duplicated(dvr.stan),]
dvr.stan <- na.omit(dvr)
datalist.dvr <- with(dvr.stan,
list(y = risk,
lat = provenance.lat,
site = as.numeric(as.factor(spp)),
dvrtemp = dvr.temp,
sp = as.numeric(as.factor(spp)),
N = nrow(dvr.stan),
n_sp = length(unique(dvr.stan$spp)),
n_site = length(unique(dvr.stan$type))
)
)
dvr.siteint = stan('stan/nointer_2level_studyint_dvrtemp.stan', data = datalist.dvr,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
datalist.dvr <- with(dvr.stan,
list(y = risk,
lat = provenance.lat,
site = as.numeric(as.factor(site)),
dvrtemp = dvr.temp,
sp = as.numeric(as.factor(spp)),
N = nrow(dvr.stan),
n_sp = length(unique(dvr.stan$spp)),
n_site = length(unique(dvr.stan$type))
)
)
dvr.siteint = stan('stan/nointer_2level_studyint_dvrtemp.stan', data = datalist.dvr,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
datalist.dvr <- with(dvr.stan,
list(y = risk,
lat = provenance.lat,
site = as.numeric(as.factor(type)),
dvrtemp = dvr.temp,
sp = as.numeric(as.factor(spp)),
N = nrow(dvr.stan),
n_sp = length(unique(dvr.stan$spp)),
n_site = length(unique(dvr.stan$type))
)
)
dvr.siteint = stan('stan/nointer_2level_studyint_dvrtemp.stan', data = datalist.dvr,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
dvr.siteint
range(dvr.stan$risk)
dvr.stan <- subset(dvr, select=c("provenance.lat", "risk", "spp", "type", "dvr.temp", "id"))
dvr.stan <- dvr.stan[!duplicated(dvr.stan),]
dvr.stan <- na.omit(dvr.stan)
dvr.stan <- dvr.stan[(dvr.stan$risk>=0),]
datalist.dvr <- with(dvr.stan,
list(y = risk,
lat = provenance.lat,
site = as.numeric(as.factor(type)),
dvrtemp = dvr.temp,
sp = as.numeric(as.factor(spp)),
N = nrow(dvr.stan),
n_sp = length(unique(dvr.stan$spp)),
n_site = length(unique(dvr.stan$type))
)
)
datalist.dvr <- with(dvr.stan,
list(y = risk,
lat = provenance.lat,
#site = as.numeric(as.factor(type)),
dvrtemp = dvr.temp,
sp = as.numeric(as.factor(spp)),
N = nrow(dvr.stan),
n_sp = length(unique(dvr.stan$spp))
#n_site = length(unique(dvr.stan$type))
)
)
dvr.siteint = stan('stan/nointer_2level_dvrtemp.stan', data = datalist.dvr,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
dvr.siteint
