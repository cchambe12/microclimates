options(mc.cores = parallel::detectCores())
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
#bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
bb<-bb[sample(nrow(bb), 15000), ]
pois.test<-brm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, chains=2, cores=2,
family=poisson(), iter = 4000, warmup=2500,
prior = prior(normal(-6,6), class=b))
poisbase<-glm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=negative.binomial())
poisbase<-glm(fs.count ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=negative.binomial(theta=2))
summary(poisbase)
poisbase<-glm(fs ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=negative.binomial(theta=2))
summary(poisbase)
poisbase<-glm(fs ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=quasibinomial())
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
poisbase<-glm(fs ~ nao.z + mat.z + dist.z + space.z + elev.z +
cc.z + species +
mat.z:species + dist.z:species + space.z:species + elev.z:species + cc.z:species +
mat.z:cc.z + dist.z:cc.z + space.z:cc.z + elev.z:cc.z, data=bb, family=quasibinomial())
summary(poisbase)
bet <- read.csv("~/Documents/git/ospree/analyses/bb_analysis/PEP_climate/input/bbch_betpen.csv")
head(bet)
rm(list=ls())
options(stringsAsFactors=FALSE)
library(brms)
load("/Users/catchamberlain/Downloads/orig_full_itrxns.Rdata")
check <- brms:extract_draws(orig.full, re_formula=c("cc.z", "elev.z", "species"))
check <- brms::extract_draws(orig.full, re_formula=c("cc.z", "elev.z", "species"))
check <- brms::extract_draws(orig.full)
View(check)
varies <- get_variables(orig.full)
library(broom)
varies <- get_variables(orig.full)
library(tidybayes)
install.packages("tidybayes")
varies <- get_variables(orig.full)
library(tidybayes)
varies <- get_variables(orig.full)
varies <- gsub(".*b_","",varies)
conds <- r_conditions[speciesBETPEN, mat.z]
conds <- r_condition[speciesBETPEN, mat.z]
check <- orig.full %>%
spread_draws(species[elev.z, cc.z, term])
library(dplyr)
check <- orig.full %>%
spread_draws(species[elev.z, cc.z, term])
varies <- get_variables(orig.full)
varies
check <- orig.full %>%
spread_draws(b_speciesBETPEN[elev.z, cc.z, term]) %>%
spread_draws(b_speciesFRAEXC[elev.z, cc.z, term])
check <- orig.full %>%
spread_draws(b_speciesBETPEN[elev.z, term]) %>%
spread_draws(b_speciesFRAEXC[elev.z, term])
check <- orig.full %>%
spread_draws(b_elev.z[condition, term]) %>%
spread_draws(b_cc.z[condition, term])
check <- orig.full %>%
add_fitted_draws()
check <- add_fitted_draws(orig.full)
check <- bb %>% add_fitted_draws(orig.full)
View(check)
head(check)
check <- bb %>% add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN")) %>%
dplyr::select(species, cc, elev)
check <- bb %>% add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN"))
unique(check$species)
foo <- ungroup(check) %>%
dplyr::select(species, cc, elev)
View(foo)
foo <- foo[!duplicated(foo),]
colnames(check)
foo <- ungroup(check) %>%
dplyr::select(species, cc, elev, .value)
foo <- foo[!duplicated(foo),]
View(foo)
ggplot(foo, aes(x=elev, y=.value, col=species, alpha=cc)) + geom_line()
ggplot(foo, aes(x=elev, y=.value, col=species, alpha=as.factor(cc))) + geom_line(aes(col=species, alpha=as.factor(cc)), stat="smooth", method="lm")
goober <- posterior_interval(orig.full, prob=0.5)
View(goober)
check <- bb %>% add_fitted_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
colnames(check)
ggplot(foo, aes(x=elev, y=.value, col=species, alpha=as.factor(cc))) + geom_line(aes(col=species, alpha=as.factor(cc)),
stat="smooth", method="lm", se=TRUE, span=0.5)
ggplot(foo, aes(x=elev, y=.value, col=species, line_type=as.factor(cc))) + geom_line(aes(col=species, line_type=as.factor(cc)),
stat="smooth", method="lm", se=TRUE, span=0.5)
ggplot(foo, aes(x=elev, y=.value, col=species, linetype=as.factor(cc))) + geom_line(aes(col=species, linetype=as.factor(cc)),
stat="smooth", method="lm", se=TRUE, span=0.5)
list_of_draws <- extract(orig.full)
## Libraries
library(rstan)
list_of_draws <- extract(orig.full)
load("/Users/catchamberlain/Downloads/orig_full_itrxns.Rdata")
list_of_draws <- extract(orig.full)
list_of_draws <- extract_fit(orig.full)
list_of_draws <- brms::extract_fit(orig.full)
library(brms)
list_of_draws <- brms::extract_fit(orig.full)
list_of_draws <- brms::extract_draws(orig.full)
print(names(list_of_draws))
gather <- bb %>% gather_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
library(dplyr)
gather <- bb %>% gather_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
library(tidybayes)
library(broom)
gather <- bb %>% gather_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
gather <- orig.full %>% gather_draws(elev.z, cc.z, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
gather <- orig.full %>% gather_draws(`b_elev.z`, `b_cc.z`, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
gather <- orig.full %>% gather_draws(b_elev.z, b_cc.z, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
check <- bb %>% add_fitted_draws(orig.full, prob=0.5) %>%
filter(species==c("FRAEXC", "BETPEN"))
foo <- ungroup(check) %>%
dplyr::select(species, cc, elev, .value)
bb %>%
data_grid(elev) %>%
add_fitted_draws(orig.full) %>%
ggplot(aes(x = .value, y = elev)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
ggplot(aes(x = .value, y = elev)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
filter(check$species==c("FRAEXC", "BETPEN")) %>%
ggplot(aes(x = .value, y = elev, group=cc)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN")) %>%
ggplot(aes(x = .value, y = elev, group=cc, col=species)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN")) %>%
ggplot(aes(x = .value, y = elev, linetype=as.factor(cc), col=species)) +
stat_pointintervalh(.width = c(.25, .75))
bb %>%
add_fitted_draws(orig.full) %>%
filter(species==c("FRAEXC", "BETPEN")) %>%
ggplot(aes(x = .value, y = elev, linetype=as.factor(cc), col=species)) +
geom_line(.width = c(.25, .75), aes(col=species, linetype=as.factor(cc)),
stat="smooth", method="lm")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(egg)
# Set Working Directory
setwd("~/Documents/git/treespotters/analysis/input")
b<-read.csv("individual_phenometrics_data.csv",header=TRUE)
### Cheap cleaning method to remove probable errors...
#d<-b[(b$First_Yes_DOY>=60),]
#d[] <- lapply(d, gsub, pattern="'", replacement="")
#d<-d[!(d$ObservedBy_Person_ID=='26122' & d$First_Yes_Year==2017 & d$First_Yes_DOY==85),]
#d<-d[!(d$Species=="alba" & d$First_Yes_DOY == 66 & d$Phenophase_Description=="Leaves"),]
d<-b[(b$Multiple_Observers>0),]
d<-d%>%
dplyr::select(Genus, Species, Individual_ID, Phenophase_Description, First_Yes_Year, First_Yes_DOY)
d<-d[!duplicated(d),]
df<-d%>%
group_by(Individual_ID, First_Yes_Year, Phenophase_Description)%>%
filter(row_number()==1)%>%
rename(year=First_Yes_Year)%>%
rename(doy=First_Yes_DOY)%>%
rename(pheno=Phenophase_Description)%>%
rename(id=Individual_ID)
df$gen<-substr(df$Genus, 1, 3)
df$sp<-substr(df$Species,1, 3)
df$species<-paste(df$gen, df$sp, sep="")
df$doy<-as.numeric(df$doy)
df$mean<-ave(df$doy, df$pheno, df$year, df$species)
#df$mean<-ifelse(df$pheno=="Leaves" & df$species=="Popdel" & df$year==2017, 110, df$mean)
df<-ungroup(df)
dx<-df%>%
dplyr::select(species, pheno, year, mean)
dx<-dx[!duplicated(dx),]
phases<-c("Breaking leaf buds", "Leaves", "Flowers or flower buds")
dx<-filter(dx, pheno%in%phases)
dx<-filter(dx, year>=2016)
dx$species<-ifelse(dx$species=="Acesac", "Acer saccharum", dx$species)
dx$species<-ifelse(dx$species=="Aesfla", "Aesculus flava", dx$species)
dx$species<-ifelse(dx$species=="Betall", "Betula alleghaniensis", dx$species)
dx$species<-ifelse(dx$species=="Betnig", "Betula nigra", dx$species)
dx$species<-ifelse(dx$species=="Cargla", "Carya glabra", dx$species)
dx$species<-ifelse(dx$species=="Carova", "Carya ovata", dx$species)
dx$species<-ifelse(dx$species=="Faggra", "Fagus grandifolia", dx$species)
dx$species<-ifelse(dx$species=="Popdel", "Populus deltoides", dx$species)
dx$species<-ifelse(dx$species=="Quealb", "Quercus alba", dx$species)
dx$species<-ifelse(dx$species=="Querub", "Quercus rubra", dx$species)
dx$species<-ifelse(dx$species=="Tilame", "Tilia americana", dx$species)
dvr<-dx
dvr$pheno<-ifelse(dvr$pheno=="Breaking leaf buds", "bb", dvr$pheno)
dvr$pheno<-ifelse(dvr$pheno=="Leaves", "lo", dvr$pheno)
dvr$pheno<-ifelse(dvr$pheno=="Flowers or flower buds", "flo", dvr$pheno)
dvr<-spread(dvr, pheno, mean)
dvr$lo<-as.numeric(dvr$lo)
dvr$bb<-as.numeric(dvr$bb)
dvr$risk<-dvr$lo-dvr$bb
dvr$hys<-ifelse(dvr$lo<=dvr$flo, "pro", "hys")
#ggplot(dx, aes(x=species, y=mean)) + geom_point(aes(color=pheno)) + facet_wrap(~species)
#fit1<-stan_glm(risk~bb+as.factor(year), data=dvr)
#fit1
cols <- colorRampPalette(brewer.pal(3,"Set1"))(3)
#dvr<-dvr[!(dvr$species=="Fagus grandifolia" & dvr$year==2018)]
dvr$code<-reorder(dvr$species, dvr$risk)
quartz()
frost<- ggplot(dvr, aes(x=code, y=risk)) + geom_point(aes(color=as.factor(year))) + ylab("Frost Risk") +
xlab("Species") + geom_line(aes(x=code, y=risk, color=as.factor(year), group=as.factor(year))) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.x=element_blank(),
axis.text.x = element_text(face = "italic", angle=45, hjust=1),
axis.text=element_text(size=10), legend.key = element_rect(fill = "transparent"),
legend.box.background = element_rect(), legend.position = c(0.15, 0.85)) + scale_color_manual(values=cols,
labels=c("2016","2017","2018"),
name="Year") + scale_y_continuous(limits=c(0, 30), expand=c(0,0))
dx.r<-filter(dx, pheno!="Flowers or flower buds")
xx<-subset(dx.r, pheno=="Breaking leaf buds")
xx$bb.yr<-ave(xx$mean, xx$year)
xx<-dplyr::select(xx, bb.yr, year)
xx<-xx[!duplicated(xx),]
dx.r<-inner_join(dx.r, xx)
####### Stop here Jun 19, 2018 - issues with mapping budburst date #########
dx.r$code<-reorder(dx.r$species, dx.r$mean)
dvr2<-ggplot(dx.r, aes(x=code, y=mean)) + geom_point(aes(color=pheno)) +
geom_line() + coord_flip() + ylab("Day of Year") + xlab("Species") +theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.text.y = element_text(face = "italic"),
axis.text=element_text(size=9), legend.key = element_rect(fill = "transparent"),
legend.box.background = element_rect(),
panel.spacing = unit(2, "lines"),
strip.background = element_rect(fill="transparent"),
strip.text = element_text(size=14)) + labs(col="Phenophase") +
facet_wrap(~year) + geom_hline(aes(yintercept=bb.yr), xx, col="forestgreen", linetype="dashed")
dx.h<-filter(dx, pheno!="Breaking leaf buds")
hys<-dplyr::select(dvr, species, year, hys)
dx.h<-inner_join(dx.h, hys)
dx.h<-dx.h[!(dx.h$species=="Fagus grandifolia" & dx.h$year==2018),]
colors<-colorRampPalette(brewer.pal(8,"Spectral"))(2)
hys <- ggplot(dx.h, aes(x=species, y=mean)) + geom_point(aes(col=hys)) + geom_line(aes(col=hys)) +
coord_flip() + ylab("Day of Year") + xlab("Species") +theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.text.y = element_text(face = "italic"),
axis.text=element_text(size=9), legend.key = element_rect(fill = "transparent"),
legend.box.background = element_rect(),
panel.spacing = unit(2, "lines"),
strip.background = element_rect(fill="transparent"),
strip.text = element_text(size=14)) + labs(col="Phenophase") +
facet_wrap(~year) + geom_hline(aes(yintercept=bb.yr), xx, col="forestgreen", linetype="dashed") + scale_color_manual(values=colors,
labels=c(hys="Hysteranthy",
pro="Proteranthy"),
name="")
df<-dplyr::select(b, ObservedBy_Person_ID, First_Yes_Year, First_Yes_DOY)
df[] <- lapply(df, gsub, pattern="'", replacement="")
df<-filter(df, First_Yes_Year==2016)
dsix<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
total.numobs.six <- as.data.frame(table(sort(dsix$ObservedBy_Person_ID)))
total.numobs.six <- data.frame(observer=total.numobs.six$Var1, n=total.numobs.six$Freq)
numobs.six <- subset(total.numobs.six, total.numobs.six$n>40) ## 35 Observers
numobs.six$observer <- as.character(numobs.six$observer)
numobs.six$n <- as.numeric(numobs.six$n)
totobservs <- unique(numobs.six$observer)
numvisits.six <- dsix %>%
filter(ObservedBy_Person_ID %in% totobservs) %>%
rename(doy = First_Yes_DOY) %>%
rename(observer = ObservedBy_Person_ID) %>%
rename(year = First_Yes_Year)
numvisits.six <- numvisits.six[!duplicated(numvisits.six),]
numvisits.six$numdays <- as.numeric(ave(numvisits.six$doy, numvisits.six$observer, FUN=length))
numvisits.six <- subset(numvisits.six, numvisits.six$numdays>3)
numvisits.six$doy <- as.numeric(numvisits.six$doy)
numvisits.six$first <- ave(numvisits.six$doy, numvisits.six$observer, FUN=min)
numvisits.six$last <- ave(numvisits.six$doy, numvisits.six$observer, FUN=max)
numvisits.six$daysbtw <- numvisits.six$last - numvisits.six$first
numvisits.six$doy <- NULL
numvisits.six <- numvisits.six[!duplicated(numvisits.six),]
observers.16 <- full_join(numobs.six, numvisits.six)
if(FALSE){
total.numobs.six$observer <- as.character(total.numobs.six$observer)
roster$observer <- as.character(roster$observer)
total.numobs.six <- full_join(total.numobs.six, roster)
total.numobs.six <- total.numobs.six[order(-total.numobs.six$n),]
total.numobs.six <- total.numobs.six[!is.na(total.numobs.six$n),]
#write.csv(total.numobs.six, file="observers2016.csv", row.names = FALSE)
dsix<-dsix[!duplicated(dsix),]
length(unique(dsix$ObservedBy_Person_ID))
# 62 = 2016
}
df<-dplyr::select(b, ObservedBy_Person_ID, First_Yes_Year, First_Yes_DOY)
df[] <- lapply(df, gsub, pattern="'", replacement="")
df<-filter(df, First_Yes_Year==2017)
dseven<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
total.numobs.seven <- as.data.frame(table(sort(dseven$ObservedBy_Person_ID)))
total.numobs.seven <- data.frame(observer=total.numobs.seven$Var1, n=total.numobs.seven$Freq)
numobs.seven <- subset(total.numobs.seven, total.numobs.seven$n>40) ## 35 Observers
numobs.seven$observer <- as.character(numobs.seven$observer)
numobs.seven$n <- as.numeric(numobs.seven$n)
totobservs <- unique(numobs.seven$observer)
numvisits.seven <- dseven %>%
filter(ObservedBy_Person_ID %in% totobservs) %>%
rename(doy = First_Yes_DOY) %>%
rename(observer = ObservedBy_Person_ID) %>%
rename(year = First_Yes_Year)
numvisits.seven <- numvisits.seven[!duplicated(numvisits.seven),]
numvisits.seven$numdays <- as.numeric(ave(numvisits.seven$doy, numvisits.seven$observer, FUN=length))
numvisits.seven <- subset(numvisits.seven, numvisits.seven$numdays>3)
numvisits.seven$doy <- as.numeric(numvisits.seven$doy)
numvisits.seven$first <- ave(numvisits.seven$doy, numvisits.seven$observer, FUN=min)
numvisits.seven$last <- ave(numvisits.seven$doy, numvisits.seven$observer, FUN=max)
numvisits.seven$daysbtw <- numvisits.seven$last - numvisits.seven$first
numvisits.seven$doy <- NULL
numvisits.seven <- numvisits.seven[!duplicated(numvisits.seven),]
observers.17 <- full_join(numobs.seven, numvisits.seven)
if(FALSE){
total.numobs.seven$observer <- as.character(total.numobs.seven$observer)
roster$observer <- as.character(roster$observer)
total.numobs.seven <- full_join(total.numobs.seven, roster)
total.numobs.seven <- total.numobs.seven[order(-total.numobs.seven$n),]
total.numobs.seven <- total.numobs.seven[!is.na(total.numobs.seven$n),]
#write.csv(total.numobs.seven, file="observers2017.csv", row.names = FALSE)
dseven<-dseven[!duplicated(dseven),]
length(unique(dseven$ObservedBy_Person_ID))
# 74 = 2017
}
df<-dplyr::select(b, ObservedBy_Person_ID, First_Yes_Year, First_Yes_DOY)
df[] <- lapply(df, gsub, pattern="'", replacement="")
df<-filter(df, First_Yes_Year==2018)
deight<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
total.numobs.eight <- as.data.frame(table(sort(deight$ObservedBy_Person_ID)))
total.numobs.eight <- data.frame(observer=total.numobs.eight$Var1, n=total.numobs.eight$Freq)
numobs.eight <- subset(total.numobs.eight, total.numobs.eight$n>40) ## 35 Observers
numobs.eight$observer <- as.character(numobs.eight$observer)
numobs.eight$n <- as.numeric(numobs.eight$n)
totobservs <- unique(numobs.eight$observer)
numvisits.eight <- deight %>%
filter(ObservedBy_Person_ID %in% totobservs) %>%
rename(doy = First_Yes_DOY) %>%
rename(observer = ObservedBy_Person_ID) %>%
rename(year = First_Yes_Year)
numvisits.eight <- numvisits.eight[!duplicated(numvisits.eight),]
numvisits.eight$numdays <- as.numeric(ave(numvisits.eight$doy, numvisits.eight$observer, FUN=length))
numvisits.eight <- subset(numvisits.eight, numvisits.eight$numdays>3)
numvisits.eight$doy <- as.numeric(numvisits.eight$doy)
numvisits.eight$first <- ave(numvisits.eight$doy, numvisits.eight$observer, FUN=min)
numvisits.eight$last <- ave(numvisits.eight$doy, numvisits.eight$observer, FUN=max)
numvisits.eight$daysbtw <- numvisits.eight$last - numvisits.eight$first
numvisits.eight$doy <- NULL
numvisits.eight <- numvisits.eight[!duplicated(numvisits.eight),]
observers.18 <- full_join(numobs.eight, numvisits.eight)
roster <- read.csv("grouproster.csv", header=TRUE)
roster <- roster %>% dplyr::select(Person_ID, User_Name, Name) %>%
rename(observer = Person_ID)
allobsers <- full_join(observers.16, observers.17)
allobsers <- full_join(allobsers, observers.18)
roster$observer <- as.character(roster$observer)
allobsers <- full_join(allobsers, roster)
allobsers$totalobs <- ave(allobsers$n, allobsers$observer, FUN=sum)
allobsers$year <- as.numeric(allobsers$year)
allobsers$totyears <- ave(allobsers$year, allobsers$observer, FUN=length)
allobsers <- allobsers[!is.na(allobsers$n),]
if(FALSE){
total.numobs.eight$observer <- as.character(total.numobs.eight$observer)
roster$observer <- as.character(roster$observer)
total.numobs.eight <- full_join(total.numobs.eight, roster)
total.numobs.eight <- total.numobs.eight[order(-total.numobs.eight$n),]
total.numobs.eight <- total.numobs.eight[!is.na(total.numobs.eight$n),]
#write.csv(total.numobs.eight, file="observers2018.csv", row.names = FALSE)
deight<-deight[!duplicated(deight),]
length(unique(deight$ObservedBy_Person_ID))
# 58 = 2016
obs<-full_join(dsix, dseven)
obs<-full_join(obs, deight)
obs<-obs[!duplicated(obs),]
tt<-as.data.frame(table(obs$First_Yes_Year, obs$ObservedBy_Person_ID))
tt$years<-ave(
tt$Freq, tt$Var2,
FUN=function(x) cumsum(c(1, head(x, -1)))
)
t18<-subset(tt, Var1==2018)
t18<-t18[(t18$Freq>0),]
table(t18$years)
}
cols <- colorRampPalette(brewer.pal(3, "Set1"))
histtotal<-ggplot(allobsers, aes(x=n)) + geom_histogram(binwidth = 11, size=0.3, aes(fill=year)) +
scale_fill_manual(values=cols, name="Year",
labels=c("2016","2017", "2018"))
xlab("Number of Observations") + ylab("Number of Observers") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
cols <- colorRampPalette(c("blue", "red"))
hist2016<-ggplot(total.numobs.six, aes(x=n)) + geom_histogram(binwidth = 11, size=0.3, fill=cols(33)) +
xlab("Number of Observations") + ylab("Number of Observers") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
hist2017<-ggplot(total.numobs.seven, aes(x=n)) + geom_histogram(binwidth = 11, size=0.3, fill=cols(52)) +
xlab("Number of Observations") + ylab("Number of Observers") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
hist2018<-ggplot(total.numobs.eight, aes(x=n)) + geom_histogram(binwidth = 11, size=0.3, fill=cols(33)) +
xlab("Number of Observations") + ylab("Number of Observers") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
quartz()
ggarrange(hist2016, hist2017, hist2018, ncol=3)
hist2018<-ggplot(total.numobs.eight, aes(x=n)) + geom_histogram(binwidth = 11, size=0.3, fill=cols(34)) +
xlab("Number of Observations") + ylab("Number of Observers") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
ggarrange(hist2016, hist2017, hist2018, ncol=3)
hist2016<-ggplot(total.numobs.six, aes(x=n)) + geom_histogram(binwidth = 11, size=0.3, fill=cols(34)) +
xlab("Number of Observations") + ylab("Number of Observers") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
hist2016
hist2017
hist2017
hist2017<-ggplot(total.numobs.seven, aes(x=n)) + geom_histogram(binwidth = 11, size=0.3, fill=cols(53)) +
xlab("Number of Observations") + ylab("Number of Observers") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
hist2017
hist2018<-ggplot(total.numobs.eight, aes(x=n)) + geom_histogram(binwidth = 11, size=0.3, fill=cols(34)) +
xlab("Number of Observations") + ylab("Number of Observers") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
hist2018
hist2018<-ggplot(total.numobs.eight, aes(x=n)) + geom_histogram(binwidth = 11, size=0.3, fill=cols(33)) +
xlab("Number of Observations") + ylab("Number of Observers") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
hist2018
View(allobsers)
table(allobsers$year)
rm(list=ls())
options(stringsAsFactors = FALSE)
## Load Libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(rstanarm)
library(geosphere)
library(anytime)
library(weathermetrics)
library(measurements)
library(lubridate)
library(egg)
library(chillR)
# Set Working Directory
setwd("~/Documents/git/microclimates/analyses")
d <- read.csv("output/clean_budburstandleafout.csv", header=TRUE)
# 1. Let's add in climate data first for forcing.
source("calculating/clean_addinclimate.R") ## takes a while to load all the data, brings in climate data
write.csv(cc, file="~/Documents/git/treespotters/analysis/input/weldclimate.csv", row.names=FALSE)
