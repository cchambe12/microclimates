rm(list=ls())
options(stringsAsFactors = FALSE)
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("lizzie", getwd())>0)) {
setwd("~/Documents/git/treegarden/budreview/ospree/analyses/bb_analysis")
} else if (length(grep("ailene", getwd()))>0) {setwd("~/Documents/GitHub/ospree/analyses/bb_analysis")
}else if(length(grep("Ignacio", getwd()))>0) {
setwd("~/GitHub/ospree/analyses/bb_analysis")
} else if(length(grep("catchamberlain", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
} else if(length(grep("danielbuonaiuto", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
}else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/bb_analysis")
library(shinystan)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# dostan = TRUE
use.chillports = TRUE# change to false for using utah instead of chill portions (most models use chill portions z)
use.zscore = TRUE # change to false to use raw predictors
# Default is species complex and no crops
use.allspp = FALSE
use.multcuespp = FALSE
use.cropspp = FALSE
# Default is species complex use  alltypes of designs
use.expramptypes.fp = TRUE
use.exptypes.fp = FALSE
#Default is all chilling data
use.expchillonly = FALSE # change to true for only experimental chilling
#note: with only exp chilling, there is only exp photo and force too.
#also: subsetting to exp chill only reduces dataset to 3 species, <9 studies
source("source/bbstanleadin.R")
bb.wlat <- bb.stan
bb.wlat <- within(bb.wlat, { prov.lat <- ave(provenance.lat, complex, FUN=function(x) length(unique(x)))}) # multiple provenance.lats
bb.wlat <- subset(bb.wlat, bb.wlat$prov.lat>1)
tt <- table(bb.wlat$complex.wname)### testing
#Abies_alba           Acer_complex    Acer_pseudoplatanus         Acer_saccharum
#16                     46                     36                     19
#Aesculus_hippocastanum        Alnus_glutinosa           Alnus_incana         Betula_complex
#19                     16                     22                     27
#Betula_pendula       Betula_pubescens       Carpinus_betulus            Cornus_alba
#269                    190                     19                     13
#Corylus_avellana        Fagus_sylvatica       Fraxinus_complex     Fraxinus_excelsior
#31                    157                     38                     17
#Larix_decidua            Picea_abies        Populus_complex        Populus_tremula
#59                    185                     14                     21
#Prunus_avium         Prunus_complex           Prunus_padus  Pseudotsuga_menziesii
#13                     33                     20                    114
#Quercus_complex        Quercus_faginea           Quercus_ilex        Quercus_petraea
#29                     22                     15                     29
#Quercus_robur          Quercus_rubra          Salix_complex       Sorbus_aucuparia
#20                     13                     21                     16
#Syringa_vulgaris          Tilia_cordata          Ulmus_complex      Vaccinium_complex
#16                     14                    180                     18
lat.stan<-bb.wlat
lat.stan<-subset(lat.stan, lat.stan$resp<600)
lat.stan$lat <- lat.stan$provenance.lat
lat.stan$complex<-as.numeric(as.factor(lat.stan$complex.wname))
lat.stan<-na.omit(lat.stan)
if(use.chillports == TRUE & use.zscore == TRUE){
source("../lat_analysis/source/bblat_zscorepreds.R")
datalist.lat <- with(lat.stan,
list(y = resp,
chill = chill.ports.z,
force = force.z,
photo = photo.z,
lat = lat.z,
sp = complex,
N = nrow(lat.stan),
n_sp = length(unique(lat.stan$complex))
)
)
}
if(use.zscore == TRUE){m2l.inter = stan('../lat_analysis/stan/winter_2level_lat.stan', data = datalist.lat,
iter = 2500, warmup=1500, control=list(max_treedepth = 12,adapt_delta = 0.99))}
check_all_diagnostics(m2l.inter)
m2l.inter.sum <- summary(m2l.inter)$summary
m2l.inter.sum[grep("mu_", rownames(m2l.inter.sum)),]
m2l.inter.sum[grep("sigma_", rownames(m2l.inter.sum)),]
ys<-datalist.lat$y
y_pred <- extract(m2l.inter, 'y_ppc')
par(mfrow=c(1,2))
hist(lat.stan$response.time, breaks=40, xlab="real data response time", main="No intxn model")
hist(y_pred[[1]][1,], breaks=40, xlab="PPC response time", main="")
#### Now for mu plots based of bb_analysis/models_stan_plotting.R ###
figpath <- "../lat_analysis/figures"
if(use.allspp==FALSE & use.expramptypes.fp==TRUE){
figpathmore <- "spcom_expramp_fp"
}
if(use.allspp==TRUE & use.expramptypes.fp==TRUE){
figpathmore <- "allspp_expramp_fp"
}
source("../lat_analysis/lat_muplot.R")
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 12, name = "Paired"), 4)
library(RColorBrewer)
library(egg)
my.pal <- rep(brewer.pal(n = 12, name = "Paired"), 4)
# display.brewer.all()
my.pch <- rep(15:18, each=12)
alphahere = 0.4
sumer.ni <- summary(m2l.inter)$summary
sumer.ni[grep("mu_", rownames(sumer.ni)),]
sort(unique(lat.stan$complex)) # numbers are alphabetical
sort(unique(lat.stan$complex.wname))
modelhere <- m2l.inter
quartz()
muplotfx(modelhere, "", 7, 8, c(0,5), c(-20, 20) , 22, 5)
if(use.allspp==FALSE & use.expramptypes.fp==TRUE){
figpathmore <- "latanalysis_spcom_expramp_fp"
}
muplotfx(modelhere, "", 7, 8, c(0,5), c(-20, 20) , 22, 5)
-2.89/(sd(lat.stan$lat))*mean(lat.stan$lat)
(-2.89/(sd(lat.stan$lat)))*mean(lat.stan$lat)
-2.89*sd(lat.stan$lat)
-23.63686+mean(lat.stan$lat)
rm(list=ls())
options(stringsAsFactors = FALSE)
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("lizzie", getwd())>0)) {
setwd("~/Documents/git/treegarden/budreview/ospree/analyses/bb_analysis")
} else if (length(grep("ailene", getwd()))>0) {setwd("~/Documents/GitHub/ospree/analyses/bb_analysis")
}else if(length(grep("Ignacio", getwd()))>0) {
setwd("~/GitHub/ospree/analyses/bb_analysis")
} else if(length(grep("catchamberlain", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
} else if(length(grep("danielbuonaiuto", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
}else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/bb_analysis")
library(shinystan)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
use.chillports = TRUE# change to false for using utah instead of chill portions (most models use chill portions z)
use.zscore = FALSE # change to false to use raw predictors
# Default is species complex and no crops
use.allspp = FALSE
use.multcuespp = FALSE
use.cropspp = FALSE
# Default is species complex use  alltypes of designs
use.expramptypes.fp = TRUE
use.exptypes.fp = FALSE
#Default is all chilling data
use.expchillonly = FALSE # change to true for only experimental chilling
#note: with only exp chilling, there is only exp photo and force too.
#also: subsetting to exp chill only reduces dataset to 3 species, <9 studies
source("source/bbstanleadin.R")
bb.wlat <- bb.stan
bb.wlat <- within(bb.wlat, { prov.lat <- ave(provenance.lat, complex, FUN=function(x) length(unique(x)))}) # multiple provenance.lats
bb.wlat <- subset(bb.wlat, bb.wlat$prov.lat>1)
tt <- table(bb.wlat$complex.wname)### testing
#Abies_alba           Acer_complex    Acer_pseudoplatanus         Acer_saccharum
#16                     46                     36                     19
#Aesculus_hippocastanum        Alnus_glutinosa           Alnus_incana         Betula_complex
#19                     16                     22                     27
#Betula_pendula       Betula_pubescens       Carpinus_betulus            Cornus_alba
#269                    190                     19                     13
#Corylus_avellana        Fagus_sylvatica       Fraxinus_complex     Fraxinus_excelsior
#31                    157                     38                     17
#Larix_decidua            Picea_abies        Populus_complex        Populus_tremula
#59                    185                     14                     21
#Prunus_avium         Prunus_complex           Prunus_padus  Pseudotsuga_menziesii
#13                     33                     20                    114
#Quercus_complex        Quercus_faginea           Quercus_ilex        Quercus_petraea
#29                     22                     15                     29
#Quercus_robur          Quercus_rubra          Salix_complex       Sorbus_aucuparia
#20                     13                     21                     16
#Syringa_vulgaris          Tilia_cordata          Ulmus_complex      Vaccinium_complex
#16                     14                    180                     18
lat.stan<-bb.wlat
lat.stan<-subset(lat.stan, lat.stan$resp<600)
lat.stan$lat <- lat.stan$provenance.lat
lat.stan$complex<-as.numeric(as.factor(lat.stan$complex.wname))
lat.stan<-na.omit(lat.stan)
#z-scored models
if(use.chillports == FALSE & use.zscore == TRUE){
source("../lat_analysis/source/bblat_zscorepreds.R")
datalist.lat <- with(lat.stan,
list(y = resp,
chill = chill.z,
force = force.z,
photo = photo.z,
lat = lat.z,
sp = complex,
N = nrow(lat.stan),
n_sp = length(unique(lat.stan$complex))
)
)
}
if(use.chillports == TRUE & use.zscore == TRUE){
source("../lat_analysis/source/bblat_zscorepreds.R")
datalist.lat <- with(lat.stan,
list(y = resp,
chill = chill.ports.z,
force = force.z,
photo = photo.z,
lat = lat.z,
sp = complex,
N = nrow(lat.stan),
n_sp = length(unique(lat.stan$complex))
)
)
}
if(use.chillports == TRUE & use.zscore == FALSE){
datalist.lat.nonz <- with(lat.stan,
list(y = resp,
chill = chill.ports,
force = force,
photo = photo,
lat = lat,
sp = complex,
N = nrow(lat.stan),
n_sp = length(unique(lat.stan$complex))
)
)
}
m2l.inter = stan('../lat_analysis/stan/winter_2level_lat.stan', data = datalist.lat,
iter = 2500, warmup=1500, control=list(max_treedepth = 12,adapt_delta = 0.99))
m2l.inter = stan('../lat_analysis/stan/winter_2level_lat.stan', data = datalist.lat.nonz,
iter = 2500, warmup=1500, control=list(max_treedepth = 12,adapt_delta = 0.99))
check_all_diagnostics(m2l.inter)
m2l.inter.sum <- summary(m2l.inter)$summary
m2l.inter.sum[grep("mu_", rownames(m2l.inter.sum)),]
m2l.inter.sum[grep("sigma_", rownames(m2l.inter.sum)),]
rm(list=ls())
options(stringsAsFactors = FALSE)
# Setting working directory. Add in your own path in an if statement for your file structure
if(length(grep("lizzie", getwd())>0)) {
setwd("~/Documents/git/treegarden/budreview/ospree/analyses/bb_analysis")
} else if (length(grep("ailene", getwd()))>0) {setwd("~/Documents/GitHub/ospree/analyses/bb_analysis")
}else if(length(grep("Ignacio", getwd()))>0) {
setwd("~/GitHub/ospree/analyses/bb_analysis")
} else if(length(grep("catchamberlain", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
} else if(length(grep("danielbuonaiuto", getwd()))>0) {
setwd("~/Documents/git/ospree/analyses/bb_analysis")
}else setwd("~/Documents/git/projects/treegarden/budreview/ospree/analyses/bb_analysis")
library(shinystan)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# dostan = TRUE
use.chillports = TRUE# change to false for using utah instead of chill portions (most models use chill portions z)
use.zscore = TRUE # change to false to use raw predictors
# Default is species complex and no crops
use.allspp = FALSE
use.multcuespp = FALSE
use.cropspp = FALSE
# Default is species complex use  alltypes of designs
use.expramptypes.fp = TRUE
use.exptypes.fp = FALSE
#Default is all chilling data
use.expchillonly = FALSE # change to true for only experimental chilling
#note: with only exp chilling, there is only exp photo and force too.
#also: subsetting to exp chill only reduces dataset to 3 species, <9 studies
source("source/bbstanleadin.R")
bb.wlat <- bb.stan
bb.wlat <- within(bb.wlat, { prov.lat <- ave(provenance.lat, complex, FUN=function(x) length(unique(x)))}) # multiple provenance.lats
bb.wlat <- subset(bb.wlat, bb.wlat$prov.lat>1)
tt <- table(bb.wlat$complex.wname)### testing
#Abies_alba           Acer_complex    Acer_pseudoplatanus         Acer_saccharum
#16                     46                     36                     19
#Aesculus_hippocastanum        Alnus_glutinosa           Alnus_incana         Betula_complex
#19                     16                     22                     27
#Betula_pendula       Betula_pubescens       Carpinus_betulus            Cornus_alba
#269                    190                     19                     13
#Corylus_avellana        Fagus_sylvatica       Fraxinus_complex     Fraxinus_excelsior
#31                    157                     38                     17
#Larix_decidua            Picea_abies        Populus_complex        Populus_tremula
#59                    185                     14                     21
#Prunus_avium         Prunus_complex           Prunus_padus  Pseudotsuga_menziesii
#13                     33                     20                    114
#Quercus_complex        Quercus_faginea           Quercus_ilex        Quercus_petraea
#29                     22                     15                     29
#Quercus_robur          Quercus_rubra          Salix_complex       Sorbus_aucuparia
#20                     13                     21                     16
#Syringa_vulgaris          Tilia_cordata          Ulmus_complex      Vaccinium_complex
#16                     14                    180                     18
lat.stan<-bb.wlat
lat.stan<-subset(lat.stan, lat.stan$resp<600)
lat.stan$lat <- lat.stan$provenance.lat
lat.stan$complex<-as.numeric(as.factor(lat.stan$complex.wname))
lat.stan<-na.omit(lat.stan)
if(use.chillports == TRUE & use.zscore == TRUE){
source("../lat_analysis/source/bblat_zscorepreds.R")
datalist.lat <- with(lat.stan,
list(y = resp,
chill = chill.ports.z,
force = force.z,
photo = photo.z,
lat = lat.z,
sp = complex,
N = nrow(lat.stan),
n_sp = length(unique(lat.stan$complex))
)
)
}
if(use.zscore == TRUE){m2l.inter = stan('../lat_analysis/stan/winter_2level_lat.stan', data = datalist.lat,
iter = 2500, warmup=1500, control=list(max_treedepth = 12,adapt_delta = 0.99))}
mod_sum <- posterior_samples(m2l.inter)
library(brms) ## for posterior_samples function to make APC plot
mod_sum <- posterior_samples(m2l.inter)
# To plot with lat on the x axis we need to set up a vector of distances to predict:
#newphoto <- seq(from=range(lat.stan$photo.z)[1], to=range(lat.stan$photo.z)[2], length.out=200)
newlat <- seq(from=range(lat.stan$lat.z)[1], to=range(lat.stan$lat.z)[2], length.out=200)
osp.lat.lophoto <- data.frame(lat=numeric(), fs.mean=numeric(), fs.25=numeric(), fs.75=numeric()) ### number 14 species
osp.lat.hiphoto <- data.frame(lat=numeric(), fs.mean=numeric(), fs.25=numeric(), fs.75=numeric())
for(i in 1:length(newlat)){
osp.lat.lophoto.onelat <- mod_sum$mu_a_sp + (mod_sum$mu_b_lat_sp)*newlat[i] +
(mod_sum$mu_b_photo_sp)*sort(unique(lat.stan$photo.z))[1] +
mod_sum$mu_b_pl_sp*(sort(unique(lat.stan$photo.z))[1]*newlat[i])
osp.lat.hiphoto.onelat <-(mod_sum$mu_a_sp) + (mod_sum$mu_b_lat_sp)*newlat[i] +
(mod_sum$mu_b_photo_sp)*sort(unique(lat.stan$photo.z))[2] +
mod_sum$mu_b_pl_sp*(sort(unique(lat.stan$photo.z))[2]*newlat[i])
lophoto.df.here <-  data.frame(lat=newlat[i], resp=mean(osp.lat.lophoto.onelat),
fs.25=quantile(osp.lat.lophoto.onelat, 0.25), fs.75=quantile(osp.lat.lophoto.onelat, 0.75))
hiphoto.df.here <-  data.frame(lat=newlat[i], resp=mean(osp.lat.hiphoto.onelat),
fs.25=quantile(osp.lat.hiphoto.onelat, 0.25), fs.75=quantile(osp.lat.hiphoto.onelat, 0.75))
osp.lat.lophoto <- rbind(osp.lat.lophoto, lophoto.df.here)
osp.lat.hiphoto <- rbind(osp.lat.hiphoto, hiphoto.df.here)
}
hiphoto<-mean(lat.stan$photo)+1*sd(lat.stan$photo)
lophoto<-mean(lat.stan$photo)-1*sd(lat.stan$photo)
osp.lat.hiphoto$photo <- hiphoto
osp.lat.lophoto$photo <- lophoto
osp.lat <- rbind(osp.lat.hiphoto, osp.lat.lophoto)
osp.lat$lat_trans <- (osp.lat$lat)*sd(lat.stan$lat) + mean(lat.stan$lat)
osp.lat$photo_trans <- as.character(osp.lat$photo)
latitude.allspp <- ggplot(osp.lat, aes(x=lat_trans, y=resp)) + geom_line(aes(linetype=photo_trans, col=photo_trans)) +
geom_ribbon(aes(ymin=fs.25, ymax=fs.75, fill=photo_trans), alpha=0.1) + theme_classic() +
scale_linetype_manual(name="Photoperiod", values=c("dashed", "solid"),
labels=c("7.97834632517043"="8 hours",
"19.0553108948026"="19 hours")) +
scale_color_manual(name="Photoperiod", values=c("red", "blue"),
labels=c("7.97834632517043"="8 hours",
"19.0553108948026"="19 hours")) + xlab("Latitude") +
scale_fill_manual(name="Photoperiod", values=c("red", "blue"),
labels=c("7.97834632517043"="8 hours",
"19.0553108948026"="19 hours")) +
ylab("Day of Budburst") + guides(fill=FALSE) +
theme(legend.text.align = 0, legend.position = c(0.85, 0.85), legend.box.background = element_rect())
quartz()
latitude.allspp
hiphoto
lophoto
latitude.allspp <- ggplot(osp.lat, aes(x=lat_trans, y=resp)) + geom_line(aes(linetype=photo_trans, col=photo_trans)) +
geom_ribbon(aes(ymin=fs.25, ymax=fs.75, fill=photo_trans), alpha=0.1) + theme_classic() +
scale_linetype_manual(name="Photoperiod", values=c("dashed", "solid"),
labels=c("7.86400247036863"="8 hours",
"19.5324883417238"="20 hours")) +
scale_color_manual(name="Photoperiod", values=c("red", "blue"),
labels=c("7.86400247036863"="8 hours",
"19.5324883417238"="20 hours")) + xlab("Latitude") +
scale_fill_manual(name="Photoperiod", values=c("red", "blue"),
labels=c("7.86400247036863"="8 hours",
"19.5324883417238"="20 hours")) +
ylab("Day of Budburst") + guides(fill=FALSE) +
theme(legend.text.align = 0, legend.position = c(0.85, 0.85), legend.box.background = element_rect())
latitude.allspp
rm(list=ls())
options(stringsAsFactors = FALSE)
## Load Libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(rstanarm)
library(brms)
# Set Working Directory
setwd("~/Documents/git/microclimates/analyses")
## Data!
d<-read.csv("input/individual_phenometrics_data.csv.csv", header=TRUE)
## Data!
d<-read.csv("input/individual_phenometrics_data.csv", header=TRUE)
head(d)
### first determine the phenophases I'm most interested in...
sort(unique(d$Phenophase_Description))
## Let's start with Flowers or flower buds to Open flowers time, should we have budburst as another predictor?
ts <- subset(d, select=c("Genus", "Species", "Individual_ID", "Phenophase_Description", "First_Yes_Year",
"First_Yes_DOY"))
names(ts) <- c("genus", "species", "id", "phenophase", "year", "doy")
View(ts)
ts <- ts[(ts$phenophase%in%phenos),]
phenos <- c("Flowers or flower buds", "Open flowers", "Breaking leaf buds", "Leaves", "Fruits", "Ripe fruits")
ts <- ts[(ts$phenophase%in%phenos),]
ts$phenophase <- ifelse(ts$phenophase=="Flowers or flower buds", "flobudburst", ts$phenophase)
ts$phenophase <- ifelse(ts$phenophase=="Open flowers", "flowers", ts$phenophase)
ts$phenophase <- ifelse(ts$phenophase=="Breaking leaf buds", "budburst", ts$phenophase)
ts$phenophase <- ifelse(ts$phenophase=="Leaves", "leaves", ts$phenophase)
ts$phenophase <- ifelse(ts$phenophase=="Fruits", "fruits", ts$phenophase)
ts$phenophase <- ifelse(ts$phenophase=="Ripe fruits", "ripefruits", ts$phenophase)
View(ts)
ts <- ts[(ts$year>=2016),]
ts$budburst <- ifelse(ts$phenophase=="budburst", ave(ts$doy, ts$id, ts$year), NA)
ts$budburst <- ifelse(ts$phenophase=="budburst", ave(ts$doy, ts$id, ts$year, FUN=min), NA)
ts$budburst <- ifelse(ts$phenophase=="budburst", ave(ts$doy, ts$id, ts$year, FUN=first), NA)
ts$budburst <- ifelse(ts$phenophase=="budburst", ave(ts$doy, ts$id, ts$year, FUN=first), NA)
ts$leaves <- ifelse(ts$phenophase=="leaves", ave(ts$doy, ts$id, ts$year, FUN=first), NA)
ts$flobudburst <- ifelse(ts$phenophase=="flobudburst", ave(ts$doy, ts$id, ts$year, FUN=first), NA)
ts$flowers <- ifelse(ts$phenophase=="flowers", ave(ts$doy, ts$id, ts$year, FUN=first), NA)
ts$fruits <- ifelse(ts$phenophase=="fruits", ave(ts$doy, ts$id, ts$year, FUN=first), NA)
ts$ripefruits <- ifelse(ts$phenophase=="ripefruits", ave(ts$doy, ts$id, ts$year, FUN=first), NA)
ts.stan <- subset(ts, select=c("genus", "species", "id", "year", "budburst", "leaves", "flobudburst",
"flowers", "fruits", "ripefruits"))
ts.stan <- ts.stan[!duplicated(ts.stan),]
View(ts.stan)
foo <- data.frame("genus", "species", "id", "year", "budburst", "leaves", "flobudburst",
"flowers", "fruits", "ripefruits")
View(foo)
foo <- data.frame(colnames=c("genus", "species", "id", "year", "budburst", "leaves", "flobudburst",
"flowers", "fruits", "ripefruits"))
View(foo)
foo <- data.frame(ncol=10)
newnames <- c("genus", "species", "id", "year", "budburst", "leaves", "flobudburst",
"flowers", "fruits", "ripefruits"))
foo(colnames) <- newnames
newnames <- c("genus", "species", "id", "year", "budburst", "leaves", "flobudburst",
"flowers", "fruits", "ripefruits")
foo(colnames) <- newnames
colnames(foo) <- newnames
foo <- data.frame(matrix(ncol=10))
newnames <- c("genus", "species", "id", "year", "budburst", "leaves", "flobudburst",
"flowers", "fruits", "ripefruits")
colnames(foo) <- newnames
View(foo)
foo$budburst <- ifelse(ts$phenophase=="budburst", ave(ts$doy, ts$id, ts$year, FUN=first), NA)
foo <- data.frame(matrix(ncol=10, nrow=4784))
newnames <- c("genus", "species", "id", "year", "budburst", "leaves", "flobudburst",
"flowers", "fruits", "ripefruits")
colnames(foo) <- newnames
foo$budburst <- ifelse(ts$phenophase=="budburst", ave(ts$doy, ts$id, ts$year, FUN=first), NA)
View(foo)
View(ts)
foo <- ts.stan %>%
group_by(genus, species, id, year) %>%
summarise_all(funs(first(na.omit(.))))
View(foo)
ts.stan <- ts.stan %>%
group_by(genus, species, id, year) %>%
summarise_all(funs(first(na.omit(.))))
