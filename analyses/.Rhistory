trx <- left_join(trx, classes)
View(trx)
View(classes)
trx$group <- ifelse(trx$scientific_name=="Corvus brachyrhynchos", "Bird", trx$group)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
## Libraries
library(dplyr)
library(ggplot2)
#Load the data
results <- read.csv("~/Desktop/test_results_usda_all.csv", header=TRUE)
classes <- read.csv("~/Desktop/listofnames.csv", header=TRUE)
results$image <- gsub(".*/\\s*|'.*", '', results$fileName)
errors <- c(4, 17)
results$modelfix<-NA
results$modelfix <- ifelse(results$guess1==22, results$guess2, results$guess1)
results$modelfix <- ifelse(results$guess1==1, results$guess2, results$modelfix)
results$modelfix <- ifelse(results$modelfix%in%errors, 18, results$modelfix)
results$camera <- gsub("_.*", '', results$image)
classes$modelfix<-classes$Class.ID
classes$group<-classes$Group.name
classes$taxa<-classes$scientific_name
results <- left_join(results, classes)
tocheck <- read.csv("~/Documents/git/cameratrap/WildlifeDetections_CameraTrap.csv", header=TRUE)
trx<-subset(tocheck, select=c("Sampling.Event", "Raw.Name", "Genus", "Species"))
trx$image <- paste(trx$Sampling.Event, trx$Raw.Name, sep="_")
trx$taxa <- paste(trx$Genus, trx$Species, sep=" ")
trx$camera <- substr(trx$image, 0, 6)
trx$camera <- ifelse(trx$camera == "ATXing", substr(trx$image, 8, 13), trx$camera)
results$camera <- ifelse(results$camera=="CAM6A", "CAM06A", results$camera)
trx$group <- ifelse(trx$scientific_name=="Vulpes vulpes", "Fox", trx$group)
trx$group <- ifelse(trx$scientific_name=="Canis latrans", "Canidae", trx$group)
trx$group <- ifelse(trx$scientific_name=="Sciurus carolinensis", "Squirrel", trx$group)
trx$group <- ifelse(trx$scientific_name=="Sylvilagus floridanus", "Rabbits", trx$group)
trx$group <- ifelse(trx$scientific_name=="Turdus migratorius", "Bird", trx$group)
trx$group <- ifelse(trx$scientific_name=="Carduelis tristis", "Bird", trx$group)
trx$group <- ifelse(trx$scientific_name=="Dumetella carolinensis", "Bird", trx$group)
trx$group <- ifelse(trx$scientific_name=="Quiscalus quiscula", "Bird", trx$group)
trx$group <- ifelse(trx$scientific_name=="Zenaida macroura", "Bird", trx$group)
trx$group <- ifelse(trx$scientific_name=="Corvus brachyrhynchos", "Corvid", trx$group)
trx$group <- ifelse(trx$scientific_name=="Urocyon cinereoargenteus", "Fox", trx$group)
trx$group <- ifelse(trx$scientific_name=="Passer domesticus", "Bird", trx$group)
trx$group <- ifelse(trx$scientific_name=="Butorides virescens", "Bird", trx$group)
trx$group <- ifelse(trx$scientific_name=="Neovison vison", "Mustelidae", trx$group)
trx$group <- ifelse(trx$scientific_name=="Cardinalis cardinalis", "Bird", trx$group)
trx$group <- ifelse(trx$scientific_name=="Tamias striatus", "Rodent", trx$group)
trx$group <- ifelse(trx$scientific_name=="Lontra canadensis", "Mustelidae", trx$group)
trx$group <- ifelse(trx$scientific_name=="Ardea herodias", "Bird", trx$group)
trx$group <- ifelse(trx$scientific_name=="Martes pennanti", "Mustelidae", trx$group)
trx$group <- ifelse(trx$scientific_name=="Martes pennanti", "Mustelidae", trx$group)
View(trx)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
## Libraries
library(dplyr)
library(ggplot2)
#Load the data
results <- read.csv("~/Desktop/test_results_usda_all.csv", header=TRUE)
classes <- read.csv("~/Desktop/listofnames.csv", header=TRUE)
results$image <- gsub(".*/\\s*|'.*", '', results$fileName)
errors <- c(4, 17)
results$modelfix<-NA
results$modelfix <- ifelse(results$guess1==22, results$guess2, results$guess1)
results$modelfix <- ifelse(results$guess1==1, results$guess2, results$modelfix)
results$modelfix <- ifelse(results$modelfix%in%errors, 18, results$modelfix)
results$camera <- gsub("_.*", '', results$image)
classes$modelfix<-classes$Class.ID
classes$group<-classes$Group.name
classes$taxa<-classes$scientific_name
results <- left_join(results, classes)
tocheck <- read.csv("~/Documents/git/cameratrap/WildlifeDetections_CameraTrap.csv", header=TRUE)
trx<-subset(tocheck, select=c("Sampling.Event", "Raw.Name", "Genus", "Species"))
trx$image <- paste(trx$Sampling.Event, trx$Raw.Name, sep="_")
trx$taxa <- paste(trx$Genus, trx$Species, sep=" ")
trx$camera <- substr(trx$image, 0, 6)
trx$camera <- ifelse(trx$camera == "ATXing", substr(trx$image, 8, 13), trx$camera)
results$camera <- ifelse(results$camera=="CAM6A", "CAM06A", results$camera)
trx$group <- ifelse(trx$taxa=="Vulpes vulpes", "Fox", trx$group)
trx$group <- ifelse(trx$taxa=="Canis latrans", "Canidae", trx$group)
trx$group <- ifelse(trx$taxa=="Sciurus carolinensis", "Squirrel", trx$group)
trx$group <- ifelse(trx$taxa=="Sylvilagus floridanus", "Rabbits", trx$group)
trx$group <- ifelse(trx$taxa=="Turdus migratorius", "Bird", trx$group)
trx$group <- ifelse(trx$taxa=="Carduelis tristis", "Bird", trx$group)
trx$group <- ifelse(trx$taxa=="Dumetella carolinensis", "Bird", trx$group)
trx$group <- ifelse(trx$taxa=="Quiscalus quiscula", "Bird", trx$group)
trx$group <- ifelse(trx$taxa=="Zenaida macroura", "Bird", trx$group)
trx$group <- ifelse(trx$taxa=="Corvus brachyrhynchos", "Corvid", trx$group)
trx$group <- ifelse(trx$taxa=="Urocyon cinereoargenteus", "Fox", trx$group)
trx$group <- ifelse(trx$taxa=="Passer domesticus", "Bird", trx$group)
trx$group <- ifelse(trx$taxa=="Butorides virescens", "Bird", trx$group)
trx$group <- ifelse(trx$taxa=="Neovison vison", "Mustelidae", trx$group)
trx$group <- ifelse(trx$taxa=="Cardinalis cardinalis", "Bird", trx$group)
trx$group <- ifelse(trx$taxa=="Tamias striatus", "Rodent", trx$group)
trx$group <- ifelse(trx$taxa=="Lontra canadensis", "Mustelidae", trx$group)
trx$group <- ifelse(trx$taxa=="Ardea herodias", "Bird", trx$group)
trx$group <- ifelse(trx$taxa=="Martes pennanti", "Mustelidae", trx$group)
trx$group <- ifelse(trx$taxa=="Martes pennanti", "Mustelidae", trx$group)
View(trx)
trx <- left_join(trx, classes)
trx$taxa <- ifelse(trx$taxa=="Vulpes vulpes", "Vulpes vulpes and Urocyon Cinereoargentus", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Canis latrans", "Canidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Sciurus carolinensis", "Sciurus spp.", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Sylvilagus floridanus", "Leporidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Turdus migratorius", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Carduelis tristis", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Dumetella carolinensis", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Quiscalus quiscula", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Zenaida macroura", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Corvus brachyrhynchos", "Corvidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Urocyon cinereoargenteus", "Vulpes vulpes and Urocyon Cinereoargentus", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Passer domesticus", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Butorides virescens", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Neovison vison", "Mustelidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Cardinalis cardinalis", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Tamias striatus", "Rodentia", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Lontra canadensis", "Mustelidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Ardea herodias", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Martes pennanti", "Mustelidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Martes pennanti", "Mustelidae", trx$taxa)
trx<-subset(trx, subset=c("camera", "image", "taxa", "checkedbyhand"))
trx<-subset(trx, select=c("camera", "image", "taxa", "checkedbyhand"))
View(trx)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
## Libraries
library(dplyr)
library(ggplot2)
#Load the data
results <- read.csv("~/Desktop/test_results_usda_all.csv", header=TRUE)
classes <- read.csv("~/Desktop/listofnames.csv", header=TRUE)
results$image <- gsub(".*/\\s*|'.*", '', results$fileName)
errors <- c(4, 17)
results$modelfix<-NA
results$modelfix <- ifelse(results$guess1==22, results$guess2, results$guess1)
results$modelfix <- ifelse(results$guess1==1, results$guess2, results$modelfix)
results$modelfix <- ifelse(results$modelfix%in%errors, 18, results$modelfix)
results$camera <- gsub("_.*", '', results$image)
classes$modelfix<-classes$Class.ID
classes$group<-classes$Group.name
classes$taxa<-classes$scientific_name
results <- left_join(results, classes)
tocheck <- read.csv("~/Documents/git/cameratrap/WildlifeDetections_CameraTrap.csv", header=TRUE)
trx<-subset(tocheck, select=c("Sampling.Event", "Raw.Name", "Genus", "Species"))
trx$image <- paste(trx$Sampling.Event, trx$Raw.Name, sep="_")
trx$taxa <- paste(trx$Genus, trx$Species, sep=" ")
trx$camera <- substr(trx$image, 0, 6)
trx$camera <- ifelse(trx$camera == "ATXing", substr(trx$image, 8, 13), trx$camera)
results$camera <- ifelse(results$camera=="CAM6A", "CAM06A", results$camera)
trx$taxa <- ifelse(trx$taxa=="Vulpes vulpes", "Vulpes vulpes and Urocyon Cinereoargentus", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Canis latrans", "Canidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Sciurus carolinensis", "Sciurus spp.", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Sylvilagus floridanus", "Leporidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Turdus migratorius", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Carduelis tristis", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Dumetella carolinensis", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Quiscalus quiscula", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Zenaida macroura", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Corvus brachyrhynchos", "Corvidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Urocyon cinereoargenteus", "Vulpes vulpes and Urocyon Cinereoargentus", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Passer domesticus", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Butorides virescens", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Neovison vison", "Mustelidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Cardinalis cardinalis", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Tamias striatus", "Rodentia", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Lontra canadensis", "Mustelidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Ardea herodias", "Aves", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Martes pennanti", "Mustelidae", trx$taxa)
trx$taxa <- ifelse(trx$taxa=="Martes pennanti", "Mustelidae", trx$taxa)
trx<-subset(trx, select=c("camera", "image", "taxa", "checkedbyhand"))
trx<-subset(trx, select=c("camera", "image", "taxa"))
trx <- left_join(trx, classes)
trx$checkedbyhand <- trx$Class.ID
trx <- subset(trx, select=c("image", "camera","checkedbyhand"))
goo <- left_join(results, trx)
goo <- full_join(results, trx)
howmanymatch <- unique(trx$image)
howmanymatch <- unique(trx$image)
foo <- goo[(goo$image%in%howmanymatch),]
View(foo)
goo <- left_join(results, trx)
howmanymatch <- unique(trx$image)
foo <- goo[(goo$image%in%howmanymatch),]
View(goo)
709/821
(exp(-0.48)-1)*100
(exp(0.14)-1)*100
(exp(0.4)-1)*100
(exp(0.19)-1)*100
(exp(0.35)-1)*100
(exp(0.42)-1)*100
(exp(-0.83)-1)*100
load("/Users/catchamberlain/Documents/git/regionalrisk/orig_full.Rdata")
orig.full
(exp(-0.12)-1)*100
broom::tidy(orig.full)
(exp(0.0008967095)-1)*100
load("/Users/catchamberlain/Documents/git/regionalrisk/bbmod.scaled.Rdata")
load("/Users/catchamberlain/Documents/git/regionalrisk/lstfrz.scaled.Rdata")
load("/Users/catchamberlain/Documents/git/regionalrisk/tmin.simple.Rdata")
bb.mod.scaled
lstfrz.mod.scaled
tmin.simple
lstfrz <- read.csv("~/Documents/git/regionalrisk/analyses/output/lastfreezedates.csv")
lstfrz$cc <- ifelse(lstfrz$year<=1983, 0, 1)
lstfrz$cc.z <- (lstfrz$cc-mean(lstfrz$cc,na.rm=TRUE))/(2*sd(lstfrz$cc,na.rm=TRUE))
colnames(lstfrz)
load("/Users/catchamberlain/Documents/git/regionalrisk/tminmod.Rdata")
tmin.mod
171-8
163/20
163/30
163-7
156/30
### Need to first build shapefiles...
pnw_long <- c(-123,  -123,  -119, -119)
pnw_lat <- c(52, 46, 52, 46)
pnw <- cbind(pnw_lat, pnw_long)
pnw
library(sp)
pnwpoly = Polygon(pnw)
pnwps = Polygons(list(pnw),1)
pnwsps = SpatialPolygons(pnw)
plot(pnw)
plot(pnwpoly)
st_write(pnw,
"~/Documents/git/microclimates/pnw.shp", driver = "ESRI Shapefile")
proj4string(pnw) = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
require(sf)
install.packages("sf")
pnwshp<-st_as_sf(pnw)
require(sf)
pnwshp<-st_as_sf(pnw)
pnwshp<-st_as_sf(pnw, crs = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
coordinates(pnw)=~long+lat
### Need to first build shapefiles...
pnw_long <- c(-123,  -123,  -119, -119)
pnw_lat <- c(52, 46, 52, 46)
pnw <- cbind(pnw_lat, pnw_long)
View(pnw)
### Need to first build shapefiles...
pnw <- data.frame(long=c(-123,  -123,  -119, -119), lat= c(52, 46, 52, 46))
coordinates(pnw)=~long+lat
proj4string(pnw)<- CRS("+proj=longlat +datum=WGS84")
LLcoor<-spTransform(pnw,CRS("+proj=longlat"))
pnwshp<-spTransform(pnw,CRS("+proj=longlat"))
(78824+2337+931+655+388+94+93+60+48+45+41+41+36+34+32+23+23+19+19+16+14+10+8+7+7+5+4+4+4+3+3+3+2+2+2+2+22)
(2788+13+8+17+34+2+2+1+1)
2866/83861
osp <- read.csv("~/Documents/git/ospree/analyses/input/ospree.csv")
ospfull <- read.csv("~/Documents/git/ospree/analyses/output/ospree_clean_withchill_BB_taxon.csv")
unique(osp$datasetID)
length(unique(osp$datasetID))
range(osp$year, na.rm=TRUE)
osp <- read.csv("~/Documents/git/ospree/analyses/output/ospree2019update.csv")
osp <- read.csv("~/Documents/git/ospree/analyses/output/ospree2019update.csv")
length(unique(osp$datasetID))
range(osp$year, na.rm=TRUE)
# Clear workspace
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
require(dplyr)
require(tidyr)
require(ggplot2)
require(lubridate)
require(raster)
setwd("~/Documents/git/projects/treegarden/decsens/analyses/pep_analyses/")
#setwd("~/Documents/git/projects/treegarden/decsens/analyses/pep_analyses/")
setwd("~/Documents/git/treegarden/decsens/analyses/pep_analyses/")
#setwd("~/Documents/git/projects/treegarden/decsens/analyses/pep_analyses/")
setwd("~/Documents/git/decsens/analyses/pep_analyses/")
d <- read.csv("input/pep_betpen_all.csv")
df<-d%>%
filter(BBCH==11)%>%
filter(YEAR>=1950 & YEAR<=2010)%>%
dplyr::select(YEAR, DAY, BBCH, PEP_ID, LAT, LON, species)%>%
rename(year=YEAR)%>%
rename(lo=DAY)%>%
rename(lat=LAT)%>%
rename(lon=LON)
df <- dplyr::select(df, year, PEP_ID, lat, lon, lo)
df <- df[!duplicated(df),]
x <- paste(df$year, df$lo)
df$date <-as.Date(strptime(x, format="%Y %j"))
df$Date <- as.character(df$date)
df$lat.lon <- paste(df$lat, df$lon)
allpeps <- df[(df$year>=1951 & df$year<=2010),]
allpeps$num.years<-ave(allpeps$year, allpeps$PEP_ID, FUN=length)
mostdata <- allpeps[(allpeps$num.years>=60),]
lositeyear <- subset(mostdata, select=c("lo", "lat", "lon", "lat.lon", "year"))
getsitez <- lositeyear[!duplicated(lositeyear$lat.lon),] # bad, should add lon, but works for these sites - changed column to lat.lon and then address below
getsitez$x <- getsitez$long
getsitez$y  <- getsitez$lat
Coords <- subset(getsitez, select=c(x, y))
Coords <- na.omit(Coords)
View(getsitez)
getsitez$x <- getsitez$lon
getsitez$y  <- getsitez$lat
Coords <- subset(getsitez, select=c(x, y))
Coords <- na.omit(Coords)
nsites <- length(getsitez$lat.long)
nsites <- length(getsitez$lat.lon)
#rg <- brick("/Volumes/OrangeFiend/climate/eobs/tg_ens_mean_0.25deg_reg_v20.0e.nc", sep="")
rg <- brick("~/Desktop/Big Data Files/tg_0.25deg_reg_v16.0.nc")
period <- c(1951:2010)
points <- SpatialPoints(Coords, proj4string = rg@crs)
yearsinclim <- as.numeric(format(as.Date(names(rg),format="X%Y.%m.%d"),"%Y"))
yearsinperiod <- which(yearsinclim%in%period)
climsub <- subset(tg,yearsinperiod)
climsub <- subset(rg,yearsinperiod)
## subset climate days
monthsinclim <- as.numeric(format(as.Date(names(climsub),format="X%Y.%m.%d"),"%m"))
dailytempmonths <- c(1:4)
monthsindailytemps <- which(monthsinclim%in%dailytempmonths)
dailytempssub <- subset(climsub,monthsindailytemps)
values <- raster::extract(dailytempsub,points)
values <- raster::extract(dailytempssub,points)
dclim <- cbind.data.frame(coordinates(points),value)
dclim <- cbind.data.frame(coordinates(points),values)
require(reshape2)
extclimdata <- melt(dclim, id.vars=c("x","y"))
extclimdata <- extclimdata %>%
rename(long=x) %>%
rename(lat=y) %>%
rename(date=variable) %>%
rename(Tmean=value)
dailyclimdata <- data.frame(lat=extclimdata$lat, lon=extclimdata$long, date=extclimdata$date, tmean=extclimdata$Tmean)
dailyclimdata$date <- substr(dailyclimdata$date, 2,11)
dailyclimdata$Date <- gsub("[.]", "-", dailyclimdata$date)
dailyclimdata$date <- NULL
dailyclimdata$year <- as.numeric(substr(dailyclimdata$Date, 0, 4))
dailyclimdata$lat.lon <- paste(dailyclimdata$lat, dailyclimdata$lon)
View(dailyclimdata)
foo <- dailyclimdata[!duplicated(dailyclimdata),]
write.csv(dailyclimdata, file="~/Documents/git/decsens/analyses/pep_analyses/output/betpen_dailytempsJantoApr_1950to2010.csv", row.names = FALSE)
dailyandlo <- left_join(dailyclimdata, lositeyear)
View(dailyandlo)
write.csv(dailyandlo, file="~/Documents/git/decsens/analyses/pep_analyses/output/betpen_dailytempsandlo_1950to2010.csv", row.names = FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Do some flagging to try all versions of the simulations
## Let's start with Question 1 first...
library(bayesplot) ## for plotting
library(egg) ## for plotting
library(shinystan)
library(rstanarm)
library(rstan)
library(brms)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
source("source/stan_utility.R")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
hobo <- read.csv("output/clean_gdd_chill_bbanddvr_hobo.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 300
mean(hobo$gdd_bb, na.rm=TRUE) ## 250
set.seed(12221)
use.hobo = FALSE ### We expect less species variation using weather station data, so if use.hobo=TRUE, then sigma will be loaded on overall error not on species
use.urban = TRUE
use.provenance = TRUE
use.highsitevariation = FALSE ## Not sure if I will use these but here just in case
use.highprovvariation = FALSE
if(use.urban==FALSE & use.highsitevariation==TRUE){
print("Error was made in flags!! Adjust accordingly!")
}
if(use.provenance==FALSE & use.highprovvariation==TRUE){
print("Error was made in flags!! Adjust accordingly!")
}
########################################################################
if (use.hobo==FALSE & use.urban==TRUE & use.provenance==FALSE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
gdd.stan <- read.csv("output/fakedata_ws_urb.csv")
datalist.gdd <- with(gdd.stan,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$species))
)
)
ws_urb_fake = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.gdd,
iter = 2000, warmup=1500) ###
check_all_diagnostics(ws_urb_fake)
ws_urb_fake.sum <- summary(ws_urb_fake)$summary
ws_urb_fake.sum[grep("mu_", rownames(ws_urb_fake.sum)),]
ws_urb_fake.sum[grep("sigma_", rownames(ws_urb_fake.sum)),]
save(ws_urb_fake, file="~/Documents/git/microclimates/analyses/stan/ws_urban_stan_sims.Rdata")
}
########################################################################
if (use.hobo==TRUE & use.urban==TRUE & use.provenance==FALSE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
gdd.stan <- read.csv("output/fakedata_hl_urb.csv")
datalist.gdd <- with(gdd.stan,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$species))
)
)
hl_urb_fake = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.gdd,
iter = 2000, warmup=1500) ###
check_all_diagnostics(hl_urb_fake)
hl_urb_fake.sum <- summary(hl_urb_fake)$summary
hl_urb_fake.sum[grep("mu_", rownames(hl_urb_fake.sum)),]
hl_urb_fake.sum[grep("sigma_", rownames(hl_urb_fake.sum)),]
save(hl_urb_fake, file="~/Documents/git/microclimates/analyses/stan/hl_urban_stan_sims.Rdata")
}
########################################################################
if (use.hobo==FALSE & use.urban==TRUE & use.provenance==TRUE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
gdd.stan <- read.csv("output/fakedata_ws_urb_prov.csv")
datalist.gdd <- with(gdd.stan,
list(y = gdd,
tx = urban,
prov = prov,
sp = as.numeric(as.factor(species)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$species))
)
)
ws_urb_prov_fake = stan('stan/urbanmodel_stan_normal_prov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
check_all_diagnostics(ws_urb_prov_fake)
ws_urb_prov_fake.sum <- summary(ws_urb_prov_fake)$summary
ws_urb_prov_fake.sum[grep("mu_", rownames(ws_urb_prov_fake.sum)),]
ws_urb_prov_fake.sum[grep("sigma_", rownames(ws_urb_prov_fake.sum)),]
save(ws_urb_prov_fake, file="~/Documents/git/microclimates/analyses/stan/ws_urban_prov_stan_sims.Rdata")
}
datalist.gdd <- with(gdd.stan,
list(y = gdd,
tx = urban,
prov = provenance,
sp = as.numeric(as.factor(species)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$species))
)
)
ws_urb_prov_fake = stan('stan/urbanmodel_stan_normal_prov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
check_all_diagnostics(ws_urb_prov_fake)
ws_urb_prov_fake.sum <- summary(ws_urb_prov_fake)$summary
ws_urb_prov_fake.sum[grep("mu_", rownames(ws_urb_prov_fake.sum)),]
ws_urb_prov_fake.sum[grep("sigma_", rownames(ws_urb_prov_fake.sum)),]
save(ws_urb_prov_fake, file="~/Documents/git/microclimates/analyses/stan/ws_urban_prov_stan_sims.Rdata")
gdd.stan <- read.csv("output/fakedata_hl_urb_prov.csv")
datalist.gdd <- with(gdd.stan,
list(y = gdd,
tx = urban,
prov = provenance,
sp = as.numeric(as.factor(species)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$species))
)
)
hl_urb_prov_fake = stan('stan/urbanmodel_stan_normal_prov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
check_all_diagnostics(hl_urb_prov_fake)
hl_urb_prov_fake.sum <- summary(hl_urb_prov_fake)$summary
hl_urb_prov_fake.sum[grep("mu_", rownames(hl_urb_prov_fake.sum)),]
hl_urb_prov_fake.sum[grep("sigma_", rownames(hl_urb_prov_fake.sum)),]
save(hl_urb_prov_fake, file="~/Documents/git/microclimates/analyses/stan/hl_urban_prov_stan_sims.Rdata")
figpath <- "figures"
figpathmore <- "ws_urb_prov"
source("source/sigmasims_urban_prov_muplot.R")
df <- read.csv("output/fakedata_ws_urb_prov.csv")
y2 = 7
modelhere <- ws_urb_prov_fake
# Set up colors
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 11, name = "Spectral"), 4)
my.pal <- my.pal[my.pal!=c("#FFFFBF", "#FEE08B", "#E6F598")] ## removing light colors that are hard to see
my.pch <- rep(15:18, each=10)
library(RColorBrewer)
my.pal <- rep(brewer.pal(n = 11, name = "Spectral"), 4)
my.pal <- my.pal[my.pal!=c("#FFFFBF", "#FEE08B", "#E6F598")] ## removing light colors that are hard to see
my.pch <- rep(15:18, each=10)
alphahere = 0.4
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
figpathmore <- "hl_urb_prov"
source("source/sigmasims_urban_prov_muplot.R")
df <- read.csv("output/fakedata_hl_urb_prov.csv")
y2 = 7
modelhere <- hl_urb_prov_fake
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
modelhere
i=3
pos.y<-(7:1)[i]
pos.x<-summary(modelhere)$summary[rownameshere[i],"mean"]
rownameshere <- c("mu_a_sp", "mu_b_tx_sp", "mu_b_prov_sp", "sigma_a_sp", "sigma_b_tx_sp", "sigma_b_prov_sp", "sigma_y")
pos.x<-summary(modelhere)$summary[rownameshere[i],"mean"]
pos.x
lines(summary(modelhere)$summary[rownameshere[i],c("25%","75%")],rep(pos.y,2),col="darkgrey")
points(pos.x,pos.y,cex=1.5,pch=19,col="darkblue")
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
spnum <- length(unique(df$species))
spsi=2
pos.sps.i<-which(grepl(paste("[",spsi,"]",sep=""),rownames(summary(modelhere)$summary),fixed=TRUE))[1:y2]
jitt<-(spsi/spnum) + 0.01
pos.y.sps.i<-pos.y-jitt
pos.x.sps.i<-summary(modelhere)$summary[pos.sps.i[i],"mean"]
pos.x.sps.i
source("source/sigmasims_urban_prov_muplot.R")
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
df <- read.csv("output/fakedata_ws_urb_prov.csv")
y2 = 7
modelhere <- ws_urb_prov_fake
figpathmore <- "ws_urb_prov"
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
