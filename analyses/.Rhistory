source("source/sigmasims_urban_muplot.R")
hl <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
hl <- hl[!(hl$type=="Common Garden"),]
hl$urban <- ifelse(hl$type=="Harvard Forest", 0, 1)
hl$spp <- paste(hl$genus, hl$species, sep="_")
gdd.stan <- subset(hl, select=c(gdd_bb, urban, spp))
gdd.stan <- gdd.stan[complete.cases(gdd.stan),]
gdd.stan <- gdd.stan[!duplicated(gdd.stan),]
df <- gdd.stan
df$species <- df$spp
y2 = 5
modelhere <- hl_urb
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
hl_urb
hl_urb.sum <- summary(hl_urb)$summary
hl_urb.sum[grep("mu_", rownames(hl_urb.sum)),]
hl_urb.sum[grep("sigma_", rownames(hl_ur_prov_fake.sum)),]
hl_urb.sum[grep("sigma_", rownames(hl_urb.sum)),]
ws_urb.sum[grep("mu_", rownames(ws_urb.sum)),]
ws_urb.sum[grep("sigma_", rownames(ws_urb.sum)),]
hl <- read.csv("output/clean_gdd_chill_bbanddvr_hobo.csv")
hl <- hl[!(hl$type=="Common Garden"),]
hl$urban <- ifelse(hl$type=="Harvard Forest", 0, 1)
hl$spp <- paste(hl$genus, hl$species, sep="_")
gdd.stan <- subset(hl, select=c(gdd_bb, urban, spp))
gdd.stan <- gdd.stan[complete.cases(gdd.stan),]
gdd.stan <- gdd.stan[!duplicated(gdd.stan),]
datalist.gdd <- with(gdd.stan,
list(y = gdd_bb,
tx = urban,
sp = as.numeric(as.factor(spp)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$spp))
)
)
hl_urb = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
hl_urb.sum <- summary(hl_urb)$summary
hl_urb.sum[grep("mu_", rownames(hl_urb.sum)),]
hl_urb.sum[grep("sigma_", rownames(hl_urb.sum)),]
save(hl_urb, file="~/Documents/git/microclimates/analyses/stan/hl_urban_stan.Rdata")
figpathmore <- "hl_urb"
source("source/sigmasims_urban_muplot.R")
df <- gdd.stan
df$species <- df$spp
y2 = 5
modelhere <- hl_urb
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
ws_urb.sum[grep("mu_", rownames(ws_urb.sum)),]
ws_urb.sum[grep("sigma_", rownames(ws_urb.sum)),]
load("stan/hl_urban_stan_sims.Rdata")
load("stan/ws_urban_stan_sims.Rdata")
figpathmore <- "ws_urb_sims"
source("source/sigmasims_urban_muplot.R")
df <- read.csv("output/fakedata_ws_urb.csv")  ### Make sure species column is called `species`
y2 = 5
modelhere <- ws_urb_fake
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
gdd.stan <- read.csv("output/fakedata_ws_urb.csv")
datalist.gdd <- with(gdd.stan,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$species))
)
)
ws_urb_fake = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 2000, warmup=1500) ###
ws_urb_fake = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 5000, warmup=2000) ###
save(ws_urb_fake, file="~/Documents/git/microclimates/analyses/stan/ws_urban_stan_sims_ncp.Rdata")
gdd.stan <- read.csv("output/fakedata_hl_urb.csv")
datalist.gdd <- with(gdd.stan,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$species))
)
)
hl_urb_fake = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 5000, warmup=2000) ###
save(hl_urb_fake, file="~/Documents/git/microclimates/analyses/stan/hl_urban_stan_sims.Rdata")
figpathmore <- "ws_urb_sims"
source("source/sigmasims_urban_muplot.R")
df <- read.csv("output/fakedata_ws_urb.csv")  ### Make sure species column is called `species`
y2 = 5
modelhere <- ws_urb_fake
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
source("source/sigmasims_urban_muplot.R")
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
ws_urb_fake.sum <- summary(ws_urb_fake)$summary
ws_urb_fake.sum[grep("mu_", rownames(ws_urb_fake.sum)),]
ws_urb_fake.sum[grep("sigma_", rownames(ws_urb_fake.sum)),]
urbfakesum <- as.data.frame(ws_urb_fake.sum)
View(urbfakesum)
figpathmore <- "hl_urb_sims"
source("source/sigmasims_urban_muplot.R")
df <- read.csv("output/fakedata_hl_urb.csv")
y2 = 5
modelhere <- hl_urb_fake
muplotfx(modelhere, "", 7, 8, c(0,y2), c(-400, 700) , 750, y2)
ws_urb.sum <- summary(ws_urb)$summary
ws_urb.sum[grep("mu_", rownames(ws_urb.sum)),]
ws_urb.sum[grep("sigma_", rownames(ws_urb.sum)),]
hl_urb.sum <- summary(hl_urb)$summary
hl_urb.sum[grep("mu_", rownames(hl_urb.sum)),]
hl_urb.sum[grep("sigma_", rownames(hl_urb.sum)),]
hl_urb_fake.sum <- summary(hl_urb_fake)$summary
hl_urb_fake.sum[grep("mu_", rownames(hl_urb_fake.sum)),]
hl_urb_fake.sum[grep("sigma_", rownames(hl_urb_fake.sum)),]
ws_urb_fake.sum <- summary(ws_urb_fake)$summary
ws_urb_fake.sum[grep("mu_", rownames(ws_urb_fake.sum)),]
ws_urb_fake.sum[grep("sigma_", rownames(ws_urb_fake.sum)),]
we_urb_prov_brm
ws_urb_prov_brm
stancode(ws_urb_prov_brm)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
## Let's start with Question 1 first...
library(bayesplot) ## for plotting
library(egg) ## for plotting
library(shinystan)
library(rstanarm)
library(rstan)
library(brms)
library(RColorBrewer)
library(dplyr)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
figpath <- "figures"
use.sims = TRUE
use.hobo = FALSE ### We expect less species variation using weather station data, so if use.hobo=TRUE, then sigma will be loaded on overall error not on species
use.urban = TRUE
use.provenance = FALSE
use.highsitevariation = FALSE ## Not sure if I will use these but here just in case
use.highprovvariation = FALSE
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Do some flagging to try all versions of the simulations
## Let's start with Question 1 first...
library(bayesplot) ## for plotting
library(egg) ## for plotting
library(shinystan)
library(rstanarm)
library(rstan)
library(brms)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
source("source/stan_utility.R")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
ws <- ws[!(ws$type=="Common Garden"),]
ws$provenance <- as.numeric(ws$provenance.lat)
ws$urban <- ifelse(ws$type=="Harvard Forest", 0, 1)
ws$spp <- paste(ws$genus, ws$species, sep="_")
gdd.stan <- subset(ws, select=c(gdd_bb, urban, provenance, spp))
gdd.stan <- gdd.stan[complete.cases(gdd.stan),]
gdd.stan <- gdd.stan[!duplicated(gdd.stan),]
datalist.gdd <- with(gdd.stan,
list(y = gdd_bb,
tx = urban,
prov = provenance,
sp = as.numeric(as.factor(spp)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$spp))
)
)
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
nVars <- 3
X <- diag(3,nVars)
datalist.gdd <- with(gdd.stan,
list(y = gdd_bb,
tx = urban,
prov = provenance,
sp = as.numeric(as.factor(spp)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$spp)),
nVars = nVars,
X = X
)
)
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
datalist.gdd <- with(gdd.stan,
list(y = gdd_bb,
tx = urban,
prov = provenance,
sp = as.numeric(as.factor(spp)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$spp)),
nVars = nVars,
X = diag(N, n_sp)
)
)
datalist.gdd <- with(gdd.stan,
list(y = gdd_bb,
tx = urban,
prov = provenance,
sp = as.numeric(as.factor(spp)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$spp)),
nVars = nVars,
X = diag(nrow(gdd.stan), length(unique(gdd.stan$spp)))
)
)
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
datalist.gdd <- with(gdd.stan,
list(y = gdd_bb,
tx = urban,
prov = provenance,
sp = as.numeric(as.factor(spp)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$spp)),
nVars = nVars,
X = matrix(nrow(gdd.stan), length(unique(gdd.stan$spp)))
)
)
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
matrix(nrow(gdd.stan), length(unique(gdd.stan$spp)))
as.matrix(diag(nrow(gdd.stan), length(unique(gdd.stan$spp))))
length(unique(gdd.stan$spp)
)
nrow(gdd.stan)
as.matrix(nrow(gdd.stan), length(unique(gdd.stan$spp)))
datalist.gdd <- with(gdd.stan,
list(y = gdd_bb,
tx = urban,
prov = provenance,
sp = as.numeric(as.factor(spp)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$spp))
)
)
ws_urb_prov = stan('stan/urbanmodel_stan_normal_prov_vcov.stan', data = datalist.gdd,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
install.packages("VGAM")
## Load VGAM library. This has convenient functions for generating beta-binomial random variables
## and for fitting beta-binomial distributions to data via maximum likelihood estimation
## install.packages("VGAM")
library(VGAM)
## Set parameter values
param <- list(s1 = 2,
s2 = 7,
trials = 10)
## Generate samples from (unshifted) beta-binomial distribution
set.seed(20200329) # set seed for reproducibility
nsamples <- 2000 # how many samples?
sim.stor <- rbetabinom.ab(n = nsamples, # use VGAM generator
size = param[["trials"]],
shape1 = param[["s1"]],
shape2 = param[["s2"]])
## Plot simulated data
plot(NA,
xlim = c(0, param[["trials"]] + 7),
ylim = c(0, .25),
xlab = "Day of flowering",
ylab = "Proportion",
)
tab.sim <- table(sim.stor)
points((tab.sim / nsamples) ~ c(0:10), type = "l", col = "blue")
points((tab.sim / nsamples) ~ c(0:10), type = "p", pch = 16, col = "blue", cex = 2)
## Load rstan library
library(rstan)
options(mc.cores = parallel::detectCores())
## Put simulated data into list for stan
germ.stan <- list(N = length(sim.stor),
G = sim.stor,
D = 8,
Days = c(max(sim.stor):(max(sim.stor)+7)))
## Fit model
fit.stanmarg <- stan("betabinom-marg.stan",
data = germ.stan,
iter = 4000,
warmup = 2000,
chains = 4)
summary(fit.stanmarg, pars = c("shape1", "shape2", "D_new"))$summary
## Fit model
fit.stanmarg <- stan("betabinom-marg.stan",
data = germ.stan,
iter = 4000,
warmup = 2000,
chains = 4)
fit.stanmarg
## Fit model
fit.stanmarg <- stan("betabinom-marg.stan",
data = germ.stan,
iter = 4000,
warmup = 2000,
chains = 2)
## Plot simulated data
plot(NA,
xlim = c(0, param[["trials"]] + 7),
ylim = c(0, .25),
xlab = "Day of flowering",
ylab = "Proportion"
)
tab.sim <- table(sim.stor)
points((tab.sim / nsamples) ~ c(0:10), type = "l", col = "blue")
points((tab.sim / nsamples) ~ c(0:10), type = "p", pch = 16, col = "blue", cex = 2)
## Load rstan library
library(rstan)
options(mc.cores = parallel::detectCores())
## Put simulated data into list for stan
germ.stan <- list(N = length(sim.stor),
G = sim.stor,
D = 8,
Days = c(max(sim.stor):(max(sim.stor)+7)))
## Fit model
fit.stanmarg <- stan("~/Documents/git/bayes2020/Projects/Geoff/betabinom-marg.stan",
data = germ.stan,
iter = 4000,
warmup = 2000,
chains = 4)
rm(list=ls())
options(stringsAsFactors = FALSE)
## Let's start with Question 1 first...
library(bayesplot) ## for plotting
library(egg) ## for plotting
library(shinystan)
library(rstanarm)
library(rstan)
library(brms)
library(RColorBrewer)
library(dplyr)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
figpath <- "figures"
use.sims = FALSE
use.hobo = FALSE ### We expect less species variation using weather station data, so if use.hobo=TRUE, then sigma will be loaded on overall error not on species
use.urban = TRUE
use.provenance = FALSE
use.highsitevariation = FALSE ## Not sure if I will use these but here just in case
use.highprovvariation = FALSE
if (use.sims=TRUE & use.hobo==FALSE & use.urban==TRUE & use.provenance==FALSE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
load("stan/ws_urban_stan_sims.Rdata")
figpathmore <- "ws_urb_sims"
source("source/sigmasims_urban_muplot.R")
df <- read.csv("output/fakedata_ws_urb.csv")  ### Make sure species column is called `species`
y2 = 5
modelhere <- ws_urb_fake
}
if (use.sims==TRUE & use.hobo==FALSE & use.urban==TRUE & use.provenance==FALSE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
load("stan/ws_urban_stan_sims.Rdata")
figpathmore <- "ws_urb_sims"
source("source/sigmasims_urban_muplot.R")
df <- read.csv("output/fakedata_ws_urb.csv")  ### Make sure species column is called `species`
y2 = 5
modelhere <- ws_urb_fake
}
if (use.sims==TRUE & use.hobo==TRUE & use.urban==TRUE & use.provenance==FALSE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
load("stan/hl_urban_stan_sims.Rdata")
figpathmore <- "hl_urb_sims"
source("source/sigmasims_urban_muplot.R")
df <- read.csv("output/fakedata_hl_urb.csv")
y2 = 5
modelhere <- hl_urb_fake
}
if (use.sims==FALSE & use.hobo==FALSE & use.urban==TRUE & use.provenance==FALSE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
load("stan/ws_urban_stan.Rdata")
figpathmore <- "ws_urb"
source("source/sigmasims_urban_muplot.R")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
ws <- ws[!(ws$type=="Common Garden"),]
ws$urban <- ifelse(ws$type=="Harvard Forest", 0, 1)
ws$spp <- paste(ws$genus, ws$species, sep="_")
gdd.stan <- subset(ws, select=c(gdd_bb, urban, spp))
gdd.stan <- gdd.stan[complete.cases(gdd.stan),]
gdd.stan <- gdd.stan[!duplicated(gdd.stan),]
df <- gdd.stan
df$species <- df$spp
y2 = 5
modelhere <- ws_urb
}
if (use.sims==FALSE & use.hobo==TRUE & use.urban==TRUE & use.provenance==FALSE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
load("stan/hl_urban_stan.Rdata")
figpathmore <- "hl_urb"
source("source/sigmasims_urban_muplot.R")
hl <- read.csv("output/clean_gdd_chill_bbanddvr_hobo.csv")
hl <- hl[!(hl$type=="Common Garden"),]
hl$urban <- ifelse(hl$type=="Harvard Forest", 0, 1)
hl$spp <- paste(hl$genus, hl$species, sep="_")
gdd.stan <- subset(hl, select=c(gdd_bb, urban, spp))
gdd.stan <- gdd.stan[complete.cases(gdd.stan),]
gdd.stan <- gdd.stan[!duplicated(gdd.stan),]
df <- gdd.stan
df$species <- df$spp
y2 = 5
modelhere <- hl_urb
}
if (use.sims==TRUE & use.hobo==FALSE & use.urban==TRUE & use.provenance==TRUE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
load("stan/ws_urban_prov_stan_sims.Rdata")
figpathmore <- "ws_urb_prov"
source("source/sigmasims_urban_prov_muplot.R")
df <- read.csv("output/fakedata_ws_urb_prov.csv")
y2 = 7
modelhere <- ws_urb_prov_fake
}
if (use.sims==TRUE & use.hobo==TRUE & use.urban==TRUE & use.provenance==TRUE &
use.highsitevariation==FALSE & use.highprovvariation==FALSE){
load("stan/hl_urban_prov_stan_sims.Rdata")
figpathmore <- "hl_urb_prov"
source("source/sigmasims_urban_prov_muplot.R")
df <- read.csv("output/fakedata_hl_urb_prov.csv")
y2 = 7
modelhere <- hl_urb_prov_fake
}
ws_urb.sum <- summary(ws_urb)$summary
wsurbsum <- as.data.frame(ws_urb.sum)
View(ws_urb.sum)
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
ws <- ws[!(ws$type=="Common Garden"),]
ws$urban <- ifelse(ws$type=="Harvard Forest", 0, 1)
ws$spp <- paste(ws$genus, ws$species, sep="_")
gdd.stan <- subset(ws, select=c(gdd_bb, urban, spp))
gdd.stan <- gdd.stan[complete.cases(gdd.stan),]
gdd.stan <- gdd.stan[!duplicated(gdd.stan),]
datalist.gdd <- with(gdd.stan,
list(y = gdd_bb,
tx = urban,
sp = as.numeric(as.factor(spp)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$spp))
)
)
ws_urb = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb
hl <- read.csv("output/clean_gdd_chill_bbanddvr_hobo.csv")
hl <- hl[!(hl$type=="Common Garden"),]
hl$urban <- ifelse(hl$type=="Harvard Forest", 0, 1)
hl$spp <- paste(hl$genus, hl$species, sep="_")
gdd.stan <- subset(hl, select=c(gdd_bb, urban, spp))
gdd.stan <- gdd.stan[complete.cases(gdd.stan),]
gdd.stan <- gdd.stan[!duplicated(gdd.stan),]
datalist.gdd <- with(gdd.stan,
list(y = gdd_bb,
tx = urban,
sp = as.numeric(as.factor(spp)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$spp))
)
)
hl_urb = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 5000, warmup=3000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
save(ws_urb, file="~/Documents/git/microclimates/analyses/stan/ws_urban_stan.Rdata")
save(hl_urb, file="~/Documents/git/microclimates/analyses/stan/hl_urban_stan.Rdata")
gdd.stan <- read.csv("output/fakedata_ws_urb.csv")
datalist.gdd <- with(gdd.stan,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$species))
)
)
ws_urb_fake = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 5000, warmup=2000) ###
save(ws_urb_fake, file="~/Documents/git/microclimates/analyses/stan/ws_urban_stan_sims_ncp.Rdata")
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Do some flagging to try all versions of the simulations
## Let's start with Question 1 first...
library(bayesplot) ## for plotting
library(egg) ## for plotting
library(shinystan)
library(rstanarm)
library(rstan)
library(brms)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
source("source/stan_utility.R")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
hobo <- read.csv("output/clean_gdd_chill_bbanddvr_hobo.csv")
gdd.stan <- read.csv("output/fakedata_hl_urb.csv")
datalist.gdd <- with(gdd.stan,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(gdd.stan),
n_sp = length(unique(gdd.stan$species))
)
)
hl_urb_fake = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 5000, warmup=2000) ###
save(hl_urb_fake, file="~/Documents/git/microclimates/analyses/stan/hl_urban_stan_sims.Rdata")
