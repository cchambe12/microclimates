# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
set.seed(12321)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
nspps <- 20
ninds <- 18
ninds_perprov <- 1 ## This means I want x individuals per species to have the same prov at the Arboretum to make it easier on the model
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- 300  ### mu_a_sp in model output
fstarspeciessd <- 50 ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 2
#### This is where I test our hypothesis. This doesn't come out of the model directly
prov_effect <- 5  ## provenance effect, this is saying that if sites are from 1 degree north, they require 5 fewer GDD
prov_sd <- 0.5 ## prov effect sd
#### Next I set up an fstar or a GDD threshold for each individual
#spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods), ind=rep(1:ninds, nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
table(df.fstar$species, df.fstar$site, df.fstar$method) # emw -- checking
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
#df.fstar$sp_ind <- paste(df.fstar$species, df.fstar$ind, sep="_")
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rep(rnorm(nspps*(ninds/ninds_perprov), provenance.hf, 2),each=ninds_perprov), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.fstar$species <- as.numeric(df.fstar$species)
df.bb <- full_join(df.fstar, df.prov)
df.bb$provenance <- as.numeric(df.bb$provenance)
df.bb$hyp_diff <- ifelse(df.bb$provenance==42.5, 0, (42.5-df.bb$provenance))
df.bb$gdd.noise <- df.bb$hyp_diff * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nsites)
df.bb$gdd <- df.bb$fstarspp + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
##### Clean up the dataframe to prepare for analyses
df.bb <- subset(df.bb, select=c("site", "method", "species", "ind", "gdd.noise", "fstarspp", "gdd", "provenance")) #
bball <- df.bb[!duplicated(df.bb),]
##### Now let's do some checks...
bball$gdd_accuracy <- bball$gdd - bball$fstarspp
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball <- na.omit(bball)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(gridExtra)
library(rstan)
library(shiny)
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball$prov.z <- (bball$provenance-mean(bball$provenance,na.rm=TRUE))/(2*sd(bball$provenance,na.rm=TRUE))
datalist.gdd <- with(bball,
list(y = gdd,
prov = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(species))
)
)
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
install.packages("rstan")
#### Simulations code for Hypothesis B: hobo loggers better capture the actual GDD
# Simple, Noisy method, without microclimates
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
set.seed(12321)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
nspps <- 20
ninds <- 18
ninds_perprov <- 1 ## This means I want x individuals per species to have the same prov at the Arboretum to make it easier on the model
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- 300  ### mu_a_sp in model output
fstarspeciessd <- 50 ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 2
#### This is where I test our hypothesis. This doesn't come out of the model directly
prov_effect <- 5  ## provenance effect, this is saying that if sites are from 1 degree north, they require 5 fewer GDD
prov_sd <- 0.5 ## prov effect sd
#### Next I set up an fstar or a GDD threshold for each individual
#spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods), ind=rep(1:ninds, nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
table(df.fstar$species, df.fstar$site, df.fstar$method) # emw -- checking
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
#df.fstar$sp_ind <- paste(df.fstar$species, df.fstar$ind, sep="_")
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rep(rnorm(nspps*(ninds/ninds_perprov), provenance.hf, 2),each=ninds_perprov), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.fstar$species <- as.numeric(df.fstar$species)
df.bb <- full_join(df.fstar, df.prov)
df.bb$provenance <- as.numeric(df.bb$provenance)
df.bb$hyp_diff <- ifelse(df.bb$provenance==42.5, 0, (42.5-df.bb$provenance))
df.bb$gdd.noise <- df.bb$hyp_diff * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nsites)
df.bb$gdd <- df.bb$fstarspp + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
##### Clean up the dataframe to prepare for analyses
df.bb <- subset(df.bb, select=c("site", "method", "species", "ind", "gdd.noise", "fstarspp", "gdd", "provenance")) #
bball <- df.bb[!duplicated(df.bb),]
##### Now let's do some checks...
bball$gdd_accuracy <- bball$gdd - bball$fstarspp
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball <- na.omit(bball)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(gridExtra)
library(rstan)
library(shiny)
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball$prov.z <- (bball$provenance-mean(bball$provenance,na.rm=TRUE))/(2*sd(bball$provenance,na.rm=TRUE))
datalist.gdd <- with(bball,
list(y = gdd,
prov = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(species))
)
)
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
options(mc.cores = 4)
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball$prov.z <- (bball$provenance-mean(bball$provenance,na.rm=TRUE))/(2*sd(bball$provenance,na.rm=TRUE))
datalist.gdd <- with(bball,
list(y = gdd,
prov = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(species))
)
)
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
library(shinystan)
launchshinystan
provmethod_fake
#### Simulations code for Hypothesis B: hobo loggers better capture the actual GDD
# Simple, Noisy method, without microclimates
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
set.seed(12321)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
nspps <- 20
ninds <- 10
ninds_perprov <- 1 ## This means I want x individuals per species to have the same prov at the Arboretum to make it easier on the model
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- 300  ### mu_a_sp in model output
fstarspeciessd <- 50 ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 2
#### This is where I test our hypothesis. This doesn't come out of the model directly
prov_effect <- 15  ## provenance effect, this is saying that if sites are from 1 degree north, they require 5 fewer GDD
prov_sd <- 5 ## prov effect sd
#### Next I set up an fstar or a GDD threshold for each individual
#spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods), ind=rep(1:ninds, nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
table(df.fstar$species, df.fstar$site, df.fstar$method) # emw -- checking
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
#df.fstar$sp_ind <- paste(df.fstar$species, df.fstar$ind, sep="_")
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rep(rnorm(nspps*(ninds/ninds_perprov), provenance.hf, 2),each=ninds_perprov), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.fstar$species <- as.numeric(df.fstar$species)
df.bb <- full_join(df.fstar, df.prov)
df.bb$provenance <- as.numeric(df.bb$provenance)
df.bb$hyp_diff <- ifelse(df.bb$provenance==42.5, 0, (42.5-df.bb$provenance))
df.bb$gdd.noise <- df.bb$hyp_diff * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nsites)
df.bb$gdd <- df.bb$fstarspp + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
##### Clean up the dataframe to prepare for analyses
df.bb <- subset(df.bb, select=c("site", "method", "species", "ind", "gdd.noise", "fstarspp", "gdd", "provenance")) #
bball <- df.bb[!duplicated(df.bb),]
##### Now let's do some checks...
bball$gdd_accuracy <- bball$gdd - bball$fstarspp
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball <- na.omit(bball)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(gridExtra)
library(rstan)
library(shiny)
bball$type <- ifelse(bball$method=="ws", 1, 0)
bball$prov.z <- (bball$provenance-mean(bball$provenance,na.rm=TRUE))/(2*sd(bball$provenance,na.rm=TRUE))
datalist.gdd <- with(bball,
list(y = gdd,
prov = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(species))
)
)
provmethod_fake = stan('~/Documents/git/microclimates/analyses/stan/provmethod_normal_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, control=list(adapt_delta=0.99, max_treedepth=15)) ###
shiny::runApp('Documents/git/microapp')
runApp("~/Documents/git/microapp/")
shiny::runApp("~/Documents/git/microapp/")
runApp('Documents/git/microapp')
warmfunc(300, 50, 10)
gdd.warm <- get.warmsims()[[1]]
get.warmsims <- warmfunc(300, 50, 10)
gdd.warm <- get.warmsims()[[1]]
gdd.warm <- get.warmsims[[1]]
gdd.warm
ggplot(gdd.warm, aes(as.numeric(warming), abs(gdd_accuracy), col=fstarspp, group=fstarspp)) +
geom_line(stat='smooth', method = "loess", alpha=1, aes(col=fstarspp)) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.text.align = 0,
legend.key = element_rect(colour = "transparent", fill = "white"),
plot.margin = margin(0.5, 0.5, 0.5, 1, "cm")) +
xlab("Amount of warming (°C)") + ylab("GDD accuracy") +
scale_x_continuous(breaks = sort(c(seq(0, 10, by=1)))) +
scale_color_viridis_c("Species GDD Threshold")
runApp('Documents/git/microapp')
get.warmsims <- warmfunc(300, 50, 10)
gdd.warm <- get.warmsims[[1]]
View(gdd.warm)
ggplot(gdd.warm, aes(as.numeric(warming), abs(gdd_accuracy), col=fstarspp, group=fstarspp)) +
geom_line(stat='smooth', method = "loess", alpha=1, aes(col=fstarspp)) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.text.align = 0,
legend.key = element_rect(colour = "transparent", fill = "white"),
plot.margin = margin(0.5, 0.5, 0.5, 1, "cm")) +
xlab("Amount of warming (°C)") + ylab("GDD accuracy") +
scale_x_continuous(breaks = sort(c(seq(0, 10, by=1)))) +
scale_color_viridis_c("Species GDD Threshold")
View(get.warmsims)
runApp('Documents/git/microapp')
runApp('Documents/git/microapp')
runApp('Documents/git/microapp')
runApp('Documents/git/microapp')
runApp('Documents/git/microapp')
runApp('Documents/git/microapp')
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)library(viridis)
#Load Libraries
library(ggplot2)
library(gridExtra)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
#Load Libraries
library(viridis)
library(ggplot2)
library(gridExtra)
source("~/Documents/git/microapp/sims_warm_sourcedata.R")
source("~/Documents/git/microclimates/analyses/source/sims_warm_sourcedata.R")
gdd.warm <- get.warmsims[[1]]
gdd.warm <- warmfunc(300, 50, 10)
ggplot(gdd.warm, aes(as.numeric(warming), abs(gdd_accuracy), col=fstarspp, group=fstarspp)) +
geom_line(stat='smooth', method = "loess", alpha=1, aes(col=fstarspp)) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.text.align = 0,
legend.key = element_rect(colour = "transparent", fill = "white"),
plot.margin = margin(0.5, 0.5, 0.5, 1, "cm")) +
xlab("Amount of warming (°C)") + ylab("GDD accuracy") +
scale_x_continuous(breaks = sort(c(seq(0, 10, by=1)))) +
scale_color_viridis_c("Species GDD Threshold")
gdd.warm <- warmfunc(300, 50, 10)[[1]]
ggplot(gdd.warm, aes(as.numeric(warming), abs(gdd_accuracy), col=fstarspp, group=fstarspp)) +
geom_line(stat='smooth', method = "loess", alpha=1, aes(col=fstarspp)) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.text.align = 0,
legend.key = element_rect(colour = "transparent", fill = "white"),
plot.margin = margin(0.5, 0.5, 0.5, 1, "cm")) +
xlab("Amount of warming (°C)") + ylab("GDD accuracy") +
scale_x_continuous(breaks = sort(c(seq(0, 10, by=1)))) +
scale_color_viridis_c("Species GDD Threshold")
warmfunc(300, 50, 10)
View(gdd.warm)
gdd.warm <- warmfunc(300, 50, 10)
View(gdd.warm)
View(gdd.warm)
source("~/Documents/git/microclimates/analyses/source/sims_warm_sourcedata.R")
gdd.warm <- warmfunc(300, 50, 10)
gdd.warm <- warmfunc(300, 50, 10)[[1]]
ggplot(gdd.warm, aes(as.numeric(warming), abs(gdd_accuracy), col=fstarspp, group=fstarspp)) +
geom_line(stat='smooth', method = "loess", alpha=1, aes(col=fstarspp)) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.text.align = 0,
legend.key = element_rect(colour = "transparent", fill = "white"),
plot.margin = margin(0.5, 0.5, 0.5, 1, "cm")) +
xlab("Amount of warming (°C)") + ylab("GDD accuracy") +
scale_x_continuous(breaks = sort(c(seq(0, 10, by=1)))) +
scale_color_viridis_c("Species GDD Threshold")
quartz()
ggplot(gdd.warm, aes(as.numeric(warming), abs(gdd_accuracy), col=fstarspp, group=fstarspp)) +
geom_line(stat='smooth', method = "loess", alpha=1, aes(col=fstarspp)) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.text.align = 0,
legend.key = element_rect(colour = "transparent", fill = "white"),
plot.margin = margin(0.5, 0.5, 0.5, 1, "cm")) +
xlab("Amount of warming (°C)") + ylab("GDD accuracy") +
scale_x_continuous(breaks = sort(c(seq(0, 10, by=1)))) +
scale_color_viridis_c("Species GDD Threshold")
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(gridExtra)
library(rstan)
setwd("~/Documents/git/microclimates/analyses/")
source("source/sims_hypoth_sourcedata.R")
source("source/sims_params_sourcedata.R")
source("source/sims_warm_sourcedata.R")
df <- read.csv("output/cleanmicro_gdd_2019.csv")
simsdat <- bbfunc("hobo", "ws", 0, 10, 300, 50, 11, 4, 1, 0, 9, 2, -1, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
plot(as.numeric(as.factor(bball$type)), as.numeric(bball$gdd_accuracy),
col=cols[as.factor(bball$method)], ylab="GDD accuracy", xaxt="none",xlab="")
axis(side=1, at=xtext, labels = c("Hobo Logger", "Weather Station"))
bball <- simsdat[[1]]
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
plot(as.numeric(as.factor(bball$type)), as.numeric(bball$gdd_accuracy),
col=cols[as.factor(bball$method)], ylab="GDD accuracy", xaxt="none",xlab="")
axis(side=1, at=xtext, labels = c("Hobo Logger", "Weather Station"))
legend(0, -20, sort(unique(gsub("_", " ", bball$method))), pch=19,
col=cols[as.factor(bball$method)],
cex=1, bty="n")
pdf("figures/gddaccuracy_noisyws.pdf", width=4, height=3)
plot(as.numeric(as.factor(bball$type)), as.numeric(bball$gdd_accuracy),
col=cols[as.factor(bball$method)], ylab="GDD accuracy", xaxt="none",xlab="")
axis(side=1, at=xtext, labels = c("Hobo Logger", "Weather Station"))
legend(0, -20, sort(unique(gsub("_", " ", bball$method))), pch=19,
col=cols[as.factor(bball$method)],
cex=1, bty="n")
dev.off()
pdf("figures/gddaccuracy_noisyws.pdf", width=5, height=4)
plot(as.numeric(as.factor(bball$type)), as.numeric(bball$gdd_accuracy),
col=cols[as.factor(bball$method)], ylab="GDD accuracy", xaxt="none",xlab="")
axis(side=1, at=xtext, labels = c("Hobo Logger", "Weather Station"))
legend(0, -20, sort(unique(gsub("_", " ", bball$method))), pch=19,
col=cols[as.factor(bball$method)],
cex=1, bty="n")
dev.off()
pdf("figures/gddaccuracy_noisyws.pdf", width=5, height=4)
plot(as.numeric(as.factor(bball$type)), as.numeric(bball$gdd_accuracy),
col=cols[as.factor(bball$method)], ylab="GDD accuracy", xaxt="none",xlab="")
axis(side=1, at=xtext, labels = c("Hobo Logger", "Weather \nStation"))
legend(0, -20, sort(unique(gsub("_", " ", bball$method))), pch=19,
col=cols[as.factor(bball$method)],
cex=1, bty="n")
dev.off()
pdf("figures/gddaccuracy_noisyws.pdf", width=5, height=4)
plot(as.numeric(as.factor(bball$type)), as.numeric(bball$gdd_accuracy),
col=cols[as.factor(bball$method)], ylab="GDD accuracy", xaxt="none",xlab="")
axis(side=1, at=xtext, labels = c("Hobo Logger", "\nWeather \nStation"))
legend(0, -20, sort(unique(gsub("_", " ", bball$method))), pch=19,
col=cols[as.factor(bball$method)],
cex=1, bty="n")
dev.off()
pdf("figures/gddaccuracy_noisyws.pdf", width=6, height=4)
plot(as.numeric(as.factor(bball$type)), as.numeric(bball$gdd_accuracy),
col=cols[as.factor(bball$method)], ylab="GDD accuracy", xaxt="none",xlab="")
axis(side=1, at=xtext, labels = c("Hobo Logger", "Weather Station"))
legend(0, -20, sort(unique(gsub("_", " ", bball$method))), pch=19,
col=cols[as.factor(bball$method)],
cex=1, bty="n")
dev.off()
pdf("figures/gddaccuracy_noisyws_sites.pdf", width=6, height=4)
plot(as.numeric(as.factor(bball$site)), as.numeric(bball$gdd_accuracy),
col=cols[as.factor(bball$site)], xlab="", ylab="GDD accuracy", xaxt="none")
axis(side=1, at=xtext, labels = c("Arnold Arboretum", "Harvard Forest"))
legend(0, -20, sort(unique(gsub("_", " ", bball$site))), pch=19,
col=cols[as.factor(bball$site)],
cex=1, bty="n")
dev.off()
pdf("figures/gddsites_noisyws.pdf", width=6, height=4)
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(20)
my.pch <- c(15:16)
plot(as.numeric(bball$gdd) ~ as.numeric(as.factor(bball$species)), col=my.pal[as.factor(bball$species)],
pch=my.pch[as.factor(bball$site)], data = bball[(bball$method=="ws"),], main="Weather Station",
ylab="GDD", ylim=c(0, 600), xlab="Species")
abline(h=mean(bball$gdd[bball$method=="ws"]), lwd=3)
plot(as.numeric(gdd) ~ as.numeric(as.factor(species)), col=my.pal[as.factor(bball$species)],
pch=my.pch[as.factor(bball$site)], data = bball[(bball$method=="hobo"),], main="Hobo Logger",
ylab="GDD", ylim=c(0, 600), xlab="Species")
abline(h=mean(bball$gdd[bball$method=="hobo"]), lwd=3)
dev.off()
pdf("figures/gddsites_noisyws.pdf", width=7, height=4)
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(20)
my.pch <- c(15:16)
plot(as.numeric(bball$gdd) ~ as.numeric(as.factor(bball$species)), col=my.pal[as.factor(bball$species)],
pch=my.pch[as.factor(bball$site)], data = bball[(bball$method=="ws"),], main="Weather Station",
ylab="GDD", ylim=c(0, 600), xlab="Species")
abline(h=mean(bball$gdd[bball$method=="ws"]), lwd=3)
plot(as.numeric(gdd) ~ as.numeric(as.factor(species)), col=my.pal[as.factor(bball$species)],
pch=my.pch[as.factor(bball$site)], data = bball[(bball$method=="hobo"),], main="Hobo Logger",
ylab="GDD", ylim=c(0, 600), xlab="Species")
abline(h=mean(bball$gdd[bball$method=="hobo"]), lwd=3)
dev.off()
pdf("figures/gddsites_noisyws.pdf", width=8, height=4)
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(20)
my.pch <- c(15:16)
plot(as.numeric(bball$gdd) ~ as.numeric(as.factor(bball$species)), col=my.pal[as.factor(bball$species)],
pch=my.pch[as.factor(bball$site)], data = bball[(bball$method=="ws"),], main="Weather Station",
ylab="GDD", ylim=c(0, 600), xlab="Species")
abline(h=mean(bball$gdd[bball$method=="ws"]), lwd=3)
plot(as.numeric(gdd) ~ as.numeric(as.factor(species)), col=my.pal[as.factor(bball$species)],
pch=my.pch[as.factor(bball$site)], data = bball[(bball$method=="hobo"),], main="Hobo Logger",
ylab="GDD", ylim=c(0, 600), xlab="Species")
abline(h=mean(bball$gdd[bball$method=="hobo"]), lwd=3)
dev.off()
pdf("figures/gddsites_noisyws.pdf", width=8, height=4)
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(20)
my.pch <- c(15:16)
plot(as.numeric(bball$gdd) ~ as.numeric(as.factor(bball$species)), col=my.pal[as.factor(bball$species)],
pch=my.pch[as.factor(bball$site)], data = bball[(bball$method=="ws"),], main="Weather Station",
ylab="GDD", ylim=c(0, 600), xlab="Species")
abline(h=mean(bball$gdd[bball$method=="ws"]), lwd=3)
plot(as.numeric(gdd) ~ as.numeric(as.factor(species)), col=my.pal[as.factor(bball$species)],
pch=my.pch[as.factor(bball$site)], data = bball[(bball$method=="hobo"),], main="Hobo Logger",
ylab="GDD", ylim=c(0, 600), xlab="Species")
abline(h=mean(bball$gdd[bball$method=="hobo"]), lwd=3)
legend(20, 0, sort(unique(gsub("_", " ", bball$site))), pch=19,
col=cols[as.factor(bball$site)],
cex=1, bty="n")
dev.off()
bball.site$methodtype <- ifelse(bball.site$method=="ws", "\nWeather \nStation", "\nHobo \nLogger")
cols <- viridis_pal(option="plasma")(3)
bball$methodtype <- ifelse(bball$method=="ws", "\nWeather \nStation", "\nHobo \nLogger")
cols <- viridis_pal(option="plasma")(3)
gddcomparebb <- ggplot(bball, aes(x=methodtype, y=gdd, group=as.factor(site), fill=as.factor(site))) +
geom_ribbon(stat='smooth', method = "lm", se=TRUE, alpha=1,
aes(fill = as.factor(site), group = as.factor(site))) +
geom_line(stat='smooth', method = "lm", alpha=1, col="black") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.text.align = 0,
legend.key = element_rect(colour = "transparent", fill = "white"),
plot.margin = margin(0.5, 0.5, 0.5, 1, "cm")) +
xlab("") +
ylab("Growing degree days to budburst") +
scale_fill_manual(name="Site", values=cols,
labels=c("Arnold Arboretum", "Harvard Forest")) +
coord_cartesian(expand=0, ylim=c(0,700))
pdf("figures/gdd_interaction.pdf", width=8, height=4)
gddcomparebb
dev.off()
pdf("figures/gdd_interaction_noisyws.pdf", width=8, height=4)
gddcomparebb
dev.off()
