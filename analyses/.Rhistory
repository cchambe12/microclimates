for(spsi in 1:spnum){
pos.sps.i<-which(grepl(paste0("[",spsi,"]"),rownames(noncps),fixed=TRUE))[c(2:4)]
jitt<-(spsi/40) + 0.08
pos.y.sps.i<-pos.y-jitt
pos.x.sps.i<-noncps[pos.sps.i[i],"mean"]
lines(noncps[pos.sps.i[i],c("2.5%","97.5%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere-0.2))
lines(noncps[pos.sps.i[i],c("25%","75%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere))
points(pos.x.sps.i,pos.y.sps.i,cex=0.8, pch=my.pch[spsi], col=alpha(my.pal[spsi], alphahere))
}
}
par(xpd=TRUE)
dev.off()
save(provmethod_fake, file="~/Documents/git/microclimates/analyses/stan/prov_sims.Rdata")
## 24 March 2020 - Cat
# Setting up model output tables
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(RColorBrewer)
library(rstan)
library(dplyr)
library(broom.mixed)
# Set Working Directory
setwd("~/Documents/git/microclimates/analyses")
## load the model
#load("stan/noisyws_sims.Rdata")
#load("stan/noisyhobo_sims.Rdata")
#load("stan/micros_sims.Rdata")
#load("stan/urban_sims.Rdata")
#load("stan/urbmethod_real.Rdata")
#load("stan/urbmethod_sims.Rdata")
load("stan/provmethod_sims.Rdata")
modname <- "provmethod_fake"
modoutput <- provmethod_fake
fit <- summary(modoutput)$summary
#summary(fit.z)# min n_ef: 1198
tab<-as.data.frame(round(cbind(fit[1:9,1],fit[1:9,5],fit[1:9,7],fit[1:9,4],fit[1:9,8]),digits=2))
tab<-rbind(tab,c(length(fit[grep("a_sp", rownames(fit)),1])-2,"","","","",""))
rownames(tab)[10]<-"n_sp"
colnames(tab)<- c("mean","25%", "75%","2.5%","97.5%")
row.names(tab)<-c("$\\mu_{\\alpha}$","$\\mu_{site}$","$\\mu_{method}$",
"$\\mu_{sitexmethod}$", "$\\sigma_{site}$"
, "$\\sigma_{method}$","$\\sigma_{sitexmethod}$","$\\sigma_{\\alpha}$", "$\\sigma_{y}$","$N_{sp}$")
write.csv(tab, paste0("output/supptables/", modname, ".csv"))
#load("stan/urban_sims.Rdata")
#load("stan/urbmethod_real.Rdata")
#load("stan/urbmethod_sims.Rdata")
load("stan/provmethod_sims.Rdata")
## 24 March 2020 - Cat
# Setting up model output tables
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(RColorBrewer)
library(rstan)
library(dplyr)
library(broom.mixed)
# Set Working Directory
setwd("~/Documents/git/microclimates/analyses")
## load the model
#load("stan/noisyws_sims.Rdata")
#load("stan/noisyhobo_sims.Rdata")
#load("stan/micros_sims.Rdata")
#load("stan/urban_sims.Rdata")
#load("stan/urbmethod_real.Rdata")
#load("stan/urbmethod_sims.Rdata")
load("stan/prov_sims.Rdata")
modname <- "provmethod_fake"
modoutput <- provmethod_fake
fit <- summary(modoutput)$summary
#summary(fit.z)# min n_ef: 1198
tab<-as.data.frame(round(cbind(fit[1:9,1],fit[1:9,5],fit[1:9,7],fit[1:9,4],fit[1:9,8]),digits=2))
tab<-rbind(tab,c(length(fit[grep("a_sp", rownames(fit)),1])-2,"","","","",""))
rownames(tab)[10]<-"n_sp"
colnames(tab)<- c("mean","25%", "75%","2.5%","97.5%")
row.names(tab)<-c("$\\mu_{\\alpha}$","$\\mu_{site}$","$\\mu_{method}$",
"$\\mu_{sitexmethod}$", "$\\sigma_{site}$"
, "$\\sigma_{method}$","$\\sigma_{sitexmethod}$","$\\sigma_{\\alpha}$", "$\\sigma_{y}$","$N_{sp}$")
write.csv(tab, paste0("output/supptables/", modname, ".csv"))
mod.table <- xtable(zmodtable, caption="\\textbf{Estimates from provenance latitude simulations}. Using a model with an urban effect and noisy weather station data simulations and testing the effects of site, method and the interaction between site and method results in XXX. We present posterior means, as well as 50 percent and 95 percent uncertainty intervals from models in which the predictors have been standardized so that they are directly comparable.",
label="tab:urbmethod",align=c(
"|p{0.11\\textwidth}|",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}|"))
mod.table <- xtable(zmodtable, caption="\\textbf{Estimates from provenance latitude simulations}. Using a model with an urban effect and noisy weather station data simulations and testing the effects of site, method and the interaction between site and method results in XXX. We present posterior means, as well as 50 percent and 95 percent uncertainty intervals from models in which the predictors have been standardized so that they are directly comparable.",
label="tab:urbmethod",align=c(
"|p{0.11\\textwidth}|",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}|"))
mod.table <- xtable(zmodtable, caption="\\textbf{Estimates from provenance latitude simulations}. Using a model with an urban effect and noisy weather station data simulations and testing the effects of site, method and the interaction between site and method results in XXX. We present posterior means, as well as 50 percent and 95 percent uncertainty intervals from models in which the predictors have been standardized so that they are directly comparable.",
label="tab:urbmethod",align=c(
"|p{0.11\\textwidth}|",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}|"))
mod.table <- xtable(zmodtable, caption="\\textbf{Estimates from provenance latitude simulations}. Using a model with an urban effect and noisy weather station data simulations and testing the effects of site, method and the interaction between site and method results in XXX. We present posterior means, as well as 50 percent and 95 percent uncertainty intervals from models in which the predictors have been standardized so that they are directly comparable.",
label="tab:urbmethod",align=c(
"|p{0.11\\textwidth}|",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}",
"p{0.06\\textwidth}|"))
source("source/sims_hypoth_interxn_sourcedata.R")
simsdat <- bbfunc("prov", "NA", -10, 2, 300, 20, 10, 3, 0)
source("source/sims_hypoth_sourcedata.R")
simsdat <- bbfunc("prov", "NA", -10, 2, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
ws <- ggplot(clim[(clim$method=="ws"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-20, 40)) +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(clim[(clim$method=="hobo"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(-20, 40)) +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5))
pdf("figures/clim_methods_prov.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
ws <- ggplot(bball[(bball$method=="ws"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(100, 700)) +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
#scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(bball[(bball$method=="hobo"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(100, 700)) +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0))
pdf("figures/gdd_methods_prov.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
use.urban <- "prov"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
provmethod_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 3000, warmup=2500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
hypoth <- "prov"  ## hobo, urban, prov
hypoth.para <- "NA"
hypoth.mu <- -10
hypoth.sd <- 2   ### This just adds that amount of imprecision to the hypothesis question
fstar.num <- 300  ## GDD threshold
fstar.sd <- 20
meantemp <- 10
meantemp.sd <- 3
micro.sd <- 0
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 60 #### just to make sure we don't get any NAs
nspps <- 15
ninds <- 50
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 15  ### Number microsites per site
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- fstar.num  ### mu_a_sp in model output
fstarspeciessd <- fstar.sd ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 15
### Now the climate data
dayz <- rep(1:daysperyr, nobs)
cc.arb <- cc.hf <- meantemp
sigma.arb <- sigma.hf <- meantemp.sd
microarb.effect <- microhf.effect <- 0
microsigmaarb.effect <- microsigmahf.effect <- micro.sd  #### by keeping the sigmas the same for the microsites (line 94 & 99) we assume that the microclimatic effects are the same across sites
#### Next I set up an fstar or a GDD threshold for each individual
spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
df.fstar <- df.fstar[!duplicated(df.fstar),]
#### Here, I set up provenance for each individual
### # Step 2: find GDDs
#### Now I set up climate data for the Arboretum, this is the weather station data
arbclim <- data.frame(microsite=rep(rep(c(1:nmicros), each=daysperyr*nmethods*(ninds/nmicros)),nspps),
ind=rep(rep(c(1:ninds), each=daysperyr*nmethods), nspps),
species = rep(c(1:nspps), each=daysperyr*nmicros*nmethods*ninds),
day=rep(c(1:daysperyr), nmicros*nspps*nmethods),
method=rep(rep(c("ws", "hobo"), each=daysperyr), nspps*ninds),
site = as.character("arb"))
### This is how I get weather station data versus hobo logger data
arbclim$tmean <- ifelse(arbclim$method=="hobo", rnorm(as.numeric(arbclim$day), cc.arb, meantemp.sd + micro.sd),
rnorm(as.numeric(arbclim$day), cc.arb, meantemp.sd))
#### Harvard Forest climate data, weather station data
hfclim <- data.frame(microsite=rep(rep(c(1:nmicros), each=daysperyr*nmethods*(ninds/nmicros)),nspps),
ind=rep(rep(c(1:ninds), each=daysperyr*nmethods), nspps),
species = rep(c(1:nspps), each=daysperyr*nmicros*nmethods*ninds),
day=rep(c(1:daysperyr), nmicros*nspps*nmethods),
method=rep(rep(c("ws", "hobo"), each=daysperyr),nspps*ninds),
site = as.character("hf"))
### Again, where I set up the difference between hobo logger and weather station
hfclim$tmean <- ifelse(hfclim$method=="hobo", rnorm(hfclim$day, cc.hf, meantemp.sd + micro.sd),
rnorm(hfclim$day, cc.hf, meantemp.sd))
##Step 3: Make a data frame and get the mean temp
df <- dplyr::full_join(arbclim, hfclim)
df$tmean <- as.numeric(df$tmean)
df$sp_ind <- paste(df$species, df$ind, sep="_")
### Let's just tidy everything up
df$species <- as.numeric(as.factor(df$species))
df.fstar$species <- as.numeric(as.factor(df.fstar$species))
df <- full_join(df, df.fstar)
df$spind_site_method <- paste0(df$sp_ind, df$site, df$method)
df$nodupes <- paste0(df$sp_ind, df$site, df$method, df$microsite, df$day)
df <- df[!duplicated(df$nodupes),]
### Calculate the OBSERVED GDDs!!!
df$gdd.obs <- ave(df$tmean, df$spind_site_method, FUN=cumsum)
## Find the day of budburst to find the actual GDD versus the "observed GDD"
for(i in c(unique(df$spind_site_method))){ # i="9_10hfhobo2"
bb <- which(df$gdd.obs[i==df$spind_site_method] >= df$fstarspp[i==df$spind_site_method])[1]
df$bb[i==df$spind_site_method] <- bb
}
df.bb <- df[(df$bb==df$day),]
prov_effect = hypoth.mu
prov_sd = hypoth.sd
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rnorm(nspps*ninds, provenance.hf, 2), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.prov$species <- as.numeric(df.prov$species)
df.prov$provenance <- as.numeric(df.prov$provenance)
#df.prov$prov.z <- (df.prov$provenance-mean(df.prov$provenance,na.rm=TRUE))/(sd(df.prov$provenance,na.rm=TRUE))
df.prov$provdiff <- df.prov$provenance-mean(df.prov$provenance)
df.prov <- df.prov[!duplicated(df.prov),]
df.prov$ind <- as.numeric(df.prov$ind)
df.bb <- full_join(df.bb, df.prov)
# Generate random parameters (by species)
df.bb$gdd.noise <- df.bb$provdiff * rep(rnorm(n=ntot, mean=prov_effect, sd=prov_sd), each=ninds*nmethods)
# Generate random parameters (by species)
df.bb$gdd.noise <- df.bb$provdiff * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nmethods)
View(df.bb)
source("source/sims_hypoth_sourcedata.R")
simsdat <- bbfunc("prov", "NA", -10, 2, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
ws <- ggplot(clim[(clim$method=="ws"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-20, 40)) +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(clim[(clim$method=="hobo"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(-20, 40)) +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5))
pdf("figures/clim_methods_prov.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
ws <- ggplot(bball[(bball$method=="ws"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(100, 700)) +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
#scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(bball[(bball$method=="hobo"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(100, 700)) +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0))
pdf("figures/gdd_methods_prov.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
use.urban <- "prov"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
provmethod_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 3000, warmup=2500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
my.pal <-rep(viridis_pal(option="viridis")(9),2)
my.pch <- rep(15:18, each=10)
alphahere = 0.4
modoutput <- summary(provmethod_fake)$summary
noncps <- modoutput[!grepl("_ncp", rownames(modoutput)),]
labs <- if(use.urban=="urban"){c("Site", "Method", "Site x Method",
"Sigma Site", "Sigma Method",
"Sigma Interaction")}else if(use.urban=="prov"){
c("Provenance", "Method", "Provenance x\nMethod",
"Sigma Provenance", "Sigma \nMethod",
"Sigma Interaction")}
modelhere <- provmethod_fake
spnum <- length(unique(bball$species))
pdf("figures/muplot_prov.pdf", width=7, height=4)
par(xpd=FALSE)
par(mar=c(5,10,3,10))
plot(x=NULL,y=NULL, xlim=c(-30,30), yaxt='n', ylim=c(0,6),
xlab="Model estimate change in growing degree days to budburst", ylab="")
axis(2, at=1:6, labels=rev(labs), las=1)
abline(v=0, lty=2, col="darkgrey")
rownameshere <- c("mu_b_urban_sp", "mu_b_method_sp", "mu_b_um_sp", "sigma_b_urban_sp",
"sigma_b_method_sp", "sigma_b_um_sp")
for(i in 1:6){ #i=6
pos.y<-(6:1)[i]
pos.x<-noncps[rownameshere[i],"mean"]
lines(noncps[rownameshere[i],c("2.5%","97.5%")],rep(pos.y,2),col="lightgrey")
lines(noncps[rownameshere[i],c("25%","75%")],rep(pos.y,2),col="darkgrey")
points(pos.x,pos.y,cex=1.5,pch=19,col="darkblue")
for(spsi in 1:spnum){
pos.sps.i<-which(grepl(paste0("[",spsi,"]"),rownames(noncps),fixed=TRUE))[c(2:4)]
jitt<-(spsi/40) + 0.08
pos.y.sps.i<-pos.y-jitt
pos.x.sps.i<-noncps[pos.sps.i[i],"mean"]
lines(noncps[pos.sps.i[i],c("2.5%","97.5%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere-0.2))
lines(noncps[pos.sps.i[i],c("25%","75%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere))
points(pos.x.sps.i,pos.y.sps.i,cex=0.8, pch=my.pch[spsi], col=alpha(my.pal[spsi], alphahere))
}
}
par(xpd=TRUE)
dev.off()
save(provmethod_fake, file="~/Documents/git/microclimates/analyses/stan/prov_sims.Rdata")
provmethod_fake
View(bball)
source('source/sims_hypoth_sourcedata.R')
simsdat <- bbfunc("prov", "NA", -10, 2, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
ws <- ggplot(clim[(clim$method=="ws"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-20, 40)) +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(clim[(clim$method=="hobo"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(-20, 40)) +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5))
pdf("figures/clim_methods_prov.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
ws <- ggplot(bball[(bball$method=="ws"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(100, 700)) +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
#scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(bball[(bball$method=="hobo"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(100, 700)) +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0))
pdf("figures/gdd_methods_prov.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
use.urban <- "prov"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
provmethod_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 3000, warmup=2500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
provmethod_fake
source("source/sims_hypoth_sourcedata.R")
simsdat <- bbfunc("prov", "NA", -10, 2, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
ws <- ggplot(clim[(clim$method=="ws"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-20, 40)) +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(clim[(clim$method=="hobo"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(-20, 40)) +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5))
pdf("figures/clim_methods_prov.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
ws <- ggplot(bball[(bball$method=="ws"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(100, 700)) +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
#scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(bball[(bball$method=="hobo"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(100, 700)) +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0))
pdf("figures/gdd_methods_prov.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
use.urban <- "prov"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = provenance,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
View(bball)
provmethod_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 3000, warmup=2500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
provmethod_fake
