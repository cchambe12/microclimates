cc.arb <- 11 ## based off weather station data
mean.microarb <- 2
sigma.arb <- 8
sigma.microarb <- 1
cc.hf <- 9  ## based off weather station data
mean.microhf <- 2
sigma.hf <- 8
sigma.microhf <- 1
provenance.arb <- round(rnorm(nobs, 42.5, 10), digits=2)
provenance.hf <- 42.5
fstar <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites), inds=1:ninds, fstar=rep(fstar, each=ninds*nsites),
site=rep(c("arb", "hf"), each=ninds)))
df.fstar$fstar <- as.numeric(df.fstar$fstar)
df.fstar$sp_ind <- paste(df.fstar$species, df.fstar$inds, sep="_")
df.fstar$provenance <- ifelse(df.fstar$site=="hf", provenance.hf, provenance.arb)
df.fstar$prov.adj <- ifelse(df.fstar$provenance!=provenance.hf, df.fstar$provenance-provenance.hf, 0)
View(df.fstar)
df.fstar$fstar.new <- round(ifelse(df.fstar$site=="hf", rnorm(df.fstar$inds, df.fstar$fstar, fstarindsd),
rnorm(df.fstar$inds, df.fstar$fstar+(df.fstar$prov.adju*proveffect), fstarindsd)), digits=0)
df.fstar$fstar.new <- round(ifelse(df.fstar$site=="hf", rnorm(df.fstar$inds, df.fstar$fstar, fstarindsd),
rnorm(df.fstar$inds, df.fstar$fstar+(df.fstar$prov.adj*proveffect), fstarindsd)), digits=0)
View(df.fstar)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Questions to address:
# GDDlo ~ urban + (urban|species)
## Let's start with Question 1 first...
#library(rethinking)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(rstan)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 292
sd(ws$gdd_bb, na.rm = TRUE) ## 116
use.urban = FALSE
use.provenance = TRUE
if(use.urban == TRUE & use.provenance == TRUE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
if(use.urban == FALSE & use.provenance == FALSE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 200 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
if(use.urban==TRUE){
urbeffect <- -75
#urbsd <- 20 ### only used when using provenance
}
if(use.provenance==TRUE){
proveffect <- -10
}
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 2
sigma.arb <- 8
sigma.microarb <- 1
cc.hf <- 9  ## based off weather station data
mean.microhf <- 2
sigma.hf <- 8
sigma.microhf <- 1
source("simulations/micro_databuildfx.R") ### warning messages are okay - outdated package warning but still works
cols <-viridis_pal(option="viridis")(3)
## Just a quick check on GDDs
quartz()
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
### Okay, first let's check on site level varition in temperature
#### Before moving on, let's look at the data a bit
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-25, 42))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-25, 42))
quartz()
grid.arrange(ws, hl, ncol=2)
### Now let's look at GDD differences between methods
quartz()
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(12)
my.pch <- c(15:16)
plot(bbws.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Weather Station",
ylab="GDD")
abline(h=mean(bball$bbws.gdd), lwd=3)
plot(bbhl.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Hobo Logger",
ylab="GDD")
abline(h=mean(bball$bbhl.gdd), lwd=3)
modtest <- lmer(bbws.gdd ~ provenance + (provenance|species), data=bball)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Questions to address:
# GDDlo ~ urban + (urban|species)
## Let's start with Question 1 first...
#library(rethinking)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(rstan)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 292
sd(ws$gdd_bb, na.rm = TRUE) ## 116
use.urban = FALSE
use.provenance = TRUE
if(use.urban == TRUE & use.provenance == TRUE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
if(use.urban == FALSE & use.provenance == FALSE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 200 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
if(use.urban==TRUE){
urbeffect <- -75
#urbsd <- 20 ### only used when using provenance
}
if(use.provenance==TRUE){
proveffect <- -10
}
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 2
sigma.arb <- 8
sigma.microarb <- 1
cc.hf <- 9  ## based off weather station data
mean.microhf <- 2
sigma.hf <- 8
sigma.microhf <- 1
source("simulations/micro_databuildfx.R") ### warning messages are okay - outdated package warning but still works
cols <-viridis_pal(option="viridis")(3)
## Just a quick check on GDDs
quartz()
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
### Okay, first let's check on site level varition in temperature
#### Before moving on, let's look at the data a bit
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-25, 42))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-25, 42))
quartz()
grid.arrange(ws, hl, ncol=2)
### Now let's look at GDD differences between methods
quartz()
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(12)
my.pch <- c(15:16)
plot(bbws.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Weather Station",
ylab="GDD")
abline(h=mean(bball$bbws.gdd), lwd=3)
plot(bbhl.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Hobo Logger",
ylab="GDD")
abline(h=mean(bball$bbhl.gdd), lwd=3)
### Next, we can take a quick glimpse at results
if(use.urban==TRUE){
bball$urban <- ifelse(bball$site=="arb", 1, 0)
modtest <- lmer(bbws.gdd ~ urban + (urban|species), data=bball)
arm::display(modtest)
modtest.hl <- lmer(bbhl.gdd ~ urban + (urban|species), data=bball)
arm::display(modtest.hl)
}
modtest <- lmer(bbws.gdd ~ provenance + (provenance|species), data=bball)
View(bball)
str(bball)
bball$provenance <- as.numeric(bball$provenance)
modtest <- lmer(bbws.gdd ~ provenance + (provenance|species), data=bball)
arm::display(modtest)
modtest.hl <- lmer(bbhl.gdd ~ provenance + (provenance|species), data=bball)
arm::display(modtest.hl)
bball$provenance <- as.numeric(bball$provenance)
datalist.gdd <- with(bball,
list(y = bbws.gdd,
tx = provenance,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
ws_prov_buildfake = stan('stan/provmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 4000, warmup=2000, control=list(adapt_delta = 0.99)) ###
datalist.gdd <- with(bball,
list(y = bbws.gdd,
prov = provenance,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
ws_prov_buildfake = stan('stan/provmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 4000, warmup=2000, control=list(adapt_delta = 0.99)) ###
datalist.gdd <- with(bball,
list(y = bbhl.gdd,
prov = provenance,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
hl_prov_buildfake = stan('stan/provmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 4000, warmup=2000, control=list(adapt_delta = 0.99)) ###
### Compare side by side
ws_prov_fake.sum[grep("mu_", rownames(ws_prov_fake.sum)),]
ws_prov_fake.sum <- summary(ws_prov_buildfake)$summary
hl_prov_fake.sum <- summary(hl_prov_buildfake)$summary
### Compare side by side
ws_prov_fake.sum[grep("mu_", rownames(ws_prov_fake.sum)),]
hl_prov_fake.sum[grep("mu_", rownames(hl_prov_fake.sum)),]
ws_prov_fake.sum[grep("sigma_", rownames(ws_prov_fake.sum)),]
hl_prov_fake.sum[grep("sigma_", rownames(hl_prov_fake.sum)),]
colnames(df)
df <- read.csv("~/Downloads/2018 branch_chamber by chamberNum.csv")
colnames(df)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Load libraries
library(lme4)
library(arm)
df <- read.csv("~/Downloads/2018 branch_chamber by chamberNum.csv")
colnames(df)
df$tx <- ifelse(df$ChaNum%in%c(1:7), 1, 0)
mod <- lmer(resp ~ tx*Hour + (tx*Hour|ChaNum), data=df)
df$resp <- df$Photo..umol.m.2.s.1. - df$Trans..mmol.m.2.s.1. ### This is just to look at gas exchange but feel free to change the response to VPD, temp or radiation as you see fit
mod <- lmer(resp ~ tx*Hour + (tx*Hour|ChaNum), data=df)
display(mod)
class(df$resp)
range(df$resp)
range(df$resp, na.rm=TRUE)
anova(mod)
aov(mod)
Anova(mod)
display(anova(mod))
library(car)
install.packages("car")
library(car)
display(Anova(mod))
Anova(mod)
mod <- lmer(ps ~ tx*Hour + (tx*Hour|ChaNum), data=df)
df$ps <- df$Photo..umol.m.2.s.1. ### This is just to look at photosynthesis for now but feel free to change the response to VPD, temp or radiation as you see fit
mod <- lmer(ps ~ tx*Hour + (tx*Hour|ChaNum), data=df)
Anova(mod)
mod <- lmer(ps ~ tx + (tx|ChaNum), data=df) ## keep it simple for now, but you could add a TIME identifier here too, like HOUR
Anova(mod)
df$id <- as.character(df$ChaNum) ## This is important to change, this way the model knows these are unique identifiers and not just a continuous variable
mod <- lmer(ps ~ tx + (tx|id), data=df) ## keep it simple for now, but you could add a TIME identifier here too, like HOUR
Anova(mod)
head(df)
mod <- lmer(ps ~ tx*Minute + (tx*Minute|id), data=df) ## keep it simple for now, but you could add a TIME identifier here too, like HOUR
Anova(mod)
df$ps_hour <- ave(df$ps, df$Year, df$Month, df$Day, df$Hour, df$ChaNum) ## This is just finding the average assimilation for each unique individual for each hour
mod <- lmer(ps ~ tx*ps_hour + (tx*ps_hour|id), data=df)
Anova(mod)
######## You could also try something like this...
anovamod = Anova(ps ~ tx*ps_hour + Error(id), df)
######## You could also try something like this...
anovamod = Anova(ps ~ tx*ps_hour + error(id), df)
######## You could also try something like this...
anovamod = aov(ps ~ tx*ps_hour + Error(id), df)
df.sub <- subset(df, select=c(ps_hour, tx, id))
df.sub <- df.sub[!duplicated(df.sub),]
mod <- lmer(ps ~ tx*ps_hour + (tx*ps_hour|id), data=df.sub)
df$ps_hour <- ave(df$ps, df$Year, df$Month, df$Day, df$Hour, df$ChaNum) ## This is just finding the average assimilation for each unique individual for each hour
df.sub <- subset(df, select=c(ps_hour, tx, id, Hour)) ## making the dataframe smaller
df.sub <- df.sub[!duplicated(df.sub),] ## and removing duplicates
mod <- lmer(ps_hour ~ tx*Hour + (tx*Hour|id), data=df.sub)
Anova(mod)
Anova(mod, type="III")
Anova(mod)
######## You could also try something like this...
anovamod = aov(ps_hour ~ tx*Hour + Error(id), df.sub)
summary(anovaModelRM)
summary(anovamod)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
## Let's start with Question 1 first...
#library(rethinking)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(rstan)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 292
sd(ws$gdd_bb, na.rm = TRUE) ## 116
use.urban = TRUE
use.provenance = FALSE
if(use.urban == TRUE & use.provenance == TRUE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
if(use.urban == FALSE & use.provenance == FALSE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 200 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
if(use.urban==TRUE){
urbeffect <- -75
#urbsd <- 20 ### only used when using provenance
}
if(use.provenance==TRUE){
proveffect <- -10
}
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 5
sigma.arb <- 8
sigma.microarb <- 4
cc.hf <- 9  ## based off weather station data
mean.microhf <- 5
sigma.hf <- 8
sigma.microhf <- 4
use.urban = TRUE
use.provenance = FALSE
if(use.urban == TRUE & use.provenance == TRUE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
if(use.urban == FALSE & use.provenance == FALSE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 200 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
if(use.urban==TRUE){
urbeffect <- -75
#urbsd <- 20 ### only used when using provenance
}
if(use.provenance==TRUE){
proveffect <- -10
}
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 5
sigma.arb <- 8
sigma.microarb <- 4
cc.hf <- 9  ## based off weather station data
mean.microhf <- 5
sigma.hf <- 8
sigma.microhf <- 4
source("simulations/micro_databuildfx.R") ### warning messages are okay - outdated package warning but still works
cols <-viridis_pal(option="viridis")(3)
## Just a quick check on GDDs
quartz()
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
### Okay, first let's check on site level varition in temperature
#### Before moving on, let's look at the data a bit
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-25, 42))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-25, 42))
quartz()
grid.arrange(ws, hl, ncol=2)
### Now let's look at GDD differences between methods
quartz()
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(12)
my.pch <- c(15:16)
plot(bbws.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Weather Station",
ylab="GDD")
abline(h=mean(bball$bbws.gdd), lwd=3)
plot(bbhl.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Hobo Logger",
ylab="GDD")
abline(h=mean(bball$bbhl.gdd), lwd=3)
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Questions to address:
# GDDlo ~ urban + (urban|species)
## Let's start with Question 1 first...
#library(rethinking)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(rstan)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 292
sd(ws$gdd_bb, na.rm = TRUE) ## 116
use.urban = TRUE
use.provenance = FALSE
if(use.urban == TRUE & use.provenance == TRUE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
if(use.urban == FALSE & use.provenance == FALSE){
print("Error has occurred. Can't have both urban and provenance equal TRUE!")
}
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 250 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
if(use.urban==TRUE){
urbeffect <- -75
#urbsd <- 20 ### only used when using provenance
}
if(use.provenance==TRUE){
proveffect <- -10
}
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 5
sigma.arb <- 8
sigma.microarb <- 4
cc.hf <- 9  ## based off weather station data
mean.microhf <- 5
sigma.hf <- 8
sigma.microhf <- 4
source("simulations/micro_databuildfx.R") ### warning messages are okay - outdated package warning but still works
cols <-viridis_pal(option="viridis")(3)
## Just a quick check on GDDs
quartz()
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
### Okay, first let's check on site level varition in temperature
#### Before moving on, let's look at the data a bit
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-25, 42))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-25, 42))
quartz()
grid.arrange(ws, hl, ncol=2)
### Now let's look at GDD differences between methods
quartz()
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(12)
my.pch <- c(15:16)
plot(bbws.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Weather Station",
ylab="GDD")
abline(h=mean(bball$bbws.gdd), lwd=3)
plot(bbhl.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Hobo Logger",
ylab="GDD")
abline(h=mean(bball$bbhl.gdd), lwd=3)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# Load libraries
library(lme4)
library(arm)
library(car)
df <- read.csv("~/Downloads/2018 branch_chamber by chamberNum.csv")
colnames(df)
df$tx <- ifelse(df$ChaNum%in%c(1:7), 1, 0) ### Here, I am making a new column that says chambers 1-7 are the treatment and 8-16 are control
df$id <- as.character(df$ChaNum) ## This is important to change, this way the model knows these are unique identifiers and not just a continuous variable
df$ps <- df$Photo..umol.m.2.s.1. ### This is just to look at photosynthesis for now but feel free to change the response to VPD, temp or radiation as you see fit
df$ps_hour <- ave(df$ps, df$Year, df$Month, df$Day, df$Hour, df$ChaNum) ## This is just finding the average assimilation for each unique individual for each hour
df.sub <- subset(df, select=c(ps_hour, tx, id, Hour)) ## making the dataframe smaller
df.sub <- df.sub[!duplicated(df.sub),] ## and removing duplicates
df <- within(df, { ps_hour_test <- ave(df$ps, df$Year, df$Month, df$Day, df$Hour, df$ChaNum, FUN=function(x) mean(x), 0)})
df.sub <- subset(df, select=c(ps_hour, ps_hour_test, tx, id, Hour)) ## making the dataframe smaller
View(df.sub)
