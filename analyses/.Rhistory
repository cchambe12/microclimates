# Generate random parameters (by species)
for(i in 1:length(random.regex)){
parameters.temp[, i] <- sapply(1:nsp, FUN = function(x){
rep(rnorm(n = 1, mean = model.parameters[[random.regex[i]]], sd = 50), ntot)})}
# Calculate response
response <- sapply(1:nrow(env.samples), FUN = function(x){
rnorm(n = 1, mean = mm[x, ] %*% parameters.temp[x, ], sd = 20)})
fakedata_ws_urb <- cbind(data.frame(species = as.vector(sapply(1:nsp, FUN = function(x) rep(x, ntot))),
gdd = response, urban = env.samples[,1]))
write.csv(fakedata_ws_urb, file="output/fakedata_ws_urb.csv", row.names = FALSE)
#  7) Let's do a quick lmer model to test the fake data
modtest <- lmer(gdd ~ urban + (urban|species), data=fakedata_ws_urb) ## Quick look looks good!
modtest
################################################################################################
################################ URBAN MODELS NOW!! ############################################
################################################################################################
ws_urb <- read.csv("output/fakedata_ws_urb.csv")
datalist.wsurb <- with(ws_urb,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(ws_urb),
n_sp = length(unique(ws_urb$species))
)
)
################################################################################################
################################ URBAN MODELS NOW!! ############################################
################################################################################################
ws_urb <- read.csv("output/fakedata_ws_urb.csv")
datalist.wsurb <- with(ws_urb,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(ws_urb),
n_sp = length(unique(ws_urb$species))
)
)
ws_urb_fake = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.wsurb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
check_all_diagnostics(ws_urb_fake)
ws_urb_fake.sum <- summary(ws_urb_fake)$summary
ws_urb_fake.sum[grep("mu_", rownames(ws_urb_fake.sum)),]
ws_urb_fake.sum[grep("sigma_", rownames(ws_urb_fake.sum)),]
ws_urb <- read.csv("output/clean_gdd_bbanddvr.csv")
ws_urb$urban <- ifelse(ws_urb$type=="Harvard Forest", 0, 1)
ws_urb.stan <- subset(ws_urb, select=c(gdd_bb, urban, genus, species))
ws_urb.stan <- ws_urb.stan[(complete.cases(ws_urb.stan)),]
ws_urb.stan$spp <- paste(ws_urb.stan$genus, ws_urb.stan$species, sep="_")
datalist.wsurb <- with(ws_urb.stan,
list(y = gdd_bb,
tx = urban,
sp = as.numeric(as.factor(spp)),
N = nrow(ws_urb.stan),
n_sp = length(unique(ws_urb.stan$spp))
)
)
ws_urb_mod = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.wsurb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
check_all_diagnostics(ws_urb_mod)
ws_urb_mod.sum <- summary(ws_urb_mod)$summary
ws_urb_mod.sum[grep("mu_", rownames(ws_urb_mod.sum)),]
ws_urb_mod.sum[grep("sigma_", rownames(ws_urb_mod.sum)),]
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 2)
my.pch <- rep(15:16, each=10)
plot(gdd ~ species, col=my.pal[spp], pch=my.pch[spp], data = ws_urb.stan)
plot(gdd_bb ~ species, col=my.pal[spp], pch=my.pch[spp], data = ws_urb.stan)
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 2)
my.pch <- rep(15:16, each=10)
plot(gdd_bb ~ species, col=my.pal[spp], pch=my.pch[spp], data = ws_urb.stan)
plot(gdd_bb ~ spp, col=my.pal[spp], pch=my.pch[spp], data = ws_urb.stan)
View(ws_urb.stan)
length(unique(ws_urb.stan))
length(unique(ws_urb.stan$spp))
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 4)
my.pch <- rep(15:16, each=10)
plot(gdd_bb ~ spp, col=my.pal[spp], pch=my.pch[spp], data = ws_urb.stan)
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 4)
my.pch <- rep(15:18, each=10)
plot(gdd_bb ~ spp, col=my.pal[spp], pch=my.pch[spp], data = ws_urb.stan)
my.pal
my.pch <- rep(15:18, each=10)
my.pch
plot(gdd_bb ~ spp, col=my.pal[as.factor(spp)], pch=my.pch[as.factor(spp)], data = ws_urb.stan)
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 4)
my.pch <- rep(15:18, each=10)
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 4)
my.pch <- rep(15:18, each=10)
plot(gdd_bb ~ as.numeric(as.factor(spp)), col=my.pal[as.factor(spp)], pch=my.pch[as.factor(spp)], data = ws_urb.stan)
abline(h=mean(ws_urb.stan$gdd), lwd=3)
ws_urb <- read.csv("output/clean_gdd_bbanddvr.csv")
ws_urb$urban <- ifelse(ws_urb$type=="Harvard Forest", 0, 1)
ws_urb.stan <- subset(ws_urb, select=c(gdd_bb, urban, genus, species))
ws_urb.stan <- ws_urb.stan[(complete.cases(ws_urb.stan)),]
ws_urb.stan$spp <- paste(ws_urb.stan$genus, ws_urb.stan$species, sep="_")
ws_urb.stan <- ws_urb.stan[(ws_urb.stan$gdd_bb<=1000),]
datalist.wsurb <- with(ws_urb.stan,
list(y = gdd_bb,
tx = urban,
sp = as.numeric(as.factor(spp)),
N = nrow(ws_urb.stan),
n_sp = length(unique(ws_urb.stan$spp))
)
)
ws_urb_mod = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.wsurb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
check_all_diagnostics(ws_urb_mod)
ws_urb_mod.sum <- summary(ws_urb_mod)$summary
ws_urb_mod.sum[grep("mu_", rownames(ws_urb_mod.sum)),]
ws_urb_mod.sum[grep("sigma_", rownames(ws_urb_mod.sum)),]
hobo_urb <- read.csv("output/clean_gdd_bbanddvr_hobo.csv")
mean(hobo_urb$gdd_bb, na.rm=TRUE)
sd(hobo_urb$gdd_bb, na.rm=TRUE)
nsp = 20 # number of species
ntot = 100 # numbers of obs per species.
sample_a <- list(site.env = rbinom(1000, 1, 0.5))
model.parameters <- list(intercept = 250,
urban.coef = 40)
#  2) Now, we will make varying intercepts
env.samples <- sapply(sample_a, FUN = function(x){
sample(x, size = nsp * ntot, replace = TRUE)})
mm <- model.matrix(~env.samples)
#mm <- mm[,-2]
#  4) We need to make a random intercept model for each species
parameters.temp <- matrix(unlist(model.parameters), ncol = length(model.parameters), nrow = nsp * ntot, byrow = TRUE)
# Which parameters are random?
random.regex <- grep(pattern = paste(c("intercept", "urban.coef"), collapse = "|"), x = names(model.parameters))
# Generate random parameters (by species)
for(i in 1:length(random.regex)){
parameters.temp[, i] <- sapply(1:nsp, FUN = function(x){
rep(rnorm(n = 1, mean = model.parameters[[random.regex[i]]], sd = 40), ntot)})}
# Calculate response
response <- sapply(1:nrow(env.samples), FUN = function(x){
rnorm(n = 1, mean = mm[x, ] %*% parameters.temp[x, ], sd = 10)})
fakedata_hl_urb <- cbind(data.frame(species = as.vector(sapply(1:nsp, FUN = function(x) rep(x, ntot))),
gdd = response, urban = env.samples[,1]))
write.csv(fakedata_hl_urb, file="output/fakedata_hl_urb.csv", row.names = FALSE)
#  7) Let's do a quick lmer model to test the fake data
modtest <- lmer(gdd ~ urban + (urban|species), data=fakedata_hl_urb) ## Quick look looks good!
modtest
nsp = 20 # number of species
ntot = 100 # numbers of obs per species.
sample_a <- list(site.env = rbinom(1000, 1, 0.5))
model.parameters <- list(intercept = 250,
urban.coef = 40)
#  2) Now, we will make varying intercepts
env.samples <- sapply(sample_a, FUN = function(x){
sample(x, size = nsp * ntot, replace = TRUE)})
mm <- model.matrix(~env.samples)
#mm <- mm[,-2]
#  4) We need to make a random intercept model for each species
parameters.temp <- matrix(unlist(model.parameters), ncol = length(model.parameters), nrow = nsp * ntot, byrow = TRUE)
# Which parameters are random?
random.regex <- grep(pattern = paste(c("intercept", "urban.coef"), collapse = "|"), x = names(model.parameters))
# Generate random parameters (by species)
for(i in 1:length(random.regex)){
parameters.temp[, i] <- sapply(1:nsp, FUN = function(x){
rep(rnorm(n = 1, mean = model.parameters[[random.regex[i]]], sd = 30), ntot)})}
# Calculate response
response <- sapply(1:nrow(env.samples), FUN = function(x){
rnorm(n = 1, mean = mm[x, ] %*% parameters.temp[x, ], sd = 10)})
fakedata_hl_urb <- cbind(data.frame(species = as.vector(sapply(1:nsp, FUN = function(x) rep(x, ntot))),
gdd = response, urban = env.samples[,1]))
write.csv(fakedata_hl_urb, file="output/fakedata_hl_urb.csv", row.names = FALSE)
#  7) Let's do a quick lmer model to test the fake data
modtest <- lmer(gdd ~ urban + (urban|species), data=fakedata_hl_urb) ## Quick look looks good!
modtest
datalist.hlurb <- with(hobo_urb,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(hobo_urb),
n_sp = length(unique(hobo_urb$species))
)
)
hobo_urb <- read.csv("output/fakedata_hl_urb.csv")
datalist.hlurb <- with(hobo_urb,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(hobo_urb),
n_sp = length(unique(hobo_urb$species))
)
)
hl_urb_fake = stan('stan/urbanmodel_stan_normal_hobo.stan', data = datalist.hlurb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
check_all_diagnostics(hl_urb_fake)
hl_urb_fake.sum <- summary(hl_urb_fake)$summary
hl_urb_fake.sum[grep("mu_", rownames(hl_urb_fake.sum)),]
hl_urb_fake.sum[grep("sigma_", rownames(hl_urb_fake.sum)),]
hobo_urb <- read.csv("output/clean_gdd_bbanddvr_hobo.csv")
hobo_urb <- read.csv("output/clean_gdd_bbanddvr_hobo.csv")
hobo_urb$urban <- ifelse(hobo_urb$type=="Harvard Forest", 0, 1)
hobo_urb.stan <- subset(hobo_urb, select=c(gdd_bb, urban, genus, species))
hobo_urb.stan <- hobo_urb.stan[(complete.cases(hobo_urb.stan)),]
hobo_urb.stan$spp <- paste(hobo_urb.stan$genus, hobo_urb.stan$species, sep="_")
hobo_urb.stan <- hobo_urb.stan[(hobo_urb.stan$gdd_bb<=1000),]
datalist.hobourb <- with(hobo_urb.stan,
list(y = gdd_bb,
tx = urban,
sp = as.numeric(as.factor(spp)),
N = nrow(hobo_urb.stan),
n_sp = length(unique(hobo_urb.stan$spp))
)
)
hobo_urb_mod = stan('stan/urbanmodel_stan_normal_hobo.stan', data = datalist.hobourb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
check_all_diagnostics(hobo_urb_mod)
hobo_urb_mod.sum <- summary(hobo_urb_mod)$summary
hobo_urb_mod.sum[grep("mu_", rownames(hobo_urb_mod.sum)),]
hobo_urb_mod.sum[grep("sigma_", rownames(hobo_urb_mod.sum)),]
save(hobo_urb_mod, file="~/Documents/git/microclimates/analyses/stan/hobo_urban_mod.Rdata")
save(ws_urb_mod, file="~/Documents/git/microclimates/analyses/stan/ws_urban_mod.Rdata")
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 4)
my.pch <- rep(15:18, each=10)
plot(gdd_bb ~ as.numeric(as.factor(spp)), col=my.pal[as.factor(spp)], pch=my.pch[as.factor(spp)], data = ws_urb.stan)
abline(h=mean(ws_urb.stan$gdd), lwd=3)
plot(density(ws_urb.stan$gdd))
abline(v = mean(ws_urb.stan$gdd), lwd = 2, col = "blue")
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 4)
my.pch <- rep(15:18, each=10)
plot(gdd_bb ~ as.numeric(as.factor(spp)), col=my.pal[as.factor(spp)], pch=my.pch[as.factor(spp)], data = hobo_urb.stan)
abline(h=mean(ws_urb.stan$gdd), lwd=3)
hobo_urb <- read.csv("output/clean_gdd_bbanddvr_hobo.csv")
rm(list=ls())
options(stringsAsFactors = FALSE)
## Load Libraries
library(dplyr)
library(tidyr)
library(lubridate)
# Set Working Directory
setwd("~/Documents/git/microclimates/analyses")
# 1. Get treespotters data - and clean!
d<-read.csv("input/individual_phenometrics_data.csv", header=TRUE) ## 24 Jan 2019: 7671
# 2. Clean treespotters data first for budburst and leafout
source("cleaning/clean_TS.R") # 24 Jan 2019: 171
# 3. Clean CG data for budburst and leafout
source("cleaning/clean_CG.R") # 24 Jan 2019: 433 ### NEED TO UPDATE THE LEAF DROP INFORMATION!!!!!
# 4. Get John O'Keefe data - and clean!
ok15<-read.csv("output/okeefe2015.csv", header=TRUE)
source("cleaning/HF_datareadin.R")
# 5. Clean John O'Keefe's data for budburst and leafout data
source("cleaning/clean_HF.R") # 24 Jan 2019: 662
write.csv(d, file="output/clean_budburstandleafout.csv", row.names=FALSE)
rm(list=ls())
options(stringsAsFactors = FALSE)
## Load Libraries
library(dplyr)
library(tidyr)
library(geosphere)
library(anytime)
library(weathermetrics)
library(measurements)
library(lubridate)
library(chillR)
# Set Working Directory
setwd("~/Documents/git/microclimates/analyses")
d <- read.csv("output/clean_budburstandleafout.csv", header=TRUE)
## Flags for question
use.hobos <- TRUE ## make false if want to use main station climate data rather than the hobo loggers
if(use.hobos==FALSE){
# 1a. Let's add in climate data first for forcing.
source("calculating/clean_addinclimate.R") ## takes a while to load all the data, brings in climate data
#write.csv(cc, file="output/clean_addinclimate.csv", row.names=FALSE)
}
if(use.hobos==TRUE){
# 1b. Let's add in climate data from each hobo logger.
source("calculating/clean_addinclimate_loggers.R") ## takes a while to load all the data, brings in climate data
#write.csv(cc, file="output/clean_addinclimate.csv", row.names=FALSE)
}
# 2. Let's add in Forcing data first. We will use February 15 as the start
# of calculating GDD. Easy to fix if necessary in the gdd.start column
if(use.hobos==TRUE){
## Need to reset the working directory if use.hobos==TRUE.
setwd("~/Documents/git/microclimates/analyses")
}
source("calculating/calc_forceBB.R") ### This part can take a while depending on how many years of data you have and how many loggers
# 2. Let's add in Forcing data for leafoutnow. We will again use February 15 as the start
# of calculating GDD. Easy to fix if necessary in the gdd.start column
source("calculating/calc_forceLO.R") ### This part can take a while depending on how many years of data you have and how many loggers
ws_urb <- read.csv("output/clean_gdd_bbanddvr.csv")
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Questions to address:
## Compare GDDs between hobo loggers and weather station data
# 1) GDDlo ~ 1 + (1|species) - do once for HF weather station, once for hobo logger and repeat for Arboretum
# Compare urban effect using weather station data and then hobo logger data
# 2) GDDlo ~ urban + (urban|species) - do once with weather station data and once with hobo logger data
## Let's start with Question 1 first...
library(bayesplot) ## for plotting
library(egg) ## for plotting
library(shinystan)
library(rstanarm)
library(rstan)
library(brms)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
source("source/stan_utility.R")
ws_urb <- read.csv("output/clean_gdd_bbanddvr.csv")
ws_urb$urban <- ifelse(ws_urb$type=="Harvard Forest", 0, 1)
ws_urb <- ws_urb[(ws_urb$year>=2019),]
ws_urb.stan <- subset(ws_urb, select=c(gdd_bb, urban, genus, species))
ws_urb.stan <- ws_urb.stan[(complete.cases(ws_urb.stan)),]
ws_urb.stan$spp <- paste(ws_urb.stan$genus, ws_urb.stan$species, sep="_")
ws_urb.stan <- ws_urb.stan[(ws_urb.stan$gdd_bb<=1000),]
ws_urb.stan
datalist.wsurb <- with(ws_urb.stan,
list(y = gdd_bb,
tx = urban,
sp = as.numeric(as.factor(spp)),
N = nrow(ws_urb.stan),
n_sp = length(unique(ws_urb.stan$spp))
)
)
ws_urb_mod = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.wsurb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
mean(ws_urb.stan$gdd_bb, na.rm=TRUE)
sd(ws_urb.stan$gdd_bb, na.rm=TRUE)
################################################################################################
################################ URBAN MODELS NOW!! ############################################
################################################################################################
ws_urb <- read.csv("output/fakedata_ws_urb.csv")
datalist.wsurb <- with(ws_urb,
list(y = gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(ws_urb),
n_sp = length(unique(ws_urb$species))
)
)
ws_urb_fake = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.wsurb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb <- read.csv("output/clean_gdd_bbanddvr.csv")
hobo_urb <- read.csv("output/clean_gdd_bbanddvr_hobo.csv")
ws_urb$urban <- ifelse(ws_urb$type=="Harvard Forest", 0, 1)
ws_urb <- ws_urb[(ws_urb$year>=2019),]
ws_urb.stan <- subset(ws_urb, select=c(gdd_bb, urban, genus, species))
ws_urb.stan <- ws_urb.stan[(complete.cases(ws_urb.stan)),]
ws_urb.stan$spp <- paste(ws_urb.stan$genus, ws_urb.stan$species, sep="_")
ws_urb.stan <- ws_urb.stan[(ws_urb.stan$gdd_bb<=1000),]
datalist.wsurb <- with(ws_urb.stan,
list(y = gdd_bb,
tx = urban,
sp = as.numeric(as.factor(spp)),
N = nrow(ws_urb.stan),
n_sp = length(unique(ws_urb.stan$spp))
)
)
#ws_urb_priorcheck = stan('stan/urbanmodel_stan_normal_weather.stan',
#                  iter = 2000, warmup=1000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb_mod = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.wsurb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
get_prior(gdd_bb~urban + (urban|spp), data=ws_urb.stan)
ws_urb_mod = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.wsurb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
check_all_diagnostics(ws_urb_mod)
ws_urb_mod.sum <- summary(ws_urb_mod)$summary
ws_urb_mod.sum[grep("mu_", rownames(ws_urb_mod.sum)),]
ws_urb_mod.sum[grep("sigma_", rownames(ws_urb_mod.sum)),]
my.pal <- rep(brewer.pal(n = 10, name = "Paired"), 4)
my.pch <- rep(15:18, each=10)
plot(gdd_bb ~ as.numeric(as.factor(spp)), col=my.pal[as.factor(spp)], pch=my.pch[as.factor(spp)], data = ws_urb.stan)
abline(h=mean(ws_urb.stan$gdd), lwd=3)
save(ws_urb_mod, file="~/Documents/git/microclimates/analyses/stan/ws_urban_mod.Rdata")
figpath <- "figures"
figpathmore <- "ws_urb_muplot"
source("source/microurban_muplot.R")
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
figpath <- "figures"
figpathmore <- "ws_urb_muplot"
source("source/microurban_muplot.R")
source("source/microurban_muplot.R")
# Set up colors
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 12, name = "Paired"), 4)
# display.brewer.all()
my.pch <- rep(15:18, each=12)
alphahere = 0.4
sumer.ws <- summary(ws_urb_mod)$summary
sumer.ws[grep("mu_", rownames(sumer.ws)),]
unique(ws_urb.stan$spp) # numbers are alphabetical
sort(unique(ws_urb.stan$spp))
# m1.bb <- m2l.ni
modelhere <- ws_urb_mod
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 800) , 12, 3)
spnum <- length(unique(modelhere$spp))
spnum
# m1.bb <- m2l.ni
modelhere <- ws_urb_mod
modelhere
# m1.bb <- m2l.ni
modelhere <- sumer.ws
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 800) , 12, 3)
View(modelhere)
# m1.bb <- m2l.ni
modelhere <- ws_urb.stan
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 800) , 12, 3)
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 800) , 12, 3)
source("source/microurban_muplot.R")
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 800) , 12, 3)
spnum <- length(unique(modelhere$spp))
pdf(file.path(figpath, paste("muplot", nameforfig, figpathmore, ".pdf", sep="")),
width = width, height = height)
par(xpd=FALSE)
par(mar=c(5,7,3,10))
plot(x=NULL,y=NULL, xlim=xlim, yaxt='n', ylim=ylim,
xlab="Model estimate change in growing degree days to budburst", ylab="", main=nameforfig)
axis(2, at=1:2, labels=rev(c("Intercept", "Urban")), las=1)
abline(v=0, lty=2, col="darkgrey")
rownameshere <- c("mu_a_sp", "mu_b_tx_sp")
ppeffects <- c("mu_a_sp", "mu_b_tx_sp") # or 1:4 here...
for(i in 1:2){
pos.y<-(2:1)[i]
pos.x<-summary(modelhere)$summary[rownameshere[i],"mean"]
lines(summary(modelhere)$summary[rownameshere[i],c("25%","75%")],rep(pos.y,2),col="darkgrey")
points(pos.x,pos.y,cex=1.5,pch=19,col="darkblue")
for(spsi in 1:spnum){
pos.sps.i<-which(grepl(paste("[",spsi,"]",sep=""),rownames(summary(modelhere)$summary),fixed=TRUE))[2:4]
jitt<-(seassi/40) + 0.01
pos.y.sps.i<-pos.y-jitt
pos.x.sps.i<-summary(modelhere)$summary[pos.sps.i[i],"mean"]
lines(summary(modelhere)$summary[pos.sps.i[i],c("25%","75%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere))
points(pos.x.sps.i,pos.y.sps.i,cex=0.8, pch=my.pch[spsi], col=alpha(my.pal[spsi], alphahere))
}
}
# m1.bb <- m2l.ni
modelhere <- ws_urb_mod
source("source/microurban_muplot.R")
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 800) , 12, 3)
source("source/microurban_muplot.R")
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 800) , 12, 3)
source("source/microurban_muplot.R")
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 800) , 12, 3)
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 800) , 820, 3)
View(sumer.ws)
source("source/microurban_muplot.R")
muplotfx(modelhere, "", 7, 8, c(0,3), c(-400, 700) , 750, 3)
muplotfx(modelhere, "", 7, 8, c(0,2), c(-400, 700) , 750, 3)
muplotfx(modelhere, "", 7, 8, c(0,2), c(-400, 700) , 750, 2)
figpathmore <- "hobo_urb_muplot"
# Set up colors
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 12, name = "Paired"), 4)
# display.brewer.all()
my.pch <- rep(15:18, each=12)
alphahere = 0.4
# Load fitted stan model: no interactions
load("stan/hobo_urban_mod.Rdata") # m2l.ni
sumer.ws <- summary(hobo_urb_mod)$summary
sumer.ws[grep("mu_", rownames(sumer.ws)),]
unique(hobo_urb.stan$spp) # numbers are alphabetical
sort(unique(hobo_urb.stan$spp))
# m1.bb <- m2l.ni
modelhere <- hobo_urb_mod
hobo_urb <- read.csv("output/clean_gdd_bbanddvr_hobo.csv")
hobo_urb$urban <- ifelse(hobo_urb$type=="Harvard Forest", 0, 1)
hobo_urb.stan <- subset(hobo_urb, select=c(gdd_bb, urban, genus, species))
hobo_urb.stan <- hobo_urb.stan[(complete.cases(hobo_urb.stan)),]
hobo_urb.stan$spp <- paste(hobo_urb.stan$genus, hobo_urb.stan$species, sep="_")
hobo_urb.stan <- hobo_urb.stan[(hobo_urb.stan$gdd_bb<=1000),]
sumer.ws <- summary(hobo_urb_mod)$summary
sumer.ws[grep("mu_", rownames(sumer.ws)),]
unique(hobo_urb.stan$spp) # numbers are alphabetical
sort(unique(hobo_urb.stan$spp))
# m1.bb <- m2l.ni
modelhere <- hobo_urb_mod
muplotfx(modelhere, "", 7, 8, c(0,2), c(-400, 700) , 750, 2)
ws_urb <- read.csv("output/clean_gdd_bbanddvr.csv")
ws_urb$urban <- ifelse(ws_urb$type=="Harvard Forest", 0, 1)
ws_urb <- ws_urb[(ws_urb$year>=2019),]
ws_urb.stan <- subset(ws_urb, select=c(gdd_bb, urban, genus, species))
ws_urb.stan <- ws_urb.stan[(complete.cases(ws_urb.stan)),]
ws_urb.stan$spp <- paste(ws_urb.stan$genus, ws_urb.stan$species, sep="_")
ws_urb.stan <- ws_urb.stan[(ws_urb.stan$gdd_bb<=1000),]
ws_urb <- read.csv("output/clean_gdd_bbanddvr.csv")
ws_urb$urban <- ifelse(ws_urb$type=="Harvard Forest", 0, 1)
ws_urb.stan <- subset(ws_urb, select=c(gdd_bb, urban, genus, species))
ws_urb.stan <- ws_urb.stan[(complete.cases(ws_urb.stan)),]
ws_urb.stan$spp <- paste(ws_urb.stan$genus, ws_urb.stan$species, sep="_")
ws_urb.stan <- ws_urb.stan[(ws_urb.stan$gdd_bb<=1000),]
datalist.wsurb <- with(ws_urb.stan,
list(y = gdd_bb,
tx = urban,
sp = as.numeric(as.factor(spp)),
N = nrow(ws_urb.stan),
n_sp = length(unique(ws_urb.stan$spp))
)
)
wsall_urb_mod = stan('stan/urbanmodel_stan_normal_weather.stan', data = datalist.wsurb,
iter = 5000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
figpath <- "figures"
figpathmore <- "wsall_urb"
source("source/microurban_muplot.R")
# Set up colors
cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <- rep(brewer.pal(n = 12, name = "Paired"), 4)
# display.brewer.all()
my.pch <- rep(15:18, each=12)
alphahere = 0.4
# Load fitted stan model: no interactions
#load("stan/hobo_urban_mod.Rdata")
#load("stan/ws_urban_mod.Rda")
load("stan/wsall_urban_mod.Rda")
sumer.ws <- summary(wsall_urb_mod)$summary
sumer.ws[grep("mu_", rownames(sumer.ws)),]
unique(wsall_urb.stan$spp) # numbers are alphabetical
sort(unique(wsall_urb.stan$spp))
# m1.bb <- m2l.ni
modelhere <- wsall_urb_mod
muplotfx(modelhere, "", 7, 8, c(0,2), c(-400, 700) , 750, 2)
save(wsall_urb_mod, file="~/Documents/git/microclimates/analyses/stan/wsall_urban_mod.Rdata")
