options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(gridExtra)
library(rstan)
setwd("~/Documents/git/microclimates/analyses/")
source("source/sims_hypoth_sourcedata.R")
source("source/sims_hypoth_interxn_sourcedata.R")
realgdd <- read.csv("output/cleanmicro_gdd_2019.csv")
simsdat <- bbfunc("hobo", "ws", 0, 15, 300, 20, 10, 3, 0)
hypoth <- "urban"  ## hobo, urban, prov
hypoth.para <- "NA"
hypoth.mu <- -30
hypoth.sd <- 5   ### This just adds that amount of imprecision to the hypothesis question
fstar.num <- 300  ## GDD threshold
fstar.sd <- 20
meantemp <- 10
hypoth <- "hobo"  ## hobo, urban, prov
hypoth.para <- "ws"
hypoth.mu <- 0
hypoth.sd <- 15   ### This just adds that amount of imprecision to the hypothesis question
fstar.num <- 300  ## GDD threshold
fstar.sd <- 20
meantemp <- 10
meantemp.sd <- 3
micro.sd <- 0
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 60 #### just to make sure we don't get any NAs
nspps <- 20
ninds <- 20
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- fstar.num  ### mu_a_sp in model output
fstarspeciessd <- fstar.sd ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 5
### Now the climate data
dayz <- rep(1:daysperyr, nobs)
cc.arb <- cc.hf <- meantemp
sigma.arb <- sigma.hf <- meantemp.sd
microarb.effect <- microhf.effect <- 0
microsigmaarb.effect <- microsigmahf.effect <- micro.sd  #### by keeping the sigmas the same for the microsites (line 94 & 99) we assume that the microclimatic effects are the same across sites
#### Next I set up an fstar or a GDD threshold for each individual
spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
df.fstar <- df.fstar[!duplicated(df.fstar),]
#### Here, I set up provenance for each individual
### # Step 2: find GDDs
#### Now I set up climate data for the Arboretum, this is the weather station data
arbclim <- data.frame(microsite=rep(rep(c(1:nmicros), each=daysperyr*nmethods*(ninds/nmicros)),nspps),
ind=rep(rep(c(1:ninds), each=daysperyr*nmethods), nspps),
species = rep(c(1:nspps), each=daysperyr*nmicros*nmethods*ninds),
day=rep(c(1:daysperyr), nmicros*nspps*nmethods),
method=rep(rep(c("ws", "hobo"), each=daysperyr), nspps*ninds),
site = as.character("arb"))
### This is how I get weather station data versus hobo logger data
arbclim$tmean <- ifelse(arbclim$method=="hobo", rnorm(as.numeric(arbclim$day), cc.arb, meantemp.sd + micro.sd),
rnorm(as.numeric(arbclim$day), cc.arb, meantemp.sd))
#### Harvard Forest climate data, weather station data
hfclim <- data.frame(microsite=rep(rep(c(1:nmicros), each=daysperyr*nmethods*(ninds/nmicros)),nspps),
ind=rep(rep(c(1:ninds), each=daysperyr*nmethods), nspps),
species = rep(c(1:nspps), each=daysperyr*nmicros*nmethods*ninds),
day=rep(c(1:daysperyr), nmicros*nspps*nmethods),
method=rep(rep(c("ws", "hobo"), each=daysperyr),nspps*ninds),
site = as.character("hf"))
### Again, where I set up the difference between hobo logger and weather station
hfclim$tmean <- ifelse(hfclim$method=="hobo", rnorm(hfclim$day, cc.hf, meantemp.sd + micro.sd),
rnorm(hfclim$day, cc.hf, meantemp.sd))
##Step 3: Make a data frame and get the mean temp
df <- dplyr::full_join(arbclim, hfclim)
df$tmean <- as.numeric(df$tmean)
df$sp_ind <- paste(df$species, df$ind, sep="_")
### Let's just tidy everything up
df$species <- as.numeric(as.factor(df$species))
df.fstar$species <- as.numeric(as.factor(df.fstar$species))
df <- full_join(df, df.fstar)
df$spind_site_method <- paste0(df$sp_ind, df$site, df$method)
df$nodupes <- paste0(df$sp_ind, df$site, df$method, df$microsite, df$day)
df <- df[!duplicated(df$nodupes),]
### Calculate the OBSERVED GDDs!!!
df$gdd.obs <- ave(df$tmean, df$spind_site_method, FUN=cumsum)
## Find the day of budburst to find the actual GDD versus the "observed GDD"
for(i in c(unique(df$spind_site_method))){ # i="9_10hfhobo2"
bb <- which(df$gdd.obs[i==df$spind_site_method] >= df$fstarspp[i==df$spind_site_method])[1]
df$bb[i==df$spind_site_method] <- bb
}
df.bb <- df[(df$bb==df$day),]
#### This is where I test our hypothesis. This doesn't come out of the model directly
hypoth_sd <- hypoth.sd  ### adds variation to weather station estimates, rendering hobo loggers more accurate measures and therefore better able to capture urban effects
hypoth_mu <- hypoth.mu
hypoth_para <- hypoth.para
########################### ADDING IN HYPOTHESIS HERE! ################################
### I think this should just make the weather station less accurate...??? I hope.
df.bb$hyp_b <- ifelse(df.bb$method==hypoth.para, 1, 0)  ## This won't be spit out of the model. If it's the weather station, make it a 1 if it's the hobo logger make it a 0
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1:nspps, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
df.bb$gdd <- df.bb$gdd.obs + df.bb$gdd.noise + rnorm(ntot, mean=0, sd=sigma_y)
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rnorm(nobs, provenance.hf, 5), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = c(rep(provenance.arb, each=nmethods), rep(provenance.hf, ninds*nspps*nmethods)),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.bb$species <- as.numeric(df.bb$species)
df.prov$ind <- as.integer(df.prov$ind)
df.bb <- left_join(df.bb, df.prov)
if(hypoth=="hobo"){
#### This is where I test our hypothesis. This doesn't come out of the model directly
hypoth_sd <- hypoth.sd  ### adds variation to weather station estimates, rendering hobo loggers more accurate measures and therefore better able to capture urban effects
hypoth_mu <- hypoth.mu
hypoth_para <- hypoth.para
########################### ADDING IN HYPOTHESIS HERE! ################################
### I think this should just make the weather station less accurate...??? I hope.
df.bb$hyp_b <- ifelse(df.bb$method==hypoth.para, 1, 0)  ## This won't be spit out of the model. If it's the weather station, make it a 1 if it's the hobo logger make it a 0
### Now, I am just adding more sigma to the weather station fstar values, seen by sd=ws_sd (which was 20) # emw -- deleted starter of df.fstar$gdd.noise + from above
#df.bb$gdd.noise <- df.bb$hyp_b * rep(rnorm(nspps, mean=hypoth_mu, sd=hypoth_sd), each=ninds*nsites)
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1:nspps, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
df.bb$gdd <- df.bb$gdd.obs + df.bb$gdd.noise + rnorm(ntot, mean=0, sd=sigma_y)
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rnorm(nobs, provenance.hf, 5), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = c(rep(provenance.arb, each=nmethods), rep(provenance.hf, ninds*nspps*nmethods)),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.bb$species <- as.numeric(df.bb$species)
df.prov$ind <- as.integer(df.prov$ind)
df.bb <- left_join(df.bb, df.prov)
}
if(hypoth=="NA"){
#### This is where I test our hypothesis. This doesn't come out of the model directly
df.bb$gdd.noise <- 0
df.bb$gdd <- df.bb$gdd.obs + rnorm(ntot, mean=0, sd=sigma_y)
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rnorm(nobs, provenance.hf, 5), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = c(rep(provenance.arb, each=nmethods), rep(provenance.hf, ninds*nspps*nmethods)),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.bb$species <- as.numeric(df.bb$species)
df.prov$ind <- as.integer(df.prov$ind)
df.bb <- left_join(df.bb, df.prov)
}
if(hypoth=="hobo"){
#### This is where I test our hypothesis. This doesn't come out of the model directly
hypoth_sd <- hypoth.sd  ### adds variation to weather station estimates, rendering hobo loggers more accurate measures and therefore better able to capture urban effects
hypoth_mu <- hypoth.mu
hypoth_para <- hypoth.para
########################### ADDING IN HYPOTHESIS HERE! ################################
### I think this should just make the weather station less accurate...??? I hope.
df.bb$hyp_b <- ifelse(df.bb$method==hypoth.para, 1, 0)  ## This won't be spit out of the model. If it's the weather station, make it a 1 if it's the hobo logger make it a 0
### Now, I am just adding more sigma to the weather station fstar values, seen by sd=ws_sd (which was 20) # emw -- deleted starter of df.fstar$gdd.noise + from above
#df.bb$gdd.noise <- df.bb$hyp_b * rep(rnorm(nspps, mean=hypoth_mu, sd=hypoth_sd), each=ninds*nsites)
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1:nspps, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
df.bb$gdd <- df.bb$gdd.obs + df.bb$gdd.noise + rnorm(ntot, mean=0, sd=sigma_y)
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rnorm(nobs, provenance.hf, 5), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = c(rep(provenance.arb, each=nmethods), rep(provenance.hf, ninds*nspps*nmethods)),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.bb$species <- as.numeric(df.bb$species)
df.prov$ind <- as.integer(df.prov$ind)
df.bb <- left_join(df.bb, df.prov)
}
if(hypoth=="NA"){
#### This is where I test our hypothesis. This doesn't come out of the model directly
df.bb$gdd.noise <- 0
df.bb$gdd <- df.bb$gdd.obs + rnorm(ntot, mean=0, sd=sigma_y)
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rnorm(nobs, provenance.hf, 5), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = c(rep(provenance.arb, each=nmethods), rep(provenance.hf, ninds*nspps*nmethods)),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.bb$species <- as.numeric(df.bb$species)
df.prov$ind <- as.integer(df.prov$ind)
df.bb <- left_join(df.bb, df.prov)
}
if(hypoth=="urban"){
urbeffect = hypoth.mu
urbsd = hypoth.sd
##### We should get these back in parameter estimates
df.bb$urbtx <- ifelse(df.bb$site=="arb", 1, 0)
df.bb$gdd.noise  <- df.bb$urbtx * rep(rnorm(n=nspps, mean=urbeffect, sd=urbsd), each=ninds*nmethods)
df.bb$gdd <- df.bb$gdd.obs + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rnorm(nobs, provenance.hf, 5), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = c(rep(provenance.arb, each=nmethods), rep(provenance.hf, ninds*nspps*nmethods)),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.bb$species <- as.numeric(df.bb$species)
df.prov$ind <- as.integer(df.prov$ind)
df.bb <- left_join(df.bb, df.prov)
}
if(hypoth=="prov"){ ### This is the provenance model
prov_effect = hypoth.mu
prov_sd = hypoth.sd
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rnorm(nspps*ninds, provenance.hf, 2), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = as.numeric(c(rep(provenance.arb, each=nmethods), rep(provenance.hf, nobs*nmethods))),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.prov$species <- as.numeric(df.prov$species)
df.prov$provenance <- as.numeric(df.prov$provenance)
df.prov$prov.z <- (df.prov$provenance-mean(df.prov$provenance,na.rm=TRUE))/(sd(df.prov$provenance,na.rm=TRUE))
df.prov$ind <- as.numeric(df.prov$ind)
df.bb <- full_join(df.bb, df.prov)
# Generate random parameters (by species)
df.bb$gdd.noise <- df.bb$prov.z * rep(rnorm(n=nspps, mean=prov_effect, sd=prov_sd), each=ninds*nsites)
df.bb$gdd <- df.bb$gdd.obs + df.bb$gdd.noise + rnorm(n=ntot, mean=0, sd=sigma_y)
df.bb <- df.bb[!duplicated(df.bb),]
}
##### Clean up the dataframe to prepare for analyses
df.bb <- subset(df.bb, select=c("site", "microsite", "method", "species", "ind", "gdd.noise", "fstarspp", "gdd", "provenance", "bb")) #
bball <- df.bb[!duplicated(df.bb),]
View(df.bb)
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 60 #### just to make sure we don't get any NAs
nspps <- 20
ninds <- 20
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- fstar.num  ### mu_a_sp in model output
fstarspeciessd <- fstar.sd ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 5
### Now the climate data
dayz <- rep(1:daysperyr, nobs)
cc.arb <- cc.hf <- meantemp
sigma.arb <- sigma.hf <- meantemp.sd
microarb.effect <- microhf.effect <- 0
microsigmaarb.effect <- microsigmahf.effect <- micro.sd  #### by keeping the sigmas the same for the microsites (line 94 & 99) we assume that the microclimatic effects are the same across sites
#### Next I set up an fstar or a GDD threshold for each individual
spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
df.fstar <- df.fstar[!duplicated(df.fstar),]
#### Here, I set up provenance for each individual
### # Step 2: find GDDs
#### Now I set up climate data for the Arboretum, this is the weather station data
arbclim <- data.frame(microsite=rep(rep(c(1:nmicros), each=daysperyr*nmethods*(ninds/nmicros)),nspps),
ind=rep(rep(c(1:ninds), each=daysperyr*nmethods), nspps),
species = rep(c(1:nspps), each=daysperyr*nmicros*nmethods*ninds),
day=rep(c(1:daysperyr), nmicros*nspps*nmethods),
method=rep(rep(c("ws", "hobo"), each=daysperyr), nspps*ninds),
site = as.character("arb"))
### This is how I get weather station data versus hobo logger data
arbclim$tmean <- ifelse(arbclim$method=="hobo", rnorm(as.numeric(arbclim$day), cc.arb, meantemp.sd + micro.sd),
rnorm(as.numeric(arbclim$day), cc.arb, meantemp.sd))
#### Harvard Forest climate data, weather station data
hfclim <- data.frame(microsite=rep(rep(c(1:nmicros), each=daysperyr*nmethods*(ninds/nmicros)),nspps),
ind=rep(rep(c(1:ninds), each=daysperyr*nmethods), nspps),
species = rep(c(1:nspps), each=daysperyr*nmicros*nmethods*ninds),
day=rep(c(1:daysperyr), nmicros*nspps*nmethods),
method=rep(rep(c("ws", "hobo"), each=daysperyr),nspps*ninds),
site = as.character("hf"))
### Again, where I set up the difference between hobo logger and weather station
hfclim$tmean <- ifelse(hfclim$method=="hobo", rnorm(hfclim$day, cc.hf, meantemp.sd + micro.sd),
rnorm(hfclim$day, cc.hf, meantemp.sd))
##Step 3: Make a data frame and get the mean temp
df <- dplyr::full_join(arbclim, hfclim)
df$tmean <- as.numeric(df$tmean)
df$sp_ind <- paste(df$species, df$ind, sep="_")
### Let's just tidy everything up
df$species <- as.numeric(as.factor(df$species))
df.fstar$species <- as.numeric(as.factor(df.fstar$species))
df <- full_join(df, df.fstar)
df$spind_site_method <- paste0(df$sp_ind, df$site, df$method)
df$nodupes <- paste0(df$sp_ind, df$site, df$method, df$microsite, df$day)
df <- df[!duplicated(df$nodupes),]
### Calculate the OBSERVED GDDs!!!
df$gdd.obs <- ave(df$tmean, df$spind_site_method, FUN=cumsum)
## Find the day of budburst to find the actual GDD versus the "observed GDD"
for(i in c(unique(df$spind_site_method))){ # i="9_10hfhobo2"
bb <- which(df$gdd.obs[i==df$spind_site_method] >= df$fstarspp[i==df$spind_site_method])[1]
df$bb[i==df$spind_site_method] <- bb
}
df.bb <- df[(df$bb==df$day),]
if(hypoth=="hobo"){
#### This is where I test our hypothesis. This doesn't come out of the model directly
hypoth_sd <- hypoth.sd  ### adds variation to weather station estimates, rendering hobo loggers more accurate measures and therefore better able to capture urban effects
hypoth_mu <- hypoth.mu
hypoth_para <- hypoth.para
########################### ADDING IN HYPOTHESIS HERE! ################################
### I think this should just make the weather station less accurate...??? I hope.
df.bb$hyp_b <- ifelse(df.bb$method==hypoth.para, 1, 0)  ## This won't be spit out of the model. If it's the weather station, make it a 1 if it's the hobo logger make it a 0
### Now, I am just adding more sigma to the weather station fstar values, seen by sd=ws_sd (which was 20) # emw -- deleted starter of df.fstar$gdd.noise + from above
#df.bb$gdd.noise <- df.bb$hyp_b * rep(rnorm(nspps, mean=hypoth_mu, sd=hypoth_sd), each=ninds*nsites)
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1:ninds*nsites, FUN = function(x){
rep(rnorm(n = nspps, mean = hypoth_mu, sd = hypoth_sd), ntot)})
df.bb$gdd <- df.bb$gdd.obs + df.bb$gdd.noise + rnorm(ntot, mean=0, sd=sigma_y)
##### Now add in provenance so better able to compare to other simulations
spind <- paste(rep(c(1:nspps), each=ninds), rep(1:ninds, nspps), sep="_")
provenance.hf <- 42.5
provenance.arb <- round(rnorm(nobs, provenance.hf, 5), digits=2)
df.prov <- as.data.frame(cbind(sp_ind = rep(rep(spind, nsites),each=nmethods),
site = rep(c("arb", "hf"), each=nobs*nmethods),
provenance = c(rep(provenance.arb, each=nmethods), rep(provenance.hf, ninds*nspps*nmethods)),
method = rep(c("ws", "hobo"), nsites*nobs)))
df.prov$species <- as.numeric(gsub("\\_.*" , "", df.prov$sp_ind))
df.prov$ind <- gsub(".*_" , "", df.prov$sp_ind)
df.prov$sp_ind <- NULL
df.bb$species <- as.numeric(df.bb$species)
df.prov$ind <- as.integer(df.prov$ind)
df.bb <- left_join(df.bb, df.prov)
}
#### This is where I test our hypothesis. This doesn't come out of the model directly
hypoth_sd <- hypoth.sd  ### adds variation to weather station estimates, rendering hobo loggers more accurate measures and therefore better able to capture urban effects
hypoth_mu <- hypoth.mu
hypoth_para <- hypoth.para
########################### ADDING IN HYPOTHESIS HERE! ################################
### I think this should just make the weather station less accurate...??? I hope.
df.bb$hyp_b <- ifelse(df.bb$method==hypoth.para, 1, 0)  ## This won't be spit out of the model. If it's the weather station, make it a 1 if it's the hobo logger make it a 0
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1:ninds, FUN = function(x){
rep(rnorm(n = nspps, mean = hypoth_mu, sd = hypoth_sd), ntot)})
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1, FUN = function(x){
rep(rnorm(n = nspps, mean = hypoth_mu, sd = hypoth_sd), ntot)})
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1:ninds*nsites, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1:ninds*nsites, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), nspps)})
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1:(ntot), FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), nspps)})
df.bb$gdd.noise <- df.bb$hyp_b * sapply(1:(ninds*nsites*nmethods), FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), nspps)})
########################### ADDING IN HYPOTHESIS HERE! ################################
### I think this should just make the weather station less accurate...??? I hope.
df.bb$hyp_b <- ifelse(df.bb$method==hypoth.para, 1, 0)  ## This won't be spit out of the model. If it's the weather station, make it a 1 if it's the hobo logger make it a 0
params[,1] <- df.bb$hyp_b * sapply(1:nspps, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
### Now, I am just adding more sigma to the weather station fstar values, seen by sd=ws_sd (which was 20) # emw -- deleted starter of df.fstar$gdd.noise + from above
#df.bb$gdd.noise <- df.bb$hyp_b * rep(rnorm(nspps, mean=hypoth_mu, sd=hypoth_sd), each=ninds*nsites)
model.parameters <- list(method.coef = hypoth_mu)
params<- matrix(unlist(model.parameters), ncol = length(model.parameters), nrow = nspps * ntot, byrow = TRUE)
params[,1] <- df.bb$hyp_b * sapply(1:nspps, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
response <- sapply(1:ntot, FUN = function(x){
rnorm(n = 1, mean = df.bb$gdd.obs %*% params[x, ], sd = sigma_y)})
mm <- model.matrix(~sapply(list(method.env=rbinom(ntot, 1, 0.5)), FUN = function(x){
sample(x, size = nspps * ntot, replace = TRUE)}))
model.parameters <- list(method.coef = hypoth_mu)
params<- matrix(unlist(model.parameters), ncol = length(model.parameters), nrow = nspps * ntot, byrow = TRUE)
params[,1] <- df.bb$hyp_b * sapply(1:nspps, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
response <- sapply(1:ntot, FUN = function(x){
rnorm(n = 1, mean = df.bb$gdd.obs %*% params[x, ], sd = sigma_y)})
response <- sapply(1:ntot, FUN = function(x){
rnorm(n = 1, mean = mm[x,] %*% params[x, ], sd = sigma_y)})
View(mm)
View(model.parameters)
samples <- sapply(list(method.env=rbinom(ntot, 1, 0.5)), FUN = function(x){
sample(x, size = nspps * ntot, replace = TRUE)})
mm <- model.matrix(~samples)
model.parameters <- list(method.coef = hypoth_mu)
params<- matrix(unlist(model.parameters), ncol = length(model.parameters), nrow = nspps * ntot, byrow = TRUE)
params[,1] <- df.bb$hyp_b * sapply(1:nspps, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
response <- sapply(1:nrow(samples), FUN = function(x){
rnorm(n = 1, mean = mm[x,] %*% params[x, ], sd = sigma_y)})
params[,1] <- sapply(1:nspps, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
samples <- sapply(list(method.env=rbinom(ntot, 1, 0.5)), FUN = function(x){
sample(x, size = nspps * ntot, replace = TRUE)})
mm <- model.matrix(~samples)
model.parameters <- list(method.coef = hypoth_mu)
params<- matrix(unlist(model.parameters), ncol = length(model.parameters), nrow = nspps * ntot, byrow = TRUE)
params[,1] <- sapply(1:nspps, FUN = function(x){
rep(rnorm(n = 1, mean = hypoth_mu, sd = hypoth_sd), ntot)})
response <- sapply(1:nrow(samples), FUN = function(x){
rnorm(n = 1, mean = mm[x,] %*% params[x, ], sd = sigma_y)})
ninds*nsites*nspps
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(gridExtra)
library(rstan)
setwd("~/Documents/git/microclimates/analyses/")
source("source/sims_hypoth_sourcedata.R")
source("source/sims_hypoth_interxn_sourcedata.R")
realgdd <- read.csv("output/cleanmicro_gdd_2019.csv")
simsdat <- bbfunc("hobo", "ws", 0, 15, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
ws <- ggplot(clim[(clim$method=="ws"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-20, 40)) +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(clim[(clim$method=="hobo"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(-20, 40)) +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5))
pdf("figures/clim_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
ws <- ggplot(bball[(bball$method=="ws"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(100, 700)) +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
#scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(bball[(bball$method=="hobo"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(100, 700)) +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0))
pdf("figures/gdd_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
use.urban <- "urban"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = treatmenttype,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
noisyws_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
noisyws_fake
noisyws_fake = stan('stan/urbanmethod_normal_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
noisyws_fake = stan('stan/urbanmethod_normal_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, chains=4, control=list(adapt_delta=0.99, max_treedepth=15))
noisyws_fake
noisyws_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, chains=4, control=list(adapt_delta=0.99, max_treedepth=15))
noisyws_fake
noisyws_fake = stan('stan/urbanmethod_normal_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, chains=4, control=list(adapt_delta=0.99, max_treedepth=15))
