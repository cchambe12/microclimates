cols <- adjustcolor("indianred3", alpha.f = 0.3)
my.pal <-rep(viridis_pal(option="viridis")(9),2)
my.pch <- rep(15:18, each=10)
alphahere = 0.4
modoutput <- summary(urbmethod_fake)$summary
noncps <- modoutput[!grepl("_ncp", rownames(modoutput)),]
use.real <- use.real()[1]
labs <- if(use.real=="urban"){c("Arboretum", "Weather Station", "Arboretum x\nWeather Station",
"Sigma Arboretum", "Sigma \nWeather Station",
"Sigma Interaction")}else if(use.real=="prov"){
c("Provenance", "Weather Station", "Provenance x\nWeather Station",
"Sigma Provenance", "Sigma \nWeather Station",
"Sigma Interaction")}
modelhere <- urbmethod_fake
bball <- get.datareal
spnum <- length(unique(bball$spp))
par(xpd=FALSE)
par(mar=c(5,10,3,10))
plot(x=NULL,y=NULL, xlim=if(use.real=="prov"){c(-30,30)} else if(use.real=="urban"){c(-100,100)}, yaxt='n', ylim=c(0,6),
xlab="Model estimate change in growing degree days to budburst", ylab="")
axis(2, at=1:6, labels=rev(labs), las=1)
abline(v=0, lty=2, col="darkgrey")
rownameshere <- c("mu_b_urban_sp", "mu_b_method_sp", "mu_b_um_sp", "sigma_b_urban_sp",
"sigma_b_method_sp", "sigma_b_um_sp")
for(i in 1:6){
pos.y<-(6:1)[i]
pos.x<-noncps[rownameshere[i],"mean"]
lines(noncps[rownameshere[i],c("25%","75%")],rep(pos.y,2),col="darkgrey")
points(pos.x,pos.y,cex=1.5,pch=19,col="darkblue")
for(spsi in 1:spnum){
pos.sps.i<-which(grepl(paste0("[",spsi,"]"),rownames(noncps),fixed=TRUE))[2:4]
jitt<-(spsi/40) + 0.08
pos.y.sps.i<-pos.y-jitt
pos.x.sps.i<-noncps[pos.sps.i[i],"mean"]
lines(noncps[pos.sps.i[i],c("25%","75%")],rep(pos.y.sps.i,2),
col=alpha(my.pal[spsi], alphahere))
points(pos.x.sps.i,pos.y.sps.i,cex=0.8, pch=my.pch[spsi], col=alpha(my.pal[spsi], alphahere))
}
}
par(xpd=TRUE) # so I can plot legend outside
legend(if(use.real=="prov"){40}else if(use.real=="urban"){120}, 6, sort(unique(gsub("_", " ", bball$spp))), pch=my.pch[1:spnum],
col=alpha(my.pal[1:spnum], alphahere),
cex=1, bty="n", text.font=3)
})
})
observeEvent(input$warmrun, {
output$gddwarm <- renderPlot({
gdd.warm <- get.warmsims()[[1]]
ggplot(gdd.warm, aes(as.numeric(warming), abs(gdd_accuracy), col=fstarspp, group=fstarspp)) +
geom_line(stat='smooth', method = "loess", alpha=1, aes(col=fstarspp)) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.text.align = 0,
legend.key = element_rect(colour = "transparent", fill = "white"),
plot.margin = margin(0.5, 0.5, 0.5, 1, "cm")) +
xlab("Amount of warming (°C)") + ylab("GDD accuracy") +
scale_x_continuous(breaks = sort(c(seq(0, 10, by=1)))) +
scale_color_viridis_c()
})
})
}
shinyApp(ui = ui, server = server)
runApp('Documents/microapp')
runApp("~/Documents/microapp/")
runApp("~/Documents/microapp/")
runApp("~/Documents/git/microapp")
runApp("~/Documents/git/microapp")
runApp("~/Documents/git/microapp")
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(gridExtra)
library(rstan)
setwd("~/Documents/git/microclimates/analyses/")
# Load Libraries
library(dplyr)
library(tidyr)
set.seed(12321)
hypoth <- "hobo"  ## hobo, urban, prov
hypoth.para <- "ws"
hypoth.mu <- 0
hypoth.sd <- 15   ### This just adds that amount of imprecision to the hypothesis question
fstar.num <- 300  ## GDD threshold
fstar.sd <- 20
meantemp <- 10
meantemp.sd <- 3
micro.sd <- 0
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 50 #### just to make sure we don't get any NAs
nspps <- 20
ninds <- 50
nobs <- nspps*ninds
nsites <- 2  ### Arboretum versus the Forest
nmicros <- 10  ### Number microsites per site so 20 total
nmethods <- 2
ntot <- nobs * nmethods * nsites
### These are our fstar thresholds
fstar <- fstar.num  ### mu_a_sp in model output
fstarspeciessd <- fstar.sd ### sigma_a_sp in model output
## Sigma_y to be added at the end
sigma_y <- 12
### Now the climate data
dayz <- rep(1:daysperyr, nobs)
cc.arb <- cc.hf <- meantemp
sigma.arb <- sigma.hf <- meantemp.sd
microarb.effect <- microhf.effect <- 0
microsigmaarb.effect <- microsigmahf.effect <- micro.sd  #### by keeping the sigmas the same for the microsites (line 94 & 99) we assume that the microclimatic effects are the same across sites
#### Next I set up an fstar or a GDD threshold for each individual
spind <- paste(rep(1:nspps, each=ninds), rep(1:ninds, nspps), sep="_")
fstarspp <- round(rnorm(nspps, fstar, fstarspeciessd), digits=0)
df.fstar <- as.data.frame(cbind(species=rep(1:nspps, each=ninds*nsites*nmethods),
fstarspp=rep(fstarspp, each=ninds*nsites*nmethods),
site=rep(c("arb", "hf"), each=ninds*nmethods),
method=rep(rep(c("ws", "hobo"), each=ninds), nsites*nspps)))
df.fstar$fstarspp <- as.numeric(df.fstar$fstarspp)
df.fstar <- df.fstar[!duplicated(df.fstar),]
#### Here, I set up provenance for each individual
### # Step 2: find GDDs
#### Now I set up climate data for the Arboretum, this is the weather station data
arbclim <- data.frame(microsite=rep(rep(c(1:nmicros), each=daysperyr*nmethods*(ninds/nmicros)),nspps),
ind=rep(rep(c(1:ninds), each=daysperyr*nmethods), nspps),
species = rep(c(1:nspps), each=daysperyr*nmicros*nmethods*ninds),
day=rep(c(1:daysperyr), nmicros*nspps*nmethods),
method=rep(rep(c("ws", "hobo"), each=daysperyr), nspps*ninds),
site = as.character("arb"))
### This is how I get weather station data versus hobo logger data
arbclim$tmean <- ifelse(arbclim$method=="hobo", rnorm(as.numeric(arbclim$day), cc.arb, meantemp.sd + micro.sd),
rnorm(as.numeric(arbclim$day), cc.arb, meantemp.sd))
#### Harvard Forest climate data, weather station data
hfclim <- data.frame(microsite=rep(rep(c(1:nmicros), each=daysperyr*nmethods*(ninds/nmicros)),nspps),
ind=rep(rep(c(1:ninds), each=daysperyr*nmethods), nspps),
species = rep(c(1:nspps), each=daysperyr*nmicros*nmethods*ninds),
day=rep(c(1:daysperyr), nmicros*nspps*nmethods),
method=rep(rep(c("ws", "hobo"), each=daysperyr),nspps*ninds),
site = as.character("hf"))
### Again, where I set up the difference between hobo logger and weather station
hfclim$tmean <- ifelse(hfclim$method=="hobo", rnorm(hfclim$day, cc.hf, meantemp.sd + micro.sd),
rnorm(hfclim$day, cc.hf, meantemp.sd))
##Step 3: Make a data frame and get the mean temp
df <- dplyr::full_join(arbclim, hfclim)
df$tmean <- as.numeric(df$tmean)
df$sp_ind <- paste(df$species, df$ind, sep="_")
### Let's just tidy everything up
df$species <- as.numeric(as.factor(df$species))
df.fstar$species <- as.numeric(as.factor(df.fstar$species))
df <- full_join(df, df.fstar)
df$spind_site_method <- paste0(df$sp_ind, df$site, df$method)
df$nodupes <- paste0(df$sp_ind, df$site, df$method, df$microsite, df$day)
df <- df[!duplicated(df$nodupes),]
### Calculate the OBSERVED GDDs!!!
df$gdd.obs <- ave(df$tmean, df$spind_site_method, FUN=cumsum)
## Find the day of budburst to find the actual GDD versus the "observed GDD"
for(i in c(unique(df$spind_site_method))){ # i="9_10hfhobo2"
bb <- which(df$gdd.obs[i==df$spind_site_method] >= df$fstarspp[i==df$spind_site_method])[1]
df$bb[i==df$spind_site_method] <- bb
}
df.bb <- df[(df$bb==df$day),]
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(gridExtra)
library(rstan)
setwd("~/Documents/git/microclimates/analyses/")
#source("source/sims_hypoth_sourcedata.R")
source("source/sims_foo.R")
source("source/sims_hypoth_interxn_sourcedata.R")
realgdd <- read.csv("output/cleanmicro_gdd_2019.csv")
simsdat <- bbfunc("hobo", "ws", 0, 10, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
cols <-viridis_pal(option="viridis")(3)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
ws <- ggplot(clim[(clim$method=="ws"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-20, 40)) +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(clim[(clim$method=="hobo"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(-20, 40)) +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5))
pdf("figures/clim_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
ws <- ggplot(bball[(bball$method=="ws"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(100, 700)) +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
#scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(bball[(bball$method=="hobo"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(100, 700)) +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0))
pdf("figures/gdd_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
use.urban <- "urban"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = treatmenttype,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
noisyws_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 5000, warmup=4500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
noisyws_fake
rm(list=ls())
options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
#### Overall model:
# GDD ~ urban + method + method*urban + (urban + method + method*urban|species)
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(gridExtra)
library(rstan)
setwd("~/Documents/git/microclimates/analyses/")
#source("source/sims_hypoth_sourcedata.R")
source("source/sims_foo.R")
source("source/sims_hypoth_interxn_sourcedata.R")
#source("source/sims_params_sourcedata.R")
realgdd <- read.csv("output/cleanmicro_gdd_2019.csv")
###### Okay, we'll first start with the first hypothesis: Weather stations are less accurate measures of the same weather than hobo loggers.
## For the bbfunc(), we need to input a lot of information.
# 1. What is our question? Are we looking at the method effect? This would be "hobo" or the urban effect which is "urban" or finally the provenance effect which is "prov"
# 2. What parameter are we interested in? This can be "ws" or "hobo" if we select "hobo" as our question (#1)
# 3. What is the mu effect of our question?
# 4. What is the sigma of our question?
# 5. What is the GDD threshold or fstar?
# 6. What is the sigma fstar?
# 7. Mean temperature, we keep this consistent across the two sites
# 8. Sigma temperature, we keep this consistent across the two sites as well
# 9. Sigma of microclimatic effect (so what is added to the sigma temperature at the two sites)
simsdat <- bbfunc("hobo", "ws", 0, 10, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
use.urban <- "urban"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = treatmenttype,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
noisyws_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
noisyws_fake
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(gridExtra)
library(rstan)
setwd("~/Documents/git/microclimates/analyses/")
#source("source/sims_hypoth_sourcedata.R")
source("source/sims_foo.R")
source("source/sims_hypoth_interxn_sourcedata.R")
realgdd <- read.csv("output/cleanmicro_gdd_2019.csv")
simsdat <- bbfunc("hobo", "ws", 0, 10, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
ws <- ggplot(clim[(clim$method=="ws"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-20, 40)) +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(clim[(clim$method=="hobo"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(-20, 40)) +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5))
pdf("figures/clim_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
ws <- ggplot(bball[(bball$method=="ws"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(100, 700)) +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
#scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(bball[(bball$method=="hobo"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(100, 700)) +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0))
pdf("figures/gdd_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
use.urban <- "urban"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = treatmenttype,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
noisyws_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
noisyws_fake
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(gridExtra)
library(rstan)
setwd("~/Documents/git/microclimates/analyses/")
#source("source/sims_hypoth_sourcedata.R")
source("source/sims_foo.R")
source("source/sims_hypoth_interxn_sourcedata.R")
realgdd <- read.csv("output/cleanmicro_gdd_2019.csv")
simsdat <- bbfunc("hobo", "ws", 0, 10, 300, 20, 10, 3, 0)
#source("source/sims_hypoth_sourcedata.R")
source("source/sims_foo.R")
simsdat <- bbfunc("hobo", "ws", 0, 10, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
ws <- ggplot(clim[(clim$method=="ws"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-20, 40)) +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(clim[(clim$method=="hobo"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(-20, 40)) +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5))
pdf("figures/clim_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
ws <- ggplot(bball[(bball$method=="ws"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(100, 700)) +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
#scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(bball[(bball$method=="hobo"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(100, 700)) +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0))
pdf("figures/gdd_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
use.urban <- "urban"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = treatmenttype,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
noisyws_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 2000, warmup=1500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
noisyws_fake
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(mc.cores = parallel::detectCores())
library(RColorBrewer)
library(viridis)
library(ggplot2)
library(gridExtra)
library(rstan)
setwd("~/Documents/git/microclimates/analyses/")
#source("source/sims_hypoth_sourcedata.R")
source("source/sims_foo.R")
source("source/sims_hypoth_interxn_sourcedata.R")
realgdd <- read.csv("output/cleanmicro_gdd_2019.csv")
simsdat <- bbfunc("hobo", "ws", 0, 20, 300, 20, 10, 3, 0)
xtext <- seq(1, 2, by=1)
cols <-viridis_pal(option="viridis")(3)
bball <- simsdat[[1]]
clim <- simsdat[[2]]
ws <- ggplot(clim[(clim$method=="ws"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-20, 40)) +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="ws" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(clim[(clim$method=="hobo"),], aes(x=tmean)) + geom_histogram(aes(fill=site), alpha=0.3) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(clim$tmean[(clim$method=="hobo" & clim$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(-20, 40)) +
xlab("Mean Temperature (°C)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
scale_x_continuous(breaks = seq(-20, 40, by=5))
pdf("figures/clim_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
ws <- ggplot(bball[(bball$method=="ws"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(100, 700)) +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="ws" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0)) +
#scale_x_continuous(breaks = seq(-20, 40, by=5)) +
theme(legend.position="none")
hobo <- ggplot(bball[(bball$method=="hobo"),], aes(x=gdd)) + geom_histogram(aes(fill=site), alpha=0.3, position="stack") +
theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=c("Arboretum", "Harvard Forest")) + ggtitle("Hobo Logger") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="arb")]), col=cols[[1]], linetype="dashed") +
geom_vline(xintercept=mean(bball$gdd[(bball$method=="hobo" & bball$site=="hf")]), col=cols[[2]], linetype="dashed") +
coord_cartesian(xlim=c(100, 700)) +
xlab("Growing Degree Days (GDD)") + ylab("") +
scale_y_continuous(expand = c(0, 0))
pdf("figures/gdd_methods_noisyws.pdf", width=8, height=4, onefile=FALSE)
egg::ggarrange(ws, hobo, ncol=2)
dev.off()
use.urban <- "urban"
bball$treatmenttype <- if(use.urban=="urban"){ifelse(bball$site=="arb", 1, 0)}else if(use.urban=="prov"){
as.numeric(bball$prov)}
datalist.gdd <- with(bball,
list(y = gdd,
urban = treatmenttype,
method = type,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
noisyws_fake = stan('stan/urbanmethod_normal_ncp_inter.stan', data = datalist.gdd,
iter = 7000, warmup=6500, chains=4)#, control=list(adapt_delta=0.99, max_treedepth=15))
noisyws_fake
