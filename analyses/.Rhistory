bbws$bbws.gdd <- ave(bbws$gdd.ws, bbws$sp_ind, bbws$site, FUN=min)
bbws$doy <- NULL
bbws$gdd.ws <- NULL
bbws$bb.ws <- NULL
bbws <- bbws[!duplicated(bbws),]
bbhl <- df[(df$bb.hl=="Y"),]
bbhl <- subset(bbhl, select=c("species", "ind", "sp_ind", "site", "microsite", "doy", "gdd.hl", "bb.hl"))
bbhl$bbhl.doy <- ave(bbhl$doy, bbhl$sp_ind, bbhl$microsite, FUN=min)
bbhl$bbhl.gdd <- ave(bbhl$gdd.hl, bbhl$sp_ind, bbhl$microsite, FUN=min)
bbhl$doy <- NULL
bbhl$gdd.hl <- NULL
bbhl$bb.hl <- NULL
bbhl <- bbhl[!duplicated(bbhl),]
bball <- full_join(bbws, bbhl)
quartz()
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(12)
my.pch <- c(15:16)
plot(bbws.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Weather Station",
ylab="GDD")
abline(h=mean(bball$bbws.gdd), lwd=3)
plot(bbhl.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Hobo Logger",
ylab="GDD")
abline(h=mean(bball$bbhl.gdd), lwd=3)
bball$urban <- ifelse(bball$site=="arb", 1, 0)
modtest <- lmer(bbws.gdd ~ urban + (urban|species), data=bball)
arm::display(modtest)
modtest.hl <- lmer(bbhl.gdd ~ urban + (urban|species), data=bball)
arm::display(modtest.hl)
ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
#### Before moving on, let's look at the data a bit
cols <- brewer.pal(n = 8, name = "Dark2")
ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=microsite)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$microsite)))
#### Before moving on, let's look at the data a bit
cols <- viridis_pal(option = "magna")(20)
ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=microsite)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$microsite)))
View(df)
#### Before moving on, let's look at the data a bit
cols <- viridis_pal(option = "magna")(2)
ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$microsite)))
ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
#### Before moving on, let's look at the data a bit
par(mfrow=c(1,2))
cols <- brewer.pal(option = "Set3")(2)
cols <- brewer.pal(name = "Set3")(2)
cols <- brewer.pal(n=2, name = "Set3")
cols <- brewer.pal(n=3, name = "Set3")
ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
#### Before moving on, let's look at the data a bit
par(mfrow=c(1,2))
ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
#### Before moving on, let's look at the data a bit
cols <- brewer.pal(n=3, name = "Dark2")
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
#### Before moving on, let's look at the data a bit
cols <- brewer.pal(n=3, name = "Dark2")
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station")
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger")
grid.arrange(ws, hl, ncol=2)
library(gridExtra)
grid.arrange(ws, hl, ncol=2)
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
scale_x_continuous(c(-60, 60))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
scale_x_continuous(c(-60, 60))
#library(gridExtra)
grid.arrange(ws, hl, ncol=2)
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-60, 60))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-60, 60))
grid.arrange(ws, hl, ncol=2)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
## Let's start with Question 1 first...
#library(rethinking)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(rstan)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 292
sd(ws$gdd_bb, na.rm = TRUE) ## 116
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 200 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
urbeffect <- -75
urbsd <- 20
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 3
sigma.arb <- 10 ## based off weather station data
sigma.microarb <- 1
cc.hf <- 9  ## based off weather station data
mean.microhf <- 3
sigma.hf <- 11  ## based off weather station data
sigma.microhf <- 1
provenance.arb <- round(rnorm(nobs, 42.5, 10), digits=2)
provenance.hf <- 42.5
source("simulations/micro_databuildfx.R")
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Questions to address:
# GDDlo ~ urban + (urban|species)
## Let's start with Question 1 first...
#library(rethinking)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(rstan)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 292
sd(ws$gdd_bb, na.rm = TRUE) ## 116
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 200 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
urbeffect <- -75
urbsd <- 20
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 3
sigma.arb <- 10 ## based off weather station data
sigma.microarb <- 1
cc.hf <- 9  ## based off weather station data
mean.microhf <- 3
sigma.hf <- 11  ## based off weather station data
sigma.microhf <- 1
provenance.arb <- round(rnorm(nobs, 42.5, 10), digits=2)
provenance.hf <- 42.5
source("simulations/micro_databuildfx.R")
### First let's check on site level varition in temperature
#### Before moving on, let's look at the data a bit
cols <- brewer.pal(n=3, name = "Dark2")
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-60, 60))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-60, 60))
grid.arrange(ws, hl, ncol=2)
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-30, 30))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-30, 30))
grid.arrange(ws, hl, ncol=2)
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-30, 40))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-30, 40))
grid.arrange(ws, hl, ncol=2)
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Questions to address:
# GDDlo ~ urban + (urban|species)
## Let's start with Question 1 first...
#library(rethinking)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(rstan)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 292
sd(ws$gdd_bb, na.rm = TRUE) ## 116
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 200 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
urbeffect <- -75
urbsd <- 20
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 2
sigma.arb <- 10 ## based off weather station data
sigma.microarb <- 1
cc.hf <- 9  ## based off weather station data
mean.microhf <- 2
sigma.hf <- 11  ## based off weather station data
sigma.microhf <- 1
provenance.arb <- round(rnorm(nobs, 42.5, 10), digits=2)
provenance.hf <- 42.5
source("simulations/micro_databuildfx.R") ### warning messages are okay - outdated package warning but still works
### First let's check on site level varition in temperature
#### Before moving on, let's look at the data a bit
cols <- brewer.pal(n=3, name = "Dark2")
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-30, 40))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-30, 40))
grid.arrange(ws, hl, ncol=2)
range(df$tmean.ws)
range(df$tmean)
View(arbclim)
# Step 3: Make a data frame and get the mean temp per year (to double check the data)
df.arb <- data.frame(cbind(doy=dayz, tmean=round(arbclim$tmean, digits=2),
species=as.character(rep(1:nspps, each=daysperyr)),
ind=as.character(rep(1:ninds, each=daysperyr*nspps)),
site="arb",
provenance = rep(provenance.arb, each=daysperyr)))
df.hf <- data.frame(cbind(doy=dayz, tmean=round(hfclim$tmean, digits=2),
species=as.character(rep(1:nspps, each=daysperyr)),
ind=as.character(rep(1:ninds, each=daysperyr*nspps)),
site="hf",
provenance = provenance.hf))
df <- full_join(df.arb, df.hf)
df$tmean <- as.numeric(df$tmean)
View(df)
df$microsite <- paste0(df$site, df$ind)
df$tmean.ws <- ave(df$tmean, df$doy, df$site)
rm(list=ls())
options(stringsAsFactors = FALSE)
#### Questions to address:
# GDDlo ~ urban + (urban|species)
## Let's start with Question 1 first...
#library(rethinking)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(rstan)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 292
sd(ws$gdd_bb, na.rm = TRUE) ## 116
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 200 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
urbeffect <- -75
urbsd <- 20
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 2
sigma.arb <- 8
sigma.microarb <- 1
cc.hf <- 9  ## based off weather station data
mean.microhf <- 2
sigma.hf <- 8
sigma.microhf <- 1
provenance.arb <- round(rnorm(nobs, 42.5, 10), digits=2)
provenance.hf <- 42.5
source("simulations/micro_databuildfx.R") ### warning messages are okay - outdated package warning but still works
### First let's check on site level varition in temperature
#### Before moving on, let's look at the data a bit
cols <- brewer.pal(n=3, name = "Dark2")
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-35, 50))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-35, 50))
grid.arrange(ws, hl, ncol=2)
range(df$tmean.ws)
range(df$tmean)
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-25, 42))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-25, 42))
grid.arrange(ws, hl, ncol=2)
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-25, 42)) + geom_vline(xintercept = unique(ave(df$tmean.ws, df$site)))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-25, 42)) + geom_vline(xintercept = unique(ave(df$tmean.ws, df$site)))
grid.arrange(ws, hl, ncol=2)
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-25, 42)) + geom_vline(xintercept = unique(ave(df$tmean, df$site)))
grid.arrange(ws, hl, ncol=2)
### Now let's look at GDD differences between methods
quartz()
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(12)
my.pch <- c(15:16)
plot(bbws.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Weather Station",
ylab="GDD")
abline(h=mean(bball$bbws.gdd), lwd=3)
plot(bbhl.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Hobo Logger",
ylab="GDD")
abline(h=mean(bball$bbhl.gdd), lwd=3)
### Next, we can take a quick glimpse at results
bball$urban <- ifelse(bball$site=="arb", 1, 0)
modtest <- lmer(bbws.gdd ~ urban + (urban|species), data=bball)
arm::display(modtest)
modtest.hl <- lmer(bbhl.gdd ~ urban + (urban|species), data=bball)
arm::display(modtest.hl)
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
## Let's start with Question 1 first...
#library(rethinking)
library(RColorBrewer)
library(viridis)
library(lme4)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(rstan)
## Let's load some real data to check out.
setwd("~/Documents/git/microclimates/analyses/")
ws <- read.csv("output/clean_gdd_chill_bbanddvr.csv")
mean(ws$gdd_bb, na.rm=TRUE) ## 292
sd(ws$gdd_bb, na.rm = TRUE) ## 116
# Step 1: Set up years, days per year, temperatures, sampling frequency, required GDD (fstar)
daysperyr <- 200 #### just to make sure we don't get any NAs
nspps <- 12
ninds <- 10
nobs <- nspps*ninds
nsites <- 2
nmicros <- 10
urbeffect <- -75
fstar <- 250
fstarspeciessd <- 20
fstarindsd <- 10
dayz <- rep(1:daysperyr, nobs)
cc.arb <- 11 ## based off weather station data
mean.microarb <- 2
sigma.arb <- 8
sigma.microarb <- 1
cc.hf <- 9  ## based off weather station data
mean.microhf <- 2
sigma.hf <- 8
sigma.microhf <- 1
provenance.arb <- round(rnorm(nobs, 42.5, 10), digits=2)
provenance.hf <- 42.5
source("simulations/micro_databuildfx.R") ### warning messages are okay - outdated package warning but still works
source("simulations/micro_databuildfx.R") ### warning messages are okay - outdated package warning but still works
## Just a quick check on GDDs
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
cols <- brewer.pal(n=3, name = "Set2")
## Just a quick check on GDDs
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
cols <- rep(viridis_pal(option="viridis")(3), times=2)
## Just a quick check on GDDs
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
cols <- rev(rep(viridis_pal(option="viridis")(3), times=2))
## Just a quick check on GDDs
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
cols <- rep(viridis_pal(option="viridis")(3), times=2)
cols <- rev(cols)
## Just a quick check on GDDs
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
cols <-viridis_pal(option="viridis")(2)
## Just a quick check on GDDs
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
cols <-viridis_pal(option="viridis")(3)
## Just a quick check on GDDs
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
cols <-viridis_pal(option="viridis")(4)
## Just a quick check on GDDs
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
cols <-viridis_pal(option="viridis")(3)
## Just a quick check on GDDs
ggplot(df.fstar, aes(x=fstar.new)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site)))
### Okay, first let's check on site level varition in temperature
#### Before moving on, let's look at the data a bit
ws <- ggplot(df, aes(x=tmean.ws)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Weather Station") +
coord_cartesian(xlim=c(-25, 42))
hl <- ggplot(df, aes(x=tmean)) + geom_histogram(aes(fill=site)) + theme_classic() +
scale_fill_manual(name="Site", values=cols, labels=sort(unique(df$site))) + ggtitle("Hobo Logger") +
coord_cartesian(xlim=c(-25, 42))
grid.arrange(ws, hl, ncol=2)
### Now let's look at GDD differences between methods
quartz()
par(mfrow=c(1,2))
my.pal <- viridis_pal(option="magma")(12)
my.pch <- c(15:16)
plot(bbws.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Weather Station",
ylab="GDD")
abline(h=mean(bball$bbws.gdd), lwd=3)
plot(bbhl.gdd ~ species, col=my.pal[as.factor(bball$species)], pch=my.pch[as.factor(bball$site)], data = bball, main="Hobo Logger",
ylab="GDD")
abline(h=mean(bball$bbhl.gdd), lwd=3)
### Next, we can take a quick glimpse at results
bball$urban <- ifelse(bball$site=="arb", 1, 0)
modtest <- lmer(bbws.gdd ~ urban + (urban|species), data=bball)
arm::display(modtest)
modtest.hl <- lmer(bbhl.gdd ~ urban + (urban|species), data=bball)
arm::display(modtest.hl)
library(sjPlot)
install.packages("sjPlot")
quartz()
tab_model(modtest, modtest.hl)
sjPlot::tab_model(modtest, modtest.hl)
#####And finally... it's modelling time!
bball$urban <- ifelse(bball$site=="arb", 1, 0)
datalist.gdd <- with(bball,
list(y = bbws.gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
ws_urb_buildfake = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 4000, warmup=2000, control=list(max_treedepth = 15,adapt_delta = 0.99)) ###
ws_urb_fake.sum <- summary(ws_urb_buildfake)$summary
ws_urb_fake.sum[grep("mu_", rownames(ws_urb_fake.sum)),]
ws_urb_fake.sum[grep("sigma_", rownames(ws_urb_fake.sum)),]
datalist.gdd <- with(bball,
list(y = bbhl.gdd,
tx = urban,
sp = as.numeric(as.factor(species)),
N = nrow(bball),
n_sp = length(unique(bball$species))
)
)
hl_urb_buildfake = stan('stan/urbanmodel_stan_normal_ncp.stan', data = datalist.gdd,
iter = 4000, warmup=2000, control=list(adapt_delta = 0.99)) ###
hl_urb_fake.sum <- summary(hl_urb_buildfake)$summary
hl_urb_fake.sum[grep("mu_", rownames(hl_urb_fake.sum)),]
hl_urb_fake.sum[grep("sigma_", rownames(hl_urb_fake.sum)),]
ws_urb_fake.sum[grep("mu_", rownames(ws_urb_fake.sum)),]
ws_urb_fake.sum[grep("sigma_", rownames(ws_urb_fake.sum)),]
use.urban = TRUE
use.provenance = TRUE
if(use.urban == TRUE & use.provenance == TRUE){
print("Error has occurred. Can't have both equal TRUE!")
}
